// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="backoff_vi,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.122750,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=11,HLS_SYN_LUT=48,HLS_VERSION=2019_2}" *)

module backoff_vi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        current_txop_holder_i,
        current_txop_holder_o,
        current_txop_holder_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] current_txop_holder_i;
output  [2:0] current_txop_holder_o;
output   current_txop_holder_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] current_txop_holder_o;
reg current_txop_holder_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] vi_backoff_counter;
wire   [9:0] add_ln221_fu_44_p2;
wire   [0:0] icmp_ln212_fu_38_p2;
wire   [0:0] icmp_ln213_fu_56_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 vi_backoff_counter = 10'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln212_fu_38_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        vi_backoff_counter <= add_ln221_fu_44_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (icmp_ln213_fu_56_p2 == 1'd1) & (icmp_ln212_fu_38_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        current_txop_holder_o = 3'd3;
    end else begin
        current_txop_holder_o = current_txop_holder_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (icmp_ln213_fu_56_p2 == 1'd1) & (icmp_ln212_fu_38_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        current_txop_holder_o_ap_vld = 1'b1;
    end else begin
        current_txop_holder_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln221_fu_44_p2 = ($signed(vi_backoff_counter) + $signed(10'd1023));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign icmp_ln212_fu_38_p2 = ((vi_backoff_counter == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln213_fu_56_p2 = ((current_txop_holder_i < 3'd3) ? 1'b1 : 1'b0);

endmodule //backoff_vi
