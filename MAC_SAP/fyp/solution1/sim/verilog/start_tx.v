// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module start_tx (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        current_txop_holder,
        tx_frame_address0,
        tx_frame_ce0,
        tx_frame_we0,
        tx_frame_d0,
        tx_frame_q0,
        available_spaces_bk_i,
        available_spaces_bk_o,
        available_spaces_bk_o_ap_vld,
        write_pointer_bk_i,
        write_pointer_bk_o,
        write_pointer_bk_o_ap_vld,
        available_spaces_be_i,
        available_spaces_be_o,
        available_spaces_be_o_ap_vld,
        write_pointer_be_i,
        write_pointer_be_o,
        write_pointer_be_o_ap_vld,
        available_spaces_vi_i,
        available_spaces_vi_o,
        available_spaces_vi_o_ap_vld,
        write_pointer_vi_i,
        write_pointer_vi_o,
        write_pointer_vi_o_ap_vld,
        available_spaces_vo_i,
        available_spaces_vo_o,
        available_spaces_vo_o_ap_vld,
        write_pointer_vo_i,
        write_pointer_vo_o,
        write_pointer_vo_o_ap_vld,
        edca_queues_address0,
        edca_queues_ce0,
        edca_queues_we0,
        edca_queues_d0,
        edca_queues_q0,
        read_pointer_bk_i,
        read_pointer_bk_o,
        read_pointer_bk_o_ap_vld,
        read_pointer_be_i,
        read_pointer_be_o,
        read_pointer_be_o_ap_vld,
        read_pointer_vi_i,
        read_pointer_vi_o,
        read_pointer_vi_o_ap_vld,
        read_pointer_vo_i,
        read_pointer_vo_o,
        read_pointer_vo_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] current_txop_holder;
output  [6:0] tx_frame_address0;
output   tx_frame_ce0;
output   tx_frame_we0;
output  [7:0] tx_frame_d0;
input  [7:0] tx_frame_q0;
input  [2:0] available_spaces_bk_i;
output  [2:0] available_spaces_bk_o;
output   available_spaces_bk_o_ap_vld;
input  [1:0] write_pointer_bk_i;
output  [1:0] write_pointer_bk_o;
output   write_pointer_bk_o_ap_vld;
input  [2:0] available_spaces_be_i;
output  [2:0] available_spaces_be_o;
output   available_spaces_be_o_ap_vld;
input  [1:0] write_pointer_be_i;
output  [1:0] write_pointer_be_o;
output   write_pointer_be_o_ap_vld;
input  [2:0] available_spaces_vi_i;
output  [2:0] available_spaces_vi_o;
output   available_spaces_vi_o_ap_vld;
input  [1:0] write_pointer_vi_i;
output  [1:0] write_pointer_vi_o;
output   write_pointer_vi_o_ap_vld;
input  [2:0] available_spaces_vo_i;
output  [2:0] available_spaces_vo_o;
output   available_spaces_vo_o_ap_vld;
input  [1:0] write_pointer_vo_i;
output  [1:0] write_pointer_vo_o;
output   write_pointer_vo_o_ap_vld;
output  [10:0] edca_queues_address0;
output   edca_queues_ce0;
output   edca_queues_we0;
output  [7:0] edca_queues_d0;
input  [7:0] edca_queues_q0;
input  [1:0] read_pointer_bk_i;
output  [1:0] read_pointer_bk_o;
output   read_pointer_bk_o_ap_vld;
input  [1:0] read_pointer_be_i;
output  [1:0] read_pointer_be_o;
output   read_pointer_be_o_ap_vld;
input  [1:0] read_pointer_vi_i;
output  [1:0] read_pointer_vi_o;
output   read_pointer_vi_o_ap_vld;
input  [1:0] read_pointer_vo_i;
output  [1:0] read_pointer_vo_o;
output   read_pointer_vo_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] available_spaces_bk_o;
reg[1:0] write_pointer_bk_o;
reg[2:0] available_spaces_be_o;
reg[1:0] write_pointer_be_o;
reg[2:0] available_spaces_vi_o;
reg[1:0] write_pointer_vi_o;
reg[2:0] available_spaces_vo_o;
reg[1:0] write_pointer_vo_o;
reg[1:0] read_pointer_bk_o;
reg[1:0] read_pointer_be_o;
reg[1:0] read_pointer_vi_o;
reg[1:0] read_pointer_vo_o;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] add_ln368_fu_83_p2;
reg   [1:0] add_ln368_reg_90;
wire    grp_enqueue_dequeue_fram_fu_44_ap_start;
wire    grp_enqueue_dequeue_fram_fu_44_ap_done;
wire    grp_enqueue_dequeue_fram_fu_44_ap_idle;
wire    grp_enqueue_dequeue_fram_fu_44_ap_ready;
wire   [6:0] grp_enqueue_dequeue_fram_fu_44_inout_frame_address0;
wire    grp_enqueue_dequeue_fram_fu_44_inout_frame_ce0;
wire    grp_enqueue_dequeue_fram_fu_44_inout_frame_we0;
wire   [7:0] grp_enqueue_dequeue_fram_fu_44_inout_frame_d0;
wire   [2:0] grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o;
wire    grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o_ap_vld;
wire   [1:0] grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o;
wire    grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o_ap_vld;
wire   [2:0] grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o;
wire    grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o_ap_vld;
wire   [1:0] grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o;
wire    grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o_ap_vld;
wire   [2:0] grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o;
wire    grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o_ap_vld;
wire   [1:0] grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o;
wire    grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o_ap_vld;
wire   [2:0] grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o;
wire    grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o_ap_vld;
wire   [1:0] grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o;
wire    grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o_ap_vld;
wire   [10:0] grp_enqueue_dequeue_fram_fu_44_edca_queues_address0;
wire    grp_enqueue_dequeue_fram_fu_44_edca_queues_ce0;
wire    grp_enqueue_dequeue_fram_fu_44_edca_queues_we0;
wire   [7:0] grp_enqueue_dequeue_fram_fu_44_edca_queues_d0;
wire   [1:0] grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o;
wire    grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o_ap_vld;
wire   [1:0] grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o;
wire    grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o_ap_vld;
wire   [1:0] grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o;
wire    grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o_ap_vld;
wire   [1:0] grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o;
wire    grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o_ap_vld;
wire   [3:0] grp_enqueue_dequeue_fram_fu_44_ap_return;
reg    grp_enqueue_dequeue_fram_fu_44_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [1:0] trunc_ln368_fu_79_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_enqueue_dequeue_fram_fu_44_ap_start_reg = 1'b0;
end

enqueue_dequeue_fram grp_enqueue_dequeue_fram_fu_44(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_enqueue_dequeue_fram_fu_44_ap_start),
    .ap_done(grp_enqueue_dequeue_fram_fu_44_ap_done),
    .ap_idle(grp_enqueue_dequeue_fram_fu_44_ap_idle),
    .ap_ready(grp_enqueue_dequeue_fram_fu_44_ap_ready),
    .operation(1'd1),
    .ac(add_ln368_reg_90),
    .inout_frame_address0(grp_enqueue_dequeue_fram_fu_44_inout_frame_address0),
    .inout_frame_ce0(grp_enqueue_dequeue_fram_fu_44_inout_frame_ce0),
    .inout_frame_we0(grp_enqueue_dequeue_fram_fu_44_inout_frame_we0),
    .inout_frame_d0(grp_enqueue_dequeue_fram_fu_44_inout_frame_d0),
    .inout_frame_q0(tx_frame_q0),
    .available_spaces_bk_i(available_spaces_bk_i),
    .available_spaces_bk_o(grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o),
    .available_spaces_bk_o_ap_vld(grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o_ap_vld),
    .write_pointer_bk_i(write_pointer_bk_i),
    .write_pointer_bk_o(grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o),
    .write_pointer_bk_o_ap_vld(grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o_ap_vld),
    .available_spaces_be_i(available_spaces_be_i),
    .available_spaces_be_o(grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o),
    .available_spaces_be_o_ap_vld(grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o_ap_vld),
    .write_pointer_be_i(write_pointer_be_i),
    .write_pointer_be_o(grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o),
    .write_pointer_be_o_ap_vld(grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o_ap_vld),
    .available_spaces_vi_i(available_spaces_vi_i),
    .available_spaces_vi_o(grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o),
    .available_spaces_vi_o_ap_vld(grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o_ap_vld),
    .write_pointer_vi_i(write_pointer_vi_i),
    .write_pointer_vi_o(grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o),
    .write_pointer_vi_o_ap_vld(grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o_ap_vld),
    .available_spaces_vo_i(available_spaces_vo_i),
    .available_spaces_vo_o(grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o),
    .available_spaces_vo_o_ap_vld(grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o_ap_vld),
    .write_pointer_vo_i(write_pointer_vo_i),
    .write_pointer_vo_o(grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o),
    .write_pointer_vo_o_ap_vld(grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o_ap_vld),
    .edca_queues_address0(grp_enqueue_dequeue_fram_fu_44_edca_queues_address0),
    .edca_queues_ce0(grp_enqueue_dequeue_fram_fu_44_edca_queues_ce0),
    .edca_queues_we0(grp_enqueue_dequeue_fram_fu_44_edca_queues_we0),
    .edca_queues_d0(grp_enqueue_dequeue_fram_fu_44_edca_queues_d0),
    .edca_queues_q0(edca_queues_q0),
    .read_pointer_bk_i(read_pointer_bk_i),
    .read_pointer_bk_o(grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o),
    .read_pointer_bk_o_ap_vld(grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o_ap_vld),
    .read_pointer_be_i(read_pointer_be_i),
    .read_pointer_be_o(grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o),
    .read_pointer_be_o_ap_vld(grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o_ap_vld),
    .read_pointer_vi_i(read_pointer_vi_i),
    .read_pointer_vi_o(grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o),
    .read_pointer_vi_o_ap_vld(grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o_ap_vld),
    .read_pointer_vo_i(read_pointer_vo_i),
    .read_pointer_vo_o(grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o),
    .read_pointer_vo_o_ap_vld(grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o_ap_vld),
    .ap_return(grp_enqueue_dequeue_fram_fu_44_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_enqueue_dequeue_fram_fu_44_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_enqueue_dequeue_fram_fu_44_ap_start_reg <= 1'b1;
        end else if ((grp_enqueue_dequeue_fram_fu_44_ap_ready == 1'b1)) begin
            grp_enqueue_dequeue_fram_fu_44_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln368_reg_90 <= add_ln368_fu_83_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_enqueue_dequeue_fram_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_enqueue_dequeue_fram_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o_ap_vld == 1'b1))) begin
        available_spaces_be_o = grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o;
    end else begin
        available_spaces_be_o = available_spaces_be_i;
    end
end

always @ (*) begin
    if (((grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        available_spaces_bk_o = grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o;
    end else begin
        available_spaces_bk_o = available_spaces_bk_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o_ap_vld == 1'b1))) begin
        available_spaces_vi_o = grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o;
    end else begin
        available_spaces_vi_o = available_spaces_vi_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o_ap_vld == 1'b1))) begin
        available_spaces_vo_o = grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o;
    end else begin
        available_spaces_vo_o = available_spaces_vo_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o_ap_vld == 1'b1))) begin
        read_pointer_be_o = grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o;
    end else begin
        read_pointer_be_o = read_pointer_be_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o_ap_vld == 1'b1))) begin
        read_pointer_bk_o = grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o;
    end else begin
        read_pointer_bk_o = read_pointer_bk_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o_ap_vld == 1'b1))) begin
        read_pointer_vi_o = grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o;
    end else begin
        read_pointer_vi_o = read_pointer_vi_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o_ap_vld == 1'b1))) begin
        read_pointer_vo_o = grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o;
    end else begin
        read_pointer_vo_o = read_pointer_vo_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o_ap_vld == 1'b1))) begin
        write_pointer_be_o = grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o;
    end else begin
        write_pointer_be_o = write_pointer_be_i;
    end
end

always @ (*) begin
    if (((grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        write_pointer_bk_o = grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o;
    end else begin
        write_pointer_bk_o = write_pointer_bk_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o_ap_vld == 1'b1))) begin
        write_pointer_vi_o = grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o;
    end else begin
        write_pointer_vi_o = write_pointer_vi_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o_ap_vld == 1'b1))) begin
        write_pointer_vo_o = grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o;
    end else begin
        write_pointer_vo_o = write_pointer_vo_i;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_enqueue_dequeue_fram_fu_44_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln368_fu_83_p2 = ($signed(2'd3) + $signed(trunc_ln368_fu_79_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign available_spaces_be_o_ap_vld = grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o_ap_vld;

assign available_spaces_bk_o_ap_vld = grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o_ap_vld;

assign available_spaces_vi_o_ap_vld = grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o_ap_vld;

assign available_spaces_vo_o_ap_vld = grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o_ap_vld;

assign edca_queues_address0 = grp_enqueue_dequeue_fram_fu_44_edca_queues_address0;

assign edca_queues_ce0 = grp_enqueue_dequeue_fram_fu_44_edca_queues_ce0;

assign edca_queues_d0 = grp_enqueue_dequeue_fram_fu_44_edca_queues_d0;

assign edca_queues_we0 = grp_enqueue_dequeue_fram_fu_44_edca_queues_we0;

assign grp_enqueue_dequeue_fram_fu_44_ap_start = grp_enqueue_dequeue_fram_fu_44_ap_start_reg;

assign read_pointer_be_o_ap_vld = grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o_ap_vld;

assign read_pointer_bk_o_ap_vld = grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o_ap_vld;

assign read_pointer_vi_o_ap_vld = grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o_ap_vld;

assign read_pointer_vo_o_ap_vld = grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o_ap_vld;

assign trunc_ln368_fu_79_p1 = current_txop_holder[1:0];

assign tx_frame_address0 = grp_enqueue_dequeue_fram_fu_44_inout_frame_address0;

assign tx_frame_ce0 = grp_enqueue_dequeue_fram_fu_44_inout_frame_ce0;

assign tx_frame_d0 = grp_enqueue_dequeue_fram_fu_44_inout_frame_d0;

assign tx_frame_we0 = grp_enqueue_dequeue_fram_fu_44_inout_frame_we0;

assign write_pointer_be_o_ap_vld = grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o_ap_vld;

assign write_pointer_bk_o_ap_vld = grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o_ap_vld;

assign write_pointer_vi_o_ap_vld = grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o_ap_vld;

assign write_pointer_vo_o_ap_vld = grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o_ap_vld;

endmodule //start_tx
