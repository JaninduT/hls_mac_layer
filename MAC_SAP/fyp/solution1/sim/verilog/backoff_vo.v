// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module backoff_vo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        current_txop_holder,
        current_txop_holder_ap_vld,
        available_spaces_vo,
        vo_backoff_counter_i,
        vo_backoff_counter_o,
        vo_backoff_counter_o_ap_vld,
        rand_state_i,
        rand_state_o,
        rand_state_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] current_txop_holder;
output   current_txop_holder_ap_vld;
input  [2:0] available_spaces_vo;
input  [9:0] vo_backoff_counter_i;
output  [9:0] vo_backoff_counter_o;
output   vo_backoff_counter_o_ap_vld;
input  [31:0] rand_state_i;
output  [31:0] rand_state_o;
output   rand_state_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg current_txop_holder_ap_vld;
reg[9:0] vo_backoff_counter_o;
reg vo_backoff_counter_o_ap_vld;
reg[31:0] rand_state_o;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_fu_44_p3;
reg   [0:0] tmp_reg_80;
wire   [0:0] icmp_ln255_fu_56_p2;
reg   [0:0] icmp_ln255_reg_84;
wire    grp_random_int_gen_fu_32_ap_start;
wire    grp_random_int_gen_fu_32_ap_done;
wire    grp_random_int_gen_fu_32_ap_idle;
wire    grp_random_int_gen_fu_32_ap_ready;
wire   [31:0] grp_random_int_gen_fu_32_rand_state_o;
wire    grp_random_int_gen_fu_32_rand_state_o_ap_vld;
wire   [9:0] grp_random_int_gen_fu_32_ap_return;
reg    grp_random_int_gen_fu_32_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    ap_predicate_op14_call_state2;
reg    ap_block_state2_on_subcall_done;
wire   [9:0] add_ln260_fu_62_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_random_int_gen_fu_32_ap_start_reg = 1'b0;
end

random_int_gen grp_random_int_gen_fu_32(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_random_int_gen_fu_32_ap_start),
    .ap_done(grp_random_int_gen_fu_32_ap_done),
    .ap_idle(grp_random_int_gen_fu_32_ap_idle),
    .ap_ready(grp_random_int_gen_fu_32_ap_ready),
    .max_val(10'd15),
    .rand_state_i(rand_state_i),
    .rand_state_o(grp_random_int_gen_fu_32_rand_state_o),
    .rand_state_o_ap_vld(grp_random_int_gen_fu_32_rand_state_o_ap_vld),
    .ap_return(grp_random_int_gen_fu_32_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_random_int_gen_fu_32_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (icmp_ln255_fu_56_p2 == 1'd1) & (tmp_fu_44_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_random_int_gen_fu_32_ap_start_reg <= 1'b1;
        end else if ((grp_random_int_gen_fu_32_ap_ready == 1'b1)) begin
            grp_random_int_gen_fu_32_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (tmp_fu_44_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln255_reg_84 <= icmp_ln255_fu_56_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_80 <= available_spaces_vo[32'd2];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (icmp_ln255_reg_84 == 1'd1) & (tmp_reg_80 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        current_txop_holder_ap_vld = 1'b1;
    end else begin
        current_txop_holder_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln255_reg_84 == 1'd1) & (tmp_reg_80 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (grp_random_int_gen_fu_32_rand_state_o_ap_vld == 1'b1))) begin
        rand_state_o = grp_random_int_gen_fu_32_rand_state_o;
    end else begin
        rand_state_o = rand_state_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (icmp_ln255_reg_84 == 1'd1) & (tmp_reg_80 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        vo_backoff_counter_o = grp_random_int_gen_fu_32_ap_return;
    end else if (((ap_start == 1'b1) & (icmp_ln255_fu_56_p2 == 1'd0) & (tmp_fu_44_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        vo_backoff_counter_o = add_ln260_fu_62_p2;
    end else begin
        vo_backoff_counter_o = vo_backoff_counter_i;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state2_on_subcall_done) & (icmp_ln255_reg_84 == 1'd1) & (tmp_reg_80 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (icmp_ln255_fu_56_p2 == 1'd0) & (tmp_fu_44_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        vo_backoff_counter_o_ap_vld = 1'b1;
    end else begin
        vo_backoff_counter_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln260_fu_62_p2 = ($signed(vo_backoff_counter_i) + $signed(10'd1023));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_random_int_gen_fu_32_ap_done == 1'b0) & (ap_predicate_op14_call_state2 == 1'b1));
end

always @ (*) begin
    ap_predicate_op14_call_state2 = ((icmp_ln255_reg_84 == 1'd1) & (tmp_reg_80 == 1'd0));
end

assign current_txop_holder = 3'd4;

assign grp_random_int_gen_fu_32_ap_start = grp_random_int_gen_fu_32_ap_start_reg;

assign icmp_ln255_fu_56_p2 = ((vo_backoff_counter_i == 10'd0) ? 1'b1 : 1'b0);

assign rand_state_o_ap_vld = grp_random_int_gen_fu_32_rand_state_o_ap_vld;

assign tmp_fu_44_p3 = available_spaces_vo[32'd2];

endmodule //backoff_vo
