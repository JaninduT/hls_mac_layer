// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compose_mac_frame (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        seqnumber,
        up,
        data_address0,
        data_ce0,
        data_q0,
        mac_frame_address0,
        mac_frame_ce0,
        mac_frame_we0,
        mac_frame_d0,
        mac_frame_address1,
        mac_frame_ce1,
        mac_frame_we1,
        mac_frame_d1,
        mac_frame_q1
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] seqnumber;
input  [3:0] up;
output  [6:0] data_address0;
output   data_ce0;
input  [7:0] data_q0;
output  [6:0] mac_frame_address0;
output   mac_frame_ce0;
output   mac_frame_we0;
output  [7:0] mac_frame_d0;
output  [6:0] mac_frame_address1;
output   mac_frame_ce1;
output   mac_frame_we1;
output  [7:0] mac_frame_d1;
input  [7:0] mac_frame_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_ce0;
reg[6:0] mac_frame_address0;
reg mac_frame_ce0;
reg mac_frame_we0;
reg[7:0] mac_frame_d0;
reg[6:0] mac_frame_address1;
reg mac_frame_ce1;
reg mac_frame_we1;
reg[7:0] mac_frame_d1;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] j_fu_550_p2;
reg   [6:0] j_reg_724;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln65_fu_544_p2;
wire   [6:0] i_fu_583_p2;
reg   [6:0] i_reg_745;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln8_fu_577_p2;
wire   [31:0] crc_1_fu_594_p2;
reg   [31:0] crc_1_reg_755;
wire   [3:0] j_1_fu_625_p2;
wire    ap_CS_fsm_state18;
wire   [2:0] k_fu_674_p2;
wire    ap_CS_fsm_state19;
reg   [6:0] j_0_reg_453;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
reg   [6:0] i_0_i_reg_465;
wire   [0:0] icmp_ln11_fu_619_p2;
reg   [3:0] j_0_i_reg_476;
wire    ap_CS_fsm_state17;
reg   [2:0] k_0_reg_487;
wire   [0:0] icmp_ln72_fu_668_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln66_fu_556_p1;
wire   [63:0] zext_ln66_1_fu_572_p1;
wire   [63:0] zext_ln9_fu_589_p1;
wire   [63:0] zext_ln73_fu_716_p1;
reg   [31:0] crc_fu_146;
wire   [31:0] remainder_fu_608_p2;
wire   [31:0] remainder_3_fu_651_p3;
wire   [7:0] seq_num_h_fu_516_p1;
wire   [7:0] seq_num_l_fu_501_p1;
wire   [7:0] zext_ln51_fu_539_p1;
wire   [7:0] trunc_ln73_1_fu_701_p1;
wire   [3:0] tmp_fu_506_p4;
wire   [2:0] trunc_ln50_fu_521_p1;
wire   [6:0] qos_h_fu_525_p3;
wire   [6:0] qos_h_1_fu_533_p2;
wire   [6:0] add_ln66_fu_566_p2;
wire   [31:0] shl_ln_fu_600_p3;
wire   [31:0] remainder_1_fu_639_p2;
wire   [0:0] tmp_7_fu_631_p3;
wire   [31:0] remainder_2_fu_645_p2;
wire   [1:0] trunc_ln73_fu_680_p1;
wire   [4:0] shl_ln1_fu_684_p3;
wire   [31:0] zext_ln73_1_fu_692_p1;
wire   [31:0] lshr_ln73_fu_696_p2;
wire   [5:0] zext_ln72_fu_664_p1;
wire   [5:0] sub_ln73_fu_706_p2;
wire  signed [6:0] sext_ln73_fu_712_p1;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_619_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        crc_fu_146 <= remainder_3_fu_651_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        crc_fu_146 <= remainder_fu_608_p2;
    end else if (((icmp_ln65_fu_544_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        crc_fu_146 <= 32'd4294967295;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_544_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        i_0_i_reg_465 <= 7'd0;
    end else if (((icmp_ln11_fu_619_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        i_0_i_reg_465 <= i_reg_745;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_619_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        j_0_i_reg_476 <= j_1_fu_625_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        j_0_i_reg_476 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_0_reg_453 <= j_reg_724;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        j_0_reg_453 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        k_0_reg_487 <= k_fu_674_p2;
    end else if (((icmp_ln8_fu_577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        k_0_reg_487 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        crc_1_reg_755 <= crc_1_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_reg_745 <= i_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_reg_724 <= j_fu_550_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln72_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        mac_frame_address0 = zext_ln73_fu_716_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        mac_frame_address0 = zext_ln66_1_fu_572_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        mac_frame_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mac_frame_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mac_frame_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mac_frame_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        mac_frame_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mac_frame_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        mac_frame_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mac_frame_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        mac_frame_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mac_frame_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mac_frame_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mac_frame_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        mac_frame_address0 = 64'd0;
    end else begin
        mac_frame_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        mac_frame_address1 = zext_ln9_fu_589_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        mac_frame_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mac_frame_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mac_frame_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mac_frame_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        mac_frame_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mac_frame_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        mac_frame_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mac_frame_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        mac_frame_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mac_frame_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mac_frame_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mac_frame_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        mac_frame_address1 = 64'd1;
    end else begin
        mac_frame_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        mac_frame_ce0 = 1'b1;
    end else begin
        mac_frame_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        mac_frame_ce1 = 1'b1;
    end else begin
        mac_frame_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        mac_frame_d0 = trunc_ln73_1_fu_701_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        mac_frame_d0 = data_q0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        mac_frame_d0 = zext_ln51_fu_539_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mac_frame_d0 = seq_num_h_fu_516_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mac_frame_d0 = 8'd222;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        mac_frame_d0 = 8'd188;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        mac_frame_d0 = 8'd255;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mac_frame_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        mac_frame_d0 = 8'd17;
    end else begin
        mac_frame_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mac_frame_d1 = seq_num_l_fu_501_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mac_frame_d1 = 8'd239;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        mac_frame_d1 = 8'd205;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mac_frame_d1 = 8'd171;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        mac_frame_d1 = 8'd255;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13))) begin
        mac_frame_d1 = 8'd0;
    end else begin
        mac_frame_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln72_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19)))) begin
        mac_frame_we0 = 1'b1;
    end else begin
        mac_frame_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        mac_frame_we1 = 1'b1;
    end else begin
        mac_frame_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln65_fu_544_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln8_fu_577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln11_fu_619_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln72_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln66_fu_566_p2 = (j_0_reg_453 + 7'd26);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign crc_1_fu_594_p2 = (crc_fu_146 ^ 32'd4294967295);

assign data_address0 = zext_ln66_fu_556_p1;

assign i_fu_583_p2 = (i_0_i_reg_465 + 7'd1);

assign icmp_ln11_fu_619_p2 = ((j_0_i_reg_476 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_544_p2 = ((j_0_reg_453 == 7'd70) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_668_p2 = ((k_0_reg_487 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_577_p2 = ((i_0_i_reg_465 == 7'd96) ? 1'b1 : 1'b0);

assign j_1_fu_625_p2 = (j_0_i_reg_476 + 4'd1);

assign j_fu_550_p2 = (j_0_reg_453 + 7'd1);

assign k_fu_674_p2 = (k_0_reg_487 + 3'd1);

assign lshr_ln73_fu_696_p2 = crc_1_reg_755 >> zext_ln73_1_fu_692_p1;

assign qos_h_1_fu_533_p2 = (qos_h_fu_525_p3 | 7'd4);

assign qos_h_fu_525_p3 = {{trunc_ln50_fu_521_p1}, {4'd0}};

assign remainder_1_fu_639_p2 = crc_fu_146 << 32'd1;

assign remainder_2_fu_645_p2 = (remainder_1_fu_639_p2 ^ 32'd79764919);

assign remainder_3_fu_651_p3 = ((tmp_7_fu_631_p3[0:0] === 1'b1) ? remainder_2_fu_645_p2 : remainder_1_fu_639_p2);

assign remainder_fu_608_p2 = (shl_ln_fu_600_p3 ^ crc_fu_146);

assign seq_num_h_fu_516_p1 = tmp_fu_506_p4;

assign seq_num_l_fu_501_p1 = seqnumber[7:0];

assign sext_ln73_fu_712_p1 = $signed(sub_ln73_fu_706_p2);

assign shl_ln1_fu_684_p3 = {{trunc_ln73_fu_680_p1}, {3'd0}};

assign shl_ln_fu_600_p3 = {{mac_frame_q1}, {24'd0}};

assign sub_ln73_fu_706_p2 = ($signed(6'd35) - $signed(zext_ln72_fu_664_p1));

assign tmp_7_fu_631_p3 = crc_fu_146[32'd31];

assign tmp_fu_506_p4 = {{seqnumber[11:8]}};

assign trunc_ln50_fu_521_p1 = up[2:0];

assign trunc_ln73_1_fu_701_p1 = lshr_ln73_fu_696_p2[7:0];

assign trunc_ln73_fu_680_p1 = k_0_reg_487[1:0];

assign zext_ln51_fu_539_p1 = qos_h_1_fu_533_p2;

assign zext_ln66_1_fu_572_p1 = add_ln66_fu_566_p2;

assign zext_ln66_fu_556_p1 = j_0_reg_453;

assign zext_ln72_fu_664_p1 = k_0_reg_487;

assign zext_ln73_1_fu_692_p1 = shl_ln1_fu_684_p3;

assign zext_ln73_fu_716_p1 = $unsigned(sext_ln73_fu_712_p1);

assign zext_ln9_fu_589_p1 = i_0_i_reg_465;

endmodule //compose_mac_frame
