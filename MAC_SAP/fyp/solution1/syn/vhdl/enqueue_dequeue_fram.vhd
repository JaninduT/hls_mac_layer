-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity enqueue_dequeue_fram is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ac : IN STD_LOGIC_VECTOR (1 downto 0);
    inout_frame_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    inout_frame_ce0 : OUT STD_LOGIC;
    inout_frame_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of enqueue_dequeue_fram is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_64 : STD_LOGIC_VECTOR (8 downto 0) := "001100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv11_4B0 : STD_LOGIC_VECTOR (10 downto 0) := "10010110000";
    constant ap_const_lv11_320 : STD_LOGIC_VECTOR (10 downto 0) := "01100100000";
    constant ap_const_lv10_190 : STD_LOGIC_VECTOR (9 downto 0) := "0110010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal available_spaces_bk : STD_LOGIC_VECTOR (2 downto 0) := "100";
    signal write_pointer_bk : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal edca_queues_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal edca_queues_ce0 : STD_LOGIC;
    signal edca_queues_we0 : STD_LOGIC;
    signal available_spaces_be : STD_LOGIC_VECTOR (2 downto 0) := "100";
    signal write_pointer_be : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal available_spaces_vi : STD_LOGIC_VECTOR (2 downto 0) := "011";
    signal write_pointer_vi : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal available_spaces_vo : STD_LOGIC_VECTOR (2 downto 0) := "100";
    signal write_pointer_vo : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal available_spaces_vo_s_reg_599 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln52_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_pointer_vo_loa_reg_607 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln96_fu_274_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln96_reg_612 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln92_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal available_spaces_vi_s_reg_617 : STD_LOGIC_VECTOR (2 downto 0);
    signal write_pointer_vi_loa_reg_625 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln83_fu_298_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln83_reg_630 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln79_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal available_spaces_be_s_reg_635 : STD_LOGIC_VECTOR (2 downto 0);
    signal write_pointer_be_loa_reg_643 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln70_fu_322_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln70_reg_648 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln66_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal available_spaces_bk_s_reg_653 : STD_LOGIC_VECTOR (2 downto 0);
    signal write_pointer_bk_loa_reg_661 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln57_fu_346_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln57_reg_666 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln53_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vo_fu_362_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal vo_reg_674 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln95_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln96_fu_373_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln96_reg_684 : STD_LOGIC_VECTOR (8 downto 0);
    signal vi_fu_424_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal vi_reg_692 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln82_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln83_fu_435_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln83_reg_702 : STD_LOGIC_VECTOR (8 downto 0);
    signal be_fu_486_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal be_reg_710 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln69_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_fu_497_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln70_reg_720 : STD_LOGIC_VECTOR (8 downto 0);
    signal bk_fu_548_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal bk_reg_728 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln56_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_fu_559_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_reg_738 : STD_LOGIC_VECTOR (8 downto 0);
    signal vo_0_reg_151 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal vi_0_reg_162 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal be_0_reg_173 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal bk_0_reg_184 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_0_reg_195 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln96_1_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_3_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_1_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_3_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_1_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_3_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_1_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_2_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln63_fu_575_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln62_fu_564_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln76_fu_513_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln75_fu_502_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln89_fu_451_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln88_fu_440_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln102_fu_389_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln101_fu_378_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln92_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_1_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln96_fu_274_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln83_fu_298_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln70_fu_322_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln57_fu_346_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln95_fu_352_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln96_2_fu_400_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln96_1_fu_403_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln82_fu_414_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln83_2_fu_462_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln83_1_fu_465_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln69_fu_476_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln70_2_fu_524_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln70_1_fu_527_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln56_fu_538_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln57_fu_346_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln70_fu_322_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln83_fu_298_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln96_fu_274_p00 : STD_LOGIC_VECTOR (8 downto 0);

    component enqueue_dequeue_fbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    edca_queues_U : component enqueue_dequeue_fbkb
    generic map (
        DataWidth => 8,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edca_queues_address0,
        ce0 => edca_queues_ce0,
        we0 => edca_queues_we0,
        d0 => inout_frame_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_return_preg <= p_0_reg_195;
                end if; 
            end if;
        end if;
    end process;


    be_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_232_p2 = ap_const_lv1_1) and (icmp_ln66_fu_308_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                be_0_reg_173 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                be_0_reg_173 <= be_reg_710;
            end if; 
        end if;
    end process;

    bk_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_332_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                bk_0_reg_184 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                bk_0_reg_184 <= bk_reg_728;
            end if; 
        end if;
    end process;

    p_0_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln66_fu_308_p2 = ap_const_lv1_1) and (icmp_ln65_fu_232_p2 = ap_const_lv1_1) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln79_fu_284_p2 = ap_const_lv1_1) and (icmp_ln78_fu_238_p2 = ap_const_lv1_1) and (icmp_ln65_fu_232_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((or_ln92_fu_260_p2 = ap_const_lv1_1) and (icmp_ln78_fu_238_p2 = ap_const_lv1_0) and (icmp_ln65_fu_232_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln53_fu_332_p2 = ap_const_lv1_1) and (icmp_ln52_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                p_0_reg_195 <= ap_const_lv1_0;
            elsif ((((icmp_ln56_fu_542_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln69_fu_480_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln82_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln95_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                p_0_reg_195 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    vi_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_238_p2 = ap_const_lv1_1) and (icmp_ln79_fu_284_p2 = ap_const_lv1_0) and (icmp_ln65_fu_232_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                vi_0_reg_162 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                vi_0_reg_162 <= vi_reg_692;
            end if; 
        end if;
    end process;

    vo_0_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln92_fu_260_p2 = ap_const_lv1_0) and (icmp_ln78_fu_238_p2 = ap_const_lv1_0) and (icmp_ln65_fu_232_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                vo_0_reg_151 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vo_0_reg_151 <= vo_reg_674;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_542_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                add_ln57_reg_738 <= add_ln57_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln70_reg_720 <= add_ln70_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln83_reg_702 <= add_ln83_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_356_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln96_reg_684 <= add_ln96_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_480_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                available_spaces_be <= add_ln76_fu_513_p2;
                write_pointer_be <= add_ln75_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_232_p2 = ap_const_lv1_1) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                available_spaces_be_s_reg_635 <= available_spaces_be;
                write_pointer_be_loa_reg_643 <= write_pointer_be;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_542_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                available_spaces_bk <= add_ln63_fu_575_p2;
                write_pointer_bk <= add_ln62_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                available_spaces_bk_s_reg_653 <= available_spaces_bk;
                write_pointer_bk_loa_reg_661 <= write_pointer_bk;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                available_spaces_vi <= add_ln89_fu_451_p2;
                write_pointer_vi <= add_ln88_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_238_p2 = ap_const_lv1_1) and (icmp_ln65_fu_232_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                available_spaces_vi_s_reg_617 <= available_spaces_vi;
                write_pointer_vi_loa_reg_625 <= write_pointer_vi;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                available_spaces_vo <= add_ln102_fu_389_p2;
                write_pointer_vo <= add_ln101_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_238_p2 = ap_const_lv1_0) and (icmp_ln65_fu_232_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                available_spaces_vo_s_reg_599 <= available_spaces_vo;
                write_pointer_vo_loa_reg_607 <= write_pointer_vo;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                be_reg_710 <= be_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                bk_reg_728 <= bk_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_332_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    mul_ln57_reg_666(8 downto 2) <= mul_ln57_fu_346_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_232_p2 = ap_const_lv1_1) and (icmp_ln66_fu_308_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    mul_ln70_reg_648(8 downto 2) <= mul_ln70_fu_322_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_238_p2 = ap_const_lv1_1) and (icmp_ln79_fu_284_p2 = ap_const_lv1_0) and (icmp_ln65_fu_232_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    mul_ln83_reg_630(8 downto 2) <= mul_ln83_fu_298_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln92_fu_260_p2 = ap_const_lv1_0) and (icmp_ln78_fu_238_p2 = ap_const_lv1_0) and (icmp_ln65_fu_232_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    mul_ln96_reg_612(8 downto 2) <= mul_ln96_fu_274_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                vi_reg_692 <= vi_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                vo_reg_674 <= vo_fu_362_p2;
            end if;
        end if;
    end process;
    mul_ln96_reg_612(1 downto 0) <= "00";
    mul_ln83_reg_630(1 downto 0) <= "00";
    mul_ln70_reg_648(1 downto 0) <= "00";
    mul_ln57_reg_666(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln52_fu_226_p2, icmp_ln65_fu_232_p2, icmp_ln78_fu_238_p2, or_ln92_fu_260_p2, icmp_ln79_fu_284_p2, icmp_ln66_fu_308_p2, icmp_ln53_fu_332_p2, ap_CS_fsm_state2, icmp_ln95_fu_356_p2, ap_CS_fsm_state4, icmp_ln82_fu_418_p2, ap_CS_fsm_state6, icmp_ln69_fu_480_p2, ap_CS_fsm_state8, icmp_ln56_fu_542_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln53_fu_332_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((icmp_ln65_fu_232_p2 = ap_const_lv1_1) and (icmp_ln66_fu_308_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((icmp_ln78_fu_238_p2 = ap_const_lv1_1) and (icmp_ln79_fu_284_p2 = ap_const_lv1_0) and (icmp_ln65_fu_232_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((or_ln92_fu_260_p2 = ap_const_lv1_0) and (icmp_ln78_fu_238_p2 = ap_const_lv1_0) and (icmp_ln65_fu_232_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (((((icmp_ln66_fu_308_p2 = ap_const_lv1_1) and (icmp_ln65_fu_232_p2 = ap_const_lv1_1) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0)) or ((icmp_ln53_fu_332_p2 = ap_const_lv1_1) and (icmp_ln52_fu_226_p2 = ap_const_lv1_1))) or ((icmp_ln79_fu_284_p2 = ap_const_lv1_1) and (icmp_ln78_fu_238_p2 = ap_const_lv1_1) and (icmp_ln65_fu_232_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0))) or ((or_ln92_fu_260_p2 = ap_const_lv1_1) and (icmp_ln78_fu_238_p2 = ap_const_lv1_0) and (icmp_ln65_fu_232_p2 = ap_const_lv1_0) and (icmp_ln52_fu_226_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln95_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln82_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln69_fu_480_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln56_fu_542_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln101_fu_378_p2 <= std_logic_vector(unsigned(write_pointer_vo_loa_reg_607) + unsigned(ap_const_lv2_1));
    add_ln102_fu_389_p2 <= std_logic_vector(unsigned(available_spaces_vo_s_reg_599) + unsigned(ap_const_lv3_7));
    add_ln57_fu_559_p2 <= std_logic_vector(unsigned(zext_ln56_fu_538_p1) + unsigned(mul_ln57_reg_666));
    add_ln62_fu_564_p2 <= std_logic_vector(unsigned(write_pointer_bk_loa_reg_661) + unsigned(ap_const_lv2_1));
    add_ln63_fu_575_p2 <= std_logic_vector(unsigned(available_spaces_bk_s_reg_653) + unsigned(ap_const_lv3_7));
    add_ln70_1_fu_527_p2 <= std_logic_vector(unsigned(zext_ln70_2_fu_524_p1) + unsigned(ap_const_lv10_190));
    add_ln70_fu_497_p2 <= std_logic_vector(unsigned(mul_ln70_reg_648) + unsigned(zext_ln69_fu_476_p1));
    add_ln75_fu_502_p2 <= std_logic_vector(unsigned(write_pointer_be_loa_reg_643) + unsigned(ap_const_lv2_1));
    add_ln76_fu_513_p2 <= std_logic_vector(unsigned(available_spaces_be_s_reg_635) + unsigned(ap_const_lv3_7));
    add_ln83_1_fu_465_p2 <= std_logic_vector(unsigned(zext_ln83_2_fu_462_p1) + unsigned(ap_const_lv11_320));
    add_ln83_fu_435_p2 <= std_logic_vector(unsigned(mul_ln83_reg_630) + unsigned(zext_ln82_fu_414_p1));
    add_ln88_fu_440_p2 <= std_logic_vector(unsigned(write_pointer_vi_loa_reg_625) + unsigned(ap_const_lv2_1));
    add_ln89_fu_451_p2 <= std_logic_vector(unsigned(available_spaces_vi_s_reg_617) + unsigned(ap_const_lv3_7));
    add_ln96_1_fu_403_p2 <= std_logic_vector(unsigned(zext_ln96_2_fu_400_p1) + unsigned(ap_const_lv11_4B0));
    add_ln96_fu_373_p2 <= std_logic_vector(unsigned(mul_ln96_reg_612) + unsigned(zext_ln95_fu_352_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(p_0_reg_195, ap_return_preg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_return <= p_0_reg_195;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    be_fu_486_p2 <= std_logic_vector(unsigned(be_0_reg_173) + unsigned(ap_const_lv7_1));
    bk_fu_548_p2 <= std_logic_vector(unsigned(bk_0_reg_184) + unsigned(ap_const_lv7_1));

    edca_queues_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, zext_ln96_3_fu_409_p1, zext_ln83_3_fu_471_p1, zext_ln70_3_fu_533_p1, zext_ln57_2_fu_586_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            edca_queues_address0 <= zext_ln57_2_fu_586_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            edca_queues_address0 <= zext_ln70_3_fu_533_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            edca_queues_address0 <= zext_ln83_3_fu_471_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            edca_queues_address0 <= zext_ln96_3_fu_409_p1(11 - 1 downto 0);
        else 
            edca_queues_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    edca_queues_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            edca_queues_ce0 <= ap_const_logic_1;
        else 
            edca_queues_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edca_queues_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            edca_queues_we0 <= ap_const_logic_1;
        else 
            edca_queues_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln52_fu_226_p2 <= "1" when (ac = ap_const_lv2_0) else "0";
    icmp_ln53_fu_332_p2 <= "1" when (available_spaces_bk = ap_const_lv3_0) else "0";
    icmp_ln56_fu_542_p2 <= "1" when (bk_0_reg_184 = ap_const_lv7_64) else "0";
    icmp_ln65_fu_232_p2 <= "1" when (ac = ap_const_lv2_1) else "0";
    icmp_ln66_fu_308_p2 <= "1" when (available_spaces_be = ap_const_lv3_0) else "0";
    icmp_ln69_fu_480_p2 <= "1" when (be_0_reg_173 = ap_const_lv7_64) else "0";
    icmp_ln78_fu_238_p2 <= "1" when (ac = ap_const_lv2_2) else "0";
    icmp_ln79_fu_284_p2 <= "1" when (available_spaces_vi = ap_const_lv3_0) else "0";
    icmp_ln82_fu_418_p2 <= "1" when (vi_0_reg_162 = ap_const_lv7_64) else "0";
    icmp_ln92_1_fu_254_p2 <= "1" when (available_spaces_vo = ap_const_lv3_0) else "0";
    icmp_ln92_fu_244_p2 <= "0" when (ac = ap_const_lv2_3) else "1";
    icmp_ln95_fu_356_p2 <= "1" when (vo_0_reg_151 = ap_const_lv7_64) else "0";

    inout_frame_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, zext_ln96_1_fu_368_p1, zext_ln83_1_fu_430_p1, zext_ln70_1_fu_492_p1, zext_ln57_1_fu_554_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inout_frame_address0 <= zext_ln57_1_fu_554_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inout_frame_address0 <= zext_ln70_1_fu_492_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inout_frame_address0 <= zext_ln83_1_fu_430_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inout_frame_address0 <= zext_ln96_1_fu_368_p1(7 - 1 downto 0);
        else 
            inout_frame_address0 <= "XXXXXXX";
        end if; 
    end process;


    inout_frame_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inout_frame_ce0 <= ap_const_logic_1;
        else 
            inout_frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln57_fu_346_p0 <= mul_ln57_fu_346_p00(2 - 1 downto 0);
    mul_ln57_fu_346_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(write_pointer_bk),9));
    mul_ln57_fu_346_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln57_fu_346_p0) * unsigned(ap_const_lv9_64), 9));
    mul_ln70_fu_322_p0 <= mul_ln70_fu_322_p00(2 - 1 downto 0);
    mul_ln70_fu_322_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(write_pointer_be),9));
    mul_ln70_fu_322_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln70_fu_322_p0) * unsigned(ap_const_lv9_64), 9));
    mul_ln83_fu_298_p0 <= mul_ln83_fu_298_p00(2 - 1 downto 0);
    mul_ln83_fu_298_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(write_pointer_vi),9));
    mul_ln83_fu_298_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln83_fu_298_p0) * unsigned(ap_const_lv9_64), 9));
    mul_ln96_fu_274_p0 <= mul_ln96_fu_274_p00(2 - 1 downto 0);
    mul_ln96_fu_274_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(write_pointer_vo),9));
    mul_ln96_fu_274_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln96_fu_274_p0) * unsigned(ap_const_lv9_64), 9));
    or_ln92_fu_260_p2 <= (icmp_ln92_fu_244_p2 or icmp_ln92_1_fu_254_p2);
    vi_fu_424_p2 <= std_logic_vector(unsigned(vi_0_reg_162) + unsigned(ap_const_lv7_1));
    vo_fu_362_p2 <= std_logic_vector(unsigned(vo_0_reg_151) + unsigned(ap_const_lv7_1));
    zext_ln56_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bk_0_reg_184),9));
    zext_ln57_1_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bk_0_reg_184),64));
    zext_ln57_2_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_reg_738),64));
    zext_ln69_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(be_0_reg_173),9));
    zext_ln70_1_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(be_0_reg_173),64));
    zext_ln70_2_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_reg_720),10));
    zext_ln70_3_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_1_fu_527_p2),64));
    zext_ln82_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vi_0_reg_162),9));
    zext_ln83_1_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vi_0_reg_162),64));
    zext_ln83_2_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_reg_702),11));
    zext_ln83_3_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_1_fu_465_p2),64));
    zext_ln95_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vo_0_reg_151),9));
    zext_ln96_1_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vo_0_reg_151),64));
    zext_ln96_2_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln96_reg_684),11));
    zext_ln96_3_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln96_1_fu_403_p2),64));
end behav;
