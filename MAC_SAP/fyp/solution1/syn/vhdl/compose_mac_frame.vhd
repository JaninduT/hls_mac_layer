-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compose_mac_frame is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    source_addr_mac_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    source_addr_mac_ce0 : OUT STD_LOGIC;
    source_addr_mac_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    source_addr_mac_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    source_addr_mac_ce1 : OUT STD_LOGIC;
    source_addr_mac_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    seqnumber : IN STD_LOGIC_VECTOR (11 downto 0);
    up : IN STD_LOGIC_VECTOR (3 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    mac_frame_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    mac_frame_ce0 : OUT STD_LOGIC;
    mac_frame_we0 : OUT STD_LOGIC;
    mac_frame_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mac_frame_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    mac_frame_ce1 : OUT STD_LOGIC;
    mac_frame_we1 : OUT STD_LOGIC;
    mac_frame_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mac_frame_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of compose_mac_frame is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_1A : STD_LOGIC_VECTOR (6 downto 0) := "0011010";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4C11DB7 : STD_LOGIC_VECTOR (31 downto 0) := "00000100110000010001110110110111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_fu_602_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_806 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln66_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_635_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_827 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln8_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal crc_1_fu_646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal crc_1_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_677_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal k_fu_726_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal j_0_reg_505 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_0_i_reg_517 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln11_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_i_reg_528 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal k_0_reg_539 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln73_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln67_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_1_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal crc_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal remainder_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal remainder_3_fu_703_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal seq_num_h_fu_568_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal seq_num_l_fu_553_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_fu_591_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln74_1_fu_753_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_558_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln50_fu_573_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal qos_h_fu_577_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal qos_h_1_fu_585_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln67_fu_618_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_652_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal remainder_1_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_683_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal remainder_2_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln74_fu_732_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln1_fu_736_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln74_1_fu_744_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln74_fu_748_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln73_fu_716_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln74_fu_758_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln74_fu_764_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    crc_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln11_fu_671_p2 = ap_const_lv1_0))) then 
                crc_fu_138 <= remainder_3_fu_703_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                crc_fu_138 <= remainder_fu_660_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln66_fu_596_p2 = ap_const_lv1_1))) then 
                crc_fu_138 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    i_0_i_reg_517_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln66_fu_596_p2 = ap_const_lv1_1))) then 
                i_0_i_reg_517 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln11_fu_671_p2 = ap_const_lv1_1))) then 
                i_0_i_reg_517 <= i_reg_827;
            end if; 
        end if;
    end process;

    j_0_i_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln11_fu_671_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_528 <= j_1_fu_677_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_0_i_reg_528 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_505_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_0_reg_505 <= j_reg_806;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_0_reg_505 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_0_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln73_fu_720_p2 = ap_const_lv1_0))) then 
                k_0_reg_539 <= k_fu_726_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln8_fu_629_p2 = ap_const_lv1_1))) then 
                k_0_reg_539 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln8_fu_629_p2 = ap_const_lv1_1))) then
                crc_1_reg_837 <= crc_1_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_reg_827 <= i_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                j_reg_806 <= j_fu_602_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state14, icmp_ln66_fu_596_p2, ap_CS_fsm_state16, icmp_ln8_fu_629_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, icmp_ln11_fu_671_p2, icmp_ln73_fu_720_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln66_fu_596_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln8_fu_629_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln11_fu_671_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln73_fu_720_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln67_fu_618_p2 <= std_logic_vector(unsigned(j_0_reg_505) + unsigned(ap_const_lv7_1A));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19, icmp_ln73_fu_720_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln73_fu_720_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, icmp_ln73_fu_720_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln73_fu_720_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    crc_1_fu_646_p2 <= (crc_fu_138 xor ap_const_lv32_FFFFFFFF);
    data_address0 <= zext_ln67_fu_608_p1(7 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_635_p2 <= std_logic_vector(unsigned(i_0_i_reg_517) + unsigned(ap_const_lv7_1));
    icmp_ln11_fu_671_p2 <= "1" when (j_0_i_reg_528 = ap_const_lv4_8) else "0";
    icmp_ln66_fu_596_p2 <= "1" when (j_0_reg_505 = ap_const_lv7_46) else "0";
    icmp_ln73_fu_720_p2 <= "1" when (k_0_reg_539 = ap_const_lv3_4) else "0";
    icmp_ln8_fu_629_p2 <= "1" when (i_0_i_reg_517 = ap_const_lv7_60) else "0";
    j_1_fu_677_p2 <= std_logic_vector(unsigned(j_0_i_reg_528) + unsigned(ap_const_lv4_1));
    j_fu_602_p2 <= std_logic_vector(unsigned(j_0_reg_505) + unsigned(ap_const_lv7_1));
    k_fu_726_p2 <= std_logic_vector(unsigned(k_0_reg_539) + unsigned(ap_const_lv3_1));
    lshr_ln74_fu_748_p2 <= std_logic_vector(shift_right(unsigned(crc_1_reg_837),to_integer(unsigned('0' & zext_ln74_1_fu_744_p1(31-1 downto 0)))));

    mac_frame_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln67_1_fu_624_p1, zext_ln74_fu_768_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            mac_frame_address0 <= zext_ln74_fu_768_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            mac_frame_address0 <= zext_ln67_1_fu_624_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mac_frame_address0 <= ap_const_lv64_E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mac_frame_address0 <= ap_const_lv64_C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mac_frame_address0 <= ap_const_lv64_A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mac_frame_address0 <= ap_const_lv64_18(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mac_frame_address0 <= ap_const_lv64_16(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mac_frame_address0 <= ap_const_lv64_14(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mac_frame_address0 <= ap_const_lv64_12(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mac_frame_address0 <= ap_const_lv64_10(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mac_frame_address0 <= ap_const_lv64_8(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mac_frame_address0 <= ap_const_lv64_6(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mac_frame_address0 <= ap_const_lv64_4(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mac_frame_address0 <= ap_const_lv64_2(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            mac_frame_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            mac_frame_address0 <= "XXXXXXX";
        end if; 
    end process;


    mac_frame_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state13, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln9_fu_641_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            mac_frame_address1 <= zext_ln9_fu_641_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mac_frame_address1 <= ap_const_lv64_F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mac_frame_address1 <= ap_const_lv64_D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mac_frame_address1 <= ap_const_lv64_B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mac_frame_address1 <= ap_const_lv64_19(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mac_frame_address1 <= ap_const_lv64_17(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mac_frame_address1 <= ap_const_lv64_15(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mac_frame_address1 <= ap_const_lv64_13(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mac_frame_address1 <= ap_const_lv64_11(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mac_frame_address1 <= ap_const_lv64_9(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mac_frame_address1 <= ap_const_lv64_7(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mac_frame_address1 <= ap_const_lv64_5(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mac_frame_address1 <= ap_const_lv64_3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            mac_frame_address1 <= ap_const_lv64_1(7 - 1 downto 0);
        else 
            mac_frame_address1 <= "XXXXXXX";
        end if; 
    end process;


    mac_frame_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            mac_frame_ce0 <= ap_const_logic_1;
        else 
            mac_frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mac_frame_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state13, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            mac_frame_ce1 <= ap_const_logic_1;
        else 
            mac_frame_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mac_frame_d0_assign_proc : process(ap_CS_fsm_state1, source_addr_mac_q0, data_q0, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, seq_num_h_fu_568_p1, zext_ln51_fu_591_p1, trunc_ln74_1_fu_753_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            mac_frame_d0 <= trunc_ln74_1_fu_753_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            mac_frame_d0 <= data_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            mac_frame_d0 <= source_addr_mac_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mac_frame_d0 <= zext_ln51_fu_591_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mac_frame_d0 <= seq_num_h_fu_568_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            mac_frame_d0 <= ap_const_lv8_FF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mac_frame_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            mac_frame_d0 <= ap_const_lv8_11;
        else 
            mac_frame_d0 <= "XXXXXXXX";
        end if; 
    end process;


    mac_frame_d1_assign_proc : process(ap_CS_fsm_state1, source_addr_mac_q1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, seq_num_l_fu_553_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            mac_frame_d1 <= source_addr_mac_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mac_frame_d1 <= seq_num_l_fu_553_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            mac_frame_d1 <= ap_const_lv8_FF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mac_frame_d1 <= ap_const_lv8_0;
        else 
            mac_frame_d1 <= "XXXXXXXX";
        end if; 
    end process;


    mac_frame_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state13, ap_CS_fsm_state15, icmp_ln73_fu_720_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln73_fu_720_p2 = ap_const_lv1_0)))) then 
            mac_frame_we0 <= ap_const_logic_1;
        else 
            mac_frame_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mac_frame_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            mac_frame_we1 <= ap_const_logic_1;
        else 
            mac_frame_we1 <= ap_const_logic_0;
        end if; 
    end process;

    qos_h_1_fu_585_p2 <= (qos_h_fu_577_p3 or ap_const_lv7_4);
    qos_h_fu_577_p3 <= (trunc_ln50_fu_573_p1 & ap_const_lv4_0);
    remainder_1_fu_691_p2 <= std_logic_vector(shift_left(unsigned(crc_fu_138),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    remainder_2_fu_697_p2 <= (remainder_1_fu_691_p2 xor ap_const_lv32_4C11DB7);
    remainder_3_fu_703_p3 <= 
        remainder_2_fu_697_p2 when (tmp_10_fu_683_p3(0) = '1') else 
        remainder_1_fu_691_p2;
    remainder_fu_660_p2 <= (shl_ln_fu_652_p3 xor crc_fu_138);
    seq_num_h_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_558_p4),8));
    seq_num_l_fu_553_p1 <= seqnumber(8 - 1 downto 0);
        sext_ln74_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln74_fu_758_p2),7));

    shl_ln1_fu_736_p3 <= (trunc_ln74_fu_732_p1 & ap_const_lv3_0);
    shl_ln_fu_652_p3 <= (mac_frame_q1 & ap_const_lv24_0);

    source_addr_mac_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            source_addr_mac_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            source_addr_mac_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            source_addr_mac_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            source_addr_mac_address0 <= "XXX";
        end if; 
    end process;


    source_addr_mac_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            source_addr_mac_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            source_addr_mac_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            source_addr_mac_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            source_addr_mac_address1 <= "XXX";
        end if; 
    end process;


    source_addr_mac_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            source_addr_mac_ce0 <= ap_const_logic_1;
        else 
            source_addr_mac_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    source_addr_mac_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            source_addr_mac_ce1 <= ap_const_logic_1;
        else 
            source_addr_mac_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln74_fu_758_p2 <= std_logic_vector(signed(ap_const_lv6_23) - signed(zext_ln73_fu_716_p1));
    tmp_10_fu_683_p3 <= crc_fu_138(31 downto 31);
    tmp_fu_558_p4 <= seqnumber(11 downto 8);
    trunc_ln50_fu_573_p1 <= up(3 - 1 downto 0);
    trunc_ln74_1_fu_753_p1 <= lshr_ln74_fu_748_p2(8 - 1 downto 0);
    trunc_ln74_fu_732_p1 <= k_0_reg_539(2 - 1 downto 0);
    zext_ln51_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qos_h_1_fu_585_p2),8));
    zext_ln67_1_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_fu_618_p2),64));
    zext_ln67_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_505),64));
    zext_ln73_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_539),6));
    zext_ln74_1_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_736_p3),32));
    zext_ln74_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln74_fu_764_p1),64));
    zext_ln9_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_517),64));
end behav;
