-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backoff_vi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    current_txop_holder_i : IN STD_LOGIC_VECTOR (2 downto 0);
    current_txop_holder_o : OUT STD_LOGIC_VECTOR (2 downto 0);
    current_txop_holder_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of backoff_vi is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "backoff_vi,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.485250,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1143,HLS_SYN_LUT=1607,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_30000000 : STD_LOGIC_VECTOR (31 downto 0) := "00110000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_BC8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011110010001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_F : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal vi_backoff_counter : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal CW_vi : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";
    signal rand_state : STD_LOGIC_VECTOR (31 downto 0) := "00000111010110111100110100010101";
    signal icmp_ln219_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln219_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_reg_416 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln284_fu_165_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln283_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal low_1_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal low_1_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal high_2_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal high_2_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_443 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_2_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_2_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_i_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_1_fu_296_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_473 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln339_fu_304_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_reg_478 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1311_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1311_reg_489 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_100 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln228_fu_131_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln1312_fu_392_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_110_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_110_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_118_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln284_fu_159_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal low_fu_181_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal low_1_fu_189_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal high_fu_195_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln9_fu_218_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10_fu_225_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln10_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln10_1_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln11_fu_245_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln12_1_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_286_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_300_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_V_fu_324_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1311_fu_337_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_340_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_350_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_333_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1287_fu_354_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_358_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_fu_370_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_364_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln662_fu_378_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_382_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal high_2_fu_405_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal high_2_fu_405_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal high_2_fu_405_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal low_1_fu_189_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_60 : BOOLEAN;

    component backoff_vi_fmul_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backoff_vi_uitofpcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backoff_vi_sitofpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backoff_vi_mul_mueOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    backoff_vi_fmul_3bkb_U1 : component backoff_vi_fmul_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_110_p0,
        din1 => grp_fu_110_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_110_p2);

    backoff_vi_uitofpcud_U2 : component backoff_vi_uitofpcud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_2_reg_448,
        ce => ap_const_logic_1,
        dout => grp_fu_115_p1);

    backoff_vi_sitofpdEe_U3 : component backoff_vi_sitofpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_118_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_118_p1);

    backoff_vi_mul_mueOg_U4 : component backoff_vi_mul_mueOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        din0 => high_2_fu_405_p0,
        din1 => high_2_fu_405_p1,
        dout => high_2_fu_405_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    empty_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_60)) then
                if ((icmp_ln283_fu_153_p2 = ap_const_lv1_1)) then 
                                        empty_reg_100(9 downto 4) <= CW_vi(9 downto 4);
                elsif ((icmp_ln283_fu_153_p2 = ap_const_lv1_0)) then 
                                        empty_reg_100(9 downto 4) <= or_ln284_fu_165_p2(9 downto 4);
                end if;
            end if; 
        end if;
    end process;

    vi_backoff_counter_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln220_reg_416 = ap_const_lv1_0) and (icmp_ln219_reg_412 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                vi_backoff_counter <= select_ln1312_fu_392_p3;
            elsif (((icmp_ln219_fu_125_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                vi_backoff_counter <= add_ln228_fu_131_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln283_fu_153_p2 = ap_const_lv1_0) and (icmp_ln220_fu_143_p2 = ap_const_lv1_0) and (icmp_ln219_fu_125_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    CW_vi(9 downto 4) <= or_ln284_fu_165_p2(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln339_reg_478 <= add_ln339_fu_304_p2;
                isNeg_reg_483 <= add_ln339_fu_304_p2(8 downto 8);
                sub_ln1311_reg_489 <= sub_ln1311_fu_318_p2;
                tmp_V_1_reg_473 <= tmp_V_1_fu_296_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln220_fu_143_p2 = ap_const_lv1_0) and (icmp_ln219_fu_125_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                high_2_reg_438 <= high_2_fu_405_p2;
                low_1_reg_433 <= low_1_fu_189_p2;
                trunc_ln_reg_443 <= high_2_fu_405_p2(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln219_reg_412 <= icmp_ln219_fu_125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln219_fu_125_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln220_reg_416 <= icmp_ln220_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                rand_state <= x_2_fu_265_p2;
                x_2_reg_448 <= x_2_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_4_i_i_reg_468 <= grp_fu_110_p2;
                tmp_i_reg_463 <= grp_fu_118_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_i_i_reg_458 <= grp_fu_115_p1;
            end if;
        end if;
    end process;
    CW_vi(3 downto 0) <= "1111";
    empty_reg_100(3 downto 0) <= "1111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln219_fu_125_p2, icmp_ln220_fu_143_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln220_fu_143_p2 = ap_const_lv1_0) and (icmp_ln219_fu_125_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and ((icmp_ln220_fu_143_p2 = ap_const_lv1_1) or (icmp_ln219_fu_125_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln10_fu_225_p2 <= std_logic_vector(unsigned(ap_const_lv16_F) + unsigned(trunc_ln_reg_443));
    add_ln228_fu_131_p2 <= std_logic_vector(unsigned(vi_backoff_counter) + unsigned(ap_const_lv10_3FF));
    add_ln339_fu_304_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_300_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_condition_60_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln219_fu_125_p2, icmp_ln220_fu_143_p2)
    begin
                ap_condition_60 <= ((icmp_ln220_fu_143_p2 = ap_const_lv1_0) and (icmp_ln219_fu_125_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    current_txop_holder_o_assign_proc : process(ap_start, ap_CS_fsm_state1, current_txop_holder_i, icmp_ln219_fu_125_p2, icmp_ln220_fu_143_p2)
    begin
        if (((icmp_ln220_fu_143_p2 = ap_const_lv1_1) and (icmp_ln219_fu_125_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            current_txop_holder_o <= ap_const_lv3_3;
        else 
            current_txop_holder_o <= current_txop_holder_i;
        end if; 
    end process;


    current_txop_holder_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln219_fu_125_p2, icmp_ln220_fu_143_p2)
    begin
        if (((icmp_ln220_fu_143_p2 = ap_const_lv1_1) and (icmp_ln219_fu_125_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            current_txop_holder_o_ap_vld <= ap_const_logic_1;
        else 
            current_txop_holder_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_110_p0_assign_proc : process(tmp_i_i_reg_458, tmp_i_reg_463, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_110_p0 <= tmp_i_reg_463;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_110_p0 <= tmp_i_i_reg_458;
        else 
            grp_fu_110_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_110_p1_assign_proc : process(tmp_4_i_i_reg_468, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_110_p1 <= tmp_4_i_i_reg_468;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_110_p1 <= ap_const_lv32_30000000;
        else 
            grp_fu_110_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_118_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_100),32));
    high_2_fu_405_p0 <= ap_const_lv32_BC8F(17 - 1 downto 0);
    high_2_fu_405_p1 <= high_2_fu_405_p10(17 - 1 downto 0);
    high_2_fu_405_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(high_fu_195_p4),32));
    high_fu_195_p4 <= rand_state(31 downto 15);
    icmp_ln219_fu_125_p2 <= "1" when (vi_backoff_counter = ap_const_lv10_0) else "0";
    icmp_ln220_fu_143_p2 <= "1" when (unsigned(current_txop_holder_i) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln283_fu_153_p2 <= "1" when (CW_vi = ap_const_lv10_3FF) else "0";
    low_1_fu_189_p0 <= low_1_fu_189_p00(15 - 1 downto 0);
    low_1_fu_189_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low_fu_181_p1),32));
    low_1_fu_189_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low_1_fu_189_p0) * unsigned(ap_const_lv32_BC8F), 32));
    low_fu_181_p1 <= rand_state(15 - 1 downto 0);
    mantissa_V_fu_324_p4 <= ((ap_const_lv1_1 & tmp_V_1_reg_473) & ap_const_lv1_0);
    or_ln284_fu_165_p2 <= (shl_ln284_fu_159_p2 or ap_const_lv10_1);
    p_Val2_s_fu_282_p1 <= grp_fu_110_p2;
    r_V_1_fu_364_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_333_p1),to_integer(unsigned('0' & zext_ln1287_fu_354_p1(31-1 downto 0)))));
    r_V_fu_358_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_324_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_350_p1(25-1 downto 0)))));
    select_ln1312_fu_392_p3 <= 
        zext_ln662_fu_378_p1 when (isNeg_reg_483(0) = '1') else 
        tmp_2_fu_382_p4;
        sext_ln1311_1_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_340_p3),32));

        sext_ln1311_2_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_340_p3),25));

        sext_ln1311_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_reg_489),9));

    shl_ln284_fu_159_p2 <= std_logic_vector(shift_left(unsigned(CW_vi),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    sub_ln1311_fu_318_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_286_p4));
    tmp_2_fu_382_p4 <= r_V_1_fu_364_p2(33 downto 24);
    tmp_3_fu_370_p3 <= r_V_fu_358_p2(24 downto 24);
    tmp_V_1_fu_296_p1 <= p_Val2_s_fu_282_p1(23 - 1 downto 0);
    tmp_V_fu_286_p4 <= p_Val2_s_fu_282_p1(30 downto 23);
    tmp_fu_253_p3 <= x_1_fu_240_p2(31 downto 31);
    trunc_ln11_fu_245_p1 <= x_1_fu_240_p2(31 - 1 downto 0);
    trunc_ln9_fu_218_p1 <= high_2_reg_438(16 - 1 downto 0);
    ush_fu_340_p3 <= 
        sext_ln1311_fu_337_p1 when (isNeg_reg_483(0) = '1') else 
        add_ln339_reg_478;
    x_1_fu_240_p2 <= std_logic_vector(unsigned(x_fu_234_p2) + unsigned(low_1_reg_433));
    x_2_fu_265_p2 <= std_logic_vector(unsigned(zext_ln12_fu_249_p1) + unsigned(zext_ln12_1_fu_261_p1));
    x_fu_234_p2 <= std_logic_vector(shift_left(unsigned(zext_ln10_fu_221_p1),to_integer(unsigned('0' & zext_ln10_1_fu_230_p1(31-1 downto 0)))));
    zext_ln10_1_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln10_fu_225_p2),32));
    zext_ln10_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln9_fu_218_p1),32));
    zext_ln1287_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_346_p1),63));
    zext_ln12_1_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_253_p3),32));
    zext_ln12_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln11_fu_245_p1),32));
    zext_ln339_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_286_p4),9));
    zext_ln662_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_370_p3),10));
    zext_ln682_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_324_p4),63));
end behav;
