-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity slot_boundary_timing is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    timing_mode : IN STD_LOGIC_VECTOR (1 downto 0);
    idle_waiting : OUT STD_LOGIC_VECTOR (0 downto 0);
    idle_waiting_ap_vld : OUT STD_LOGIC;
    medium_state : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of slot_boundary_timing is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "slot_boundary_timing,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.971750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=57,HLS_SYN_LUT=274,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln137_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_102 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_reg_106 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_reg_110 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_start_timer_fu_67_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_start_timer_fu_67_ap_ready : STD_LOGIC;
    signal grp_start_timer_fu_67_ap_done : STD_LOGIC;
    signal sifs_timeout_1_reg_122 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sifs_timeout_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_start_timer_fu_67_ap_start : STD_LOGIC;
    signal grp_start_timer_fu_67_ap_idle : STD_LOGIC;
    signal grp_start_timer_fu_67_count_idle : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14 : STD_LOGIC_VECTOR (0 downto 0);
    signal idle_waiting_new_0_reg_43 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_predicate_op31_call_state5 : BOOLEAN;
    signal ap_predicate_op33_call_state5 : BOOLEAN;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal grp_start_timer_fu_67_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component start_timer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        count_idle : IN STD_LOGIC_VECTOR (0 downto 0);
        medium_state : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_start_timer_fu_67 : component start_timer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_start_timer_fu_67_ap_start,
        ap_done => grp_start_timer_fu_67_ap_done,
        ap_idle => grp_start_timer_fu_67_ap_idle,
        ap_ready => grp_start_timer_fu_67_ap_ready,
        count_idle => grp_start_timer_fu_67_count_idle,
        medium_state => medium_state,
        ap_return => grp_start_timer_fu_67_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_start_timer_fu_67_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_start_timer_fu_67_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln179_fu_96_p2 = ap_const_lv1_1) and (icmp_ln163_fu_90_p2 = ap_const_lv1_0) and (icmp_ln153_fu_84_p2 = ap_const_lv1_0) and (icmp_ln137_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln163_fu_90_p2 = ap_const_lv1_1) and (icmp_ln153_fu_84_p2 = ap_const_lv1_0) and (icmp_ln137_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln153_fu_84_p2 = ap_const_lv1_1) and (icmp_ln137_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln137_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_start_timer_fu_67_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_start_timer_fu_67_ap_ready = ap_const_logic_1)) then 
                    grp_start_timer_fu_67_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    idle_waiting_new_0_reg_43_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_start_timer_fu_67_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((grp_start_timer_fu_67_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((sifs_timeout_reg_131 = ap_const_lv1_1) and (icmp_ln137_reg_102 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done)) or ((sifs_timeout_1_reg_122 = ap_const_lv1_1) and (icmp_ln163_reg_110 = ap_const_lv1_1) and (icmp_ln153_reg_106 = ap_const_lv1_0) and (icmp_ln137_reg_102 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done)))) then 
                idle_waiting_new_0_reg_43 <= grp_start_timer_fu_67_ap_return;
            elsif ((((grp_start_timer_fu_67_ap_done = ap_const_logic_1) and (grp_start_timer_fu_67_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((grp_start_timer_fu_67_ap_done = ap_const_logic_1) and (grp_start_timer_fu_67_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln179_fu_96_p2 = ap_const_lv1_0) and (icmp_ln163_fu_90_p2 = ap_const_lv1_0) and (icmp_ln153_fu_84_p2 = ap_const_lv1_0) and (icmp_ln137_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                idle_waiting_new_0_reg_43 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp_ln137_reg_102 <= icmp_ln137_fu_78_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp_ln153_reg_106 <= icmp_ln153_fu_84_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_fu_84_p2 = ap_const_lv1_0) and (icmp_ln137_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp_ln163_reg_110 <= icmp_ln163_fu_90_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_start_timer_fu_67_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sifs_timeout_1_reg_122 <= grp_start_timer_fu_67_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_start_timer_fu_67_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                sifs_timeout_reg_131 <= grp_start_timer_fu_67_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln137_fu_78_p2, icmp_ln153_fu_84_p2, icmp_ln163_fu_90_p2, grp_start_timer_fu_67_ap_return, ap_CS_fsm_state2, grp_start_timer_fu_67_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln179_fu_96_p2, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln179_fu_96_p2 = ap_const_lv1_0) and (icmp_ln163_fu_90_p2 = ap_const_lv1_0) and (icmp_ln153_fu_84_p2 = ap_const_lv1_0) and (icmp_ln137_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((icmp_ln179_fu_96_p2 = ap_const_lv1_1) and (icmp_ln163_fu_90_p2 = ap_const_lv1_0) and (icmp_ln153_fu_84_p2 = ap_const_lv1_0) and (icmp_ln137_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln163_fu_90_p2 = ap_const_lv1_1) and (icmp_ln153_fu_84_p2 = ap_const_lv1_0) and (icmp_ln137_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((icmp_ln153_fu_84_p2 = ap_const_lv1_1) and (icmp_ln137_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((icmp_ln137_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_start_timer_fu_67_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_start_timer_fu_67_ap_done = ap_const_logic_1) and (grp_start_timer_fu_67_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((grp_start_timer_fu_67_ap_done = ap_const_logic_1) and (grp_start_timer_fu_67_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_start_timer_fu_67_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((grp_start_timer_fu_67_ap_done = ap_const_logic_1) and (grp_start_timer_fu_67_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((grp_start_timer_fu_67_ap_done = ap_const_logic_1) and (grp_start_timer_fu_67_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state5_on_subcall_done_assign_proc : process(grp_start_timer_fu_67_ap_done, ap_predicate_op31_call_state5, ap_predicate_op33_call_state5)
    begin
                ap_block_state5_on_subcall_done <= (((grp_start_timer_fu_67_ap_done = ap_const_logic_0) and (ap_predicate_op33_call_state5 = ap_const_boolean_1)) or ((grp_start_timer_fu_67_ap_done = ap_const_logic_0) and (ap_predicate_op31_call_state5 = ap_const_boolean_1)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14_assign_proc : process(icmp_ln137_reg_102, icmp_ln153_reg_106, icmp_ln163_reg_110, grp_start_timer_fu_67_ap_return, sifs_timeout_1_reg_122, sifs_timeout_reg_131, idle_waiting_new_0_reg_43, ap_CS_fsm_state5)
    begin
        if ((((sifs_timeout_reg_131 = ap_const_lv1_1) and (icmp_ln137_reg_102 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((sifs_timeout_1_reg_122 = ap_const_lv1_1) and (icmp_ln163_reg_110 = ap_const_lv1_1) and (icmp_ln153_reg_106 = ap_const_lv1_0) and (icmp_ln137_reg_102 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14 <= grp_start_timer_fu_67_ap_return;
        else 
            ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14 <= idle_waiting_new_0_reg_43;
        end if; 
    end process;


    ap_predicate_op31_call_state5_assign_proc : process(icmp_ln137_reg_102, icmp_ln153_reg_106, icmp_ln163_reg_110, sifs_timeout_1_reg_122)
    begin
                ap_predicate_op31_call_state5 <= ((sifs_timeout_1_reg_122 = ap_const_lv1_1) and (icmp_ln163_reg_110 = ap_const_lv1_1) and (icmp_ln153_reg_106 = ap_const_lv1_0) and (icmp_ln137_reg_102 = ap_const_lv1_0));
    end process;


    ap_predicate_op33_call_state5_assign_proc : process(icmp_ln137_reg_102, sifs_timeout_reg_131)
    begin
                ap_predicate_op33_call_state5 <= ((sifs_timeout_reg_131 = ap_const_lv1_1) and (icmp_ln137_reg_102 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_start_timer_fu_67_ap_start <= grp_start_timer_fu_67_ap_start_reg;

    grp_start_timer_fu_67_count_idle_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_predicate_op31_call_state5, ap_predicate_op33_call_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_start_timer_fu_67_count_idle <= ap_const_lv1_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_predicate_op33_call_state5 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_predicate_op31_call_state5 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            grp_start_timer_fu_67_count_idle <= ap_const_lv1_1;
        else 
            grp_start_timer_fu_67_count_idle <= "X";
        end if; 
    end process;

    icmp_ln137_fu_78_p2 <= "1" when (timing_mode = ap_const_lv2_0) else "0";
    icmp_ln153_fu_84_p2 <= "1" when (timing_mode = ap_const_lv2_1) else "0";
    icmp_ln163_fu_90_p2 <= "1" when (timing_mode = ap_const_lv2_2) else "0";
    icmp_ln179_fu_96_p2 <= "1" when (timing_mode = ap_const_lv2_3) else "0";
    idle_waiting <= ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14;

    idle_waiting_ap_vld_assign_proc : process(ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
            idle_waiting_ap_vld <= ap_const_logic_1;
        else 
            idle_waiting_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
