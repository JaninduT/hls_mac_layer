// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="start_backoff_vo,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.485250,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=120,HLS_SYN_LUT=255,HLS_VERSION=2019_2}" *)

module start_backoff_vo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        invoke_reason
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] invoke_reason;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] CW_vo;
reg   [31:0] rand_state;
wire   [31:0] low_1_fu_96_p2;
reg   [31:0] low_1_reg_197;
wire   [31:0] high_2_fu_184_p2;
reg   [31:0] high_2_reg_202;
reg   [15:0] trunc_ln_reg_207;
wire   [0:0] invoke_reason_read_read_fu_44_p2;
wire   [9:0] or_ln273_fu_72_p2;
wire   [0:0] icmp_ln272_fu_60_p2;
wire   [31:0] x_2_fu_172_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] shl_ln273_fu_66_p2;
wire   [14:0] low_fu_88_p1;
wire   [14:0] low_1_fu_96_p0;
wire   [16:0] high_fu_102_p4;
wire   [15:0] trunc_ln9_fu_125_p1;
wire   [15:0] add_ln10_fu_132_p2;
wire   [31:0] zext_ln10_fu_128_p1;
wire   [31:0] zext_ln10_1_fu_137_p1;
wire   [31:0] x_fu_141_p2;
wire   [31:0] x_1_fu_147_p2;
wire   [30:0] trunc_ln11_fu_152_p1;
wire   [0:0] tmp_fu_160_p3;
wire   [31:0] zext_ln13_1_fu_168_p1;
wire   [31:0] zext_ln13_fu_156_p1;
wire   [16:0] high_2_fu_184_p0;
wire   [16:0] high_2_fu_184_p1;
reg   [1:0] ap_NS_fsm;
wire   [31:0] high_2_fu_184_p10;
wire   [31:0] low_1_fu_96_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 CW_vo = 10'd15;
#0 rand_state = 32'd123456789;
end

start_backoff_vo_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
start_backoff_vo_bkb_U1(
    .din0(high_2_fu_184_p0),
    .din1(high_2_fu_184_p1),
    .dout(high_2_fu_184_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln272_fu_60_p2 == 1'd0) & (invoke_reason_read_read_fu_44_p2 == 1'd1))) begin
                        CW_vo[9 : 4] <= or_ln273_fu_72_p2[9 : 4];
        end else if ((invoke_reason_read_read_fu_44_p2 == 1'd0)) begin
                        CW_vo[4] <= 1'b0;
            CW_vo[5] <= 1'b0;
            CW_vo[6] <= 1'b0;
            CW_vo[7] <= 1'b0;
            CW_vo[8] <= 1'b0;
            CW_vo[9] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        high_2_reg_202 <= high_2_fu_184_p2;
        low_1_reg_197 <= low_1_fu_96_p2;
        trunc_ln_reg_207 <= {{high_2_fu_184_p2[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rand_state <= x_2_fu_172_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_132_p2 = (16'd15 + trunc_ln_reg_207);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign high_2_fu_184_p0 = 32'd48271;

assign high_2_fu_184_p1 = high_2_fu_184_p10;

assign high_2_fu_184_p10 = high_fu_102_p4;

assign high_fu_102_p4 = {{rand_state[31:15]}};

assign icmp_ln272_fu_60_p2 = ((CW_vo == 10'd1023) ? 1'b1 : 1'b0);

assign invoke_reason_read_read_fu_44_p2 = invoke_reason;

assign low_1_fu_96_p0 = low_1_fu_96_p00;

assign low_1_fu_96_p00 = low_fu_88_p1;

assign low_1_fu_96_p2 = (low_1_fu_96_p0 * $signed('hBC8F));

assign low_fu_88_p1 = rand_state[14:0];

assign or_ln273_fu_72_p2 = (shl_ln273_fu_66_p2 | 10'd1);

assign shl_ln273_fu_66_p2 = CW_vo << 10'd1;

assign tmp_fu_160_p3 = x_1_fu_147_p2[32'd31];

assign trunc_ln11_fu_152_p1 = x_1_fu_147_p2[30:0];

assign trunc_ln9_fu_125_p1 = high_2_reg_202[15:0];

assign x_1_fu_147_p2 = (low_1_reg_197 + x_fu_141_p2);

assign x_2_fu_172_p2 = (zext_ln13_1_fu_168_p1 + zext_ln13_fu_156_p1);

assign x_fu_141_p2 = zext_ln10_fu_128_p1 << zext_ln10_1_fu_137_p1;

assign zext_ln10_1_fu_137_p1 = add_ln10_fu_132_p2;

assign zext_ln10_fu_128_p1 = trunc_ln9_fu_125_p1;

assign zext_ln13_1_fu_168_p1 = tmp_fu_160_p3;

assign zext_ln13_fu_156_p1 = trunc_ln11_fu_152_p1;

always @ (posedge ap_clk) begin
    CW_vo[3:0] <= 4'b1111;
end

endmodule //start_backoff_vo
