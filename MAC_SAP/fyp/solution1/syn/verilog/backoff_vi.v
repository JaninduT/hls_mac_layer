// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="backoff_vi,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.485250,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1143,HLS_SYN_LUT=1607,HLS_VERSION=2019_2}" *)

module backoff_vi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        current_txop_holder_i,
        current_txop_holder_o,
        current_txop_holder_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] current_txop_holder_i;
output  [2:0] current_txop_holder_o;
output   current_txop_holder_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] current_txop_holder_o;
reg current_txop_holder_o_ap_vld;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] vi_backoff_counter;
reg   [9:0] CW_vi;
reg   [31:0] rand_state;
wire   [0:0] icmp_ln219_fu_125_p2;
reg   [0:0] icmp_ln219_reg_412;
wire   [0:0] icmp_ln220_fu_143_p2;
reg   [0:0] icmp_ln220_reg_416;
wire   [9:0] or_ln284_fu_165_p2;
wire   [0:0] icmp_ln283_fu_153_p2;
wire   [31:0] low_1_fu_189_p2;
reg   [31:0] low_1_reg_433;
wire   [31:0] high_2_fu_405_p2;
reg   [31:0] high_2_reg_438;
reg   [15:0] trunc_ln_reg_443;
wire   [31:0] x_2_fu_265_p2;
reg   [31:0] x_2_reg_448;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_115_p1;
reg   [31:0] tmp_i_i_reg_458;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_118_p1;
reg   [31:0] tmp_i_reg_463;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_110_p2;
reg   [31:0] tmp_4_i_i_reg_468;
wire   [22:0] tmp_V_1_fu_296_p1;
reg   [22:0] tmp_V_1_reg_473;
wire    ap_CS_fsm_state16;
wire   [8:0] add_ln339_fu_304_p2;
reg   [8:0] add_ln339_reg_478;
reg   [0:0] isNeg_reg_483;
wire   [7:0] sub_ln1311_fu_318_p2;
reg   [7:0] sub_ln1311_reg_489;
reg   [9:0] empty_reg_100;
wire   [9:0] add_ln228_fu_131_p2;
wire   [9:0] select_ln1312_fu_392_p3;
wire    ap_CS_fsm_state17;
reg   [31:0] grp_fu_110_p0;
reg   [31:0] grp_fu_110_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_118_p0;
wire   [9:0] shl_ln284_fu_159_p2;
wire   [14:0] low_fu_181_p1;
wire   [14:0] low_1_fu_189_p0;
wire   [16:0] high_fu_195_p4;
wire   [15:0] trunc_ln9_fu_218_p1;
wire   [15:0] add_ln10_fu_225_p2;
wire   [31:0] zext_ln10_fu_221_p1;
wire   [31:0] zext_ln10_1_fu_230_p1;
wire   [31:0] x_fu_234_p2;
wire   [31:0] x_1_fu_240_p2;
wire   [30:0] trunc_ln11_fu_245_p1;
wire   [0:0] tmp_fu_253_p3;
wire   [31:0] zext_ln12_fu_249_p1;
wire   [31:0] zext_ln12_1_fu_261_p1;
wire   [31:0] p_Val2_s_fu_282_p1;
wire   [7:0] tmp_V_fu_286_p4;
wire   [8:0] zext_ln339_fu_300_p1;
wire   [24:0] mantissa_V_fu_324_p4;
wire  signed [8:0] sext_ln1311_fu_337_p1;
wire  signed [8:0] ush_fu_340_p3;
wire  signed [31:0] sext_ln1311_1_fu_346_p1;
wire  signed [24:0] sext_ln1311_2_fu_350_p1;
wire   [62:0] zext_ln682_fu_333_p1;
wire   [62:0] zext_ln1287_fu_354_p1;
wire   [24:0] r_V_fu_358_p2;
wire   [0:0] tmp_3_fu_370_p3;
wire   [62:0] r_V_1_fu_364_p2;
wire   [9:0] zext_ln662_fu_378_p1;
wire   [9:0] tmp_2_fu_382_p4;
wire   [16:0] high_2_fu_405_p0;
wire   [16:0] high_2_fu_405_p1;
reg   [16:0] ap_NS_fsm;
wire   [31:0] high_2_fu_405_p10;
wire   [31:0] low_1_fu_189_p00;
reg    ap_condition_60;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 vi_backoff_counter = 10'd0;
#0 CW_vi = 10'd15;
#0 rand_state = 32'd123456789;
end

backoff_vi_fmul_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
backoff_vi_fmul_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_110_p0),
    .din1(grp_fu_110_p1),
    .ce(1'b1),
    .dout(grp_fu_110_p2)
);

backoff_vi_uitofpcud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
backoff_vi_uitofpcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_2_reg_448),
    .ce(1'b1),
    .dout(grp_fu_115_p1)
);

backoff_vi_sitofpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
backoff_vi_sitofpdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_118_p0),
    .ce(1'b1),
    .dout(grp_fu_118_p1)
);

backoff_vi_mul_mueOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
backoff_vi_mul_mueOg_U4(
    .din0(high_2_fu_405_p0),
    .din1(high_2_fu_405_p1),
    .dout(high_2_fu_405_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_60)) begin
        if ((icmp_ln283_fu_153_p2 == 1'd1)) begin
                        empty_reg_100[9 : 4] <= CW_vi[9 : 4];
        end else if ((icmp_ln283_fu_153_p2 == 1'd0)) begin
                        empty_reg_100[9 : 4] <= or_ln284_fu_165_p2[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln220_reg_416 == 1'd0) & (icmp_ln219_reg_412 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        vi_backoff_counter <= select_ln1312_fu_392_p3;
    end else if (((icmp_ln219_fu_125_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        vi_backoff_counter <= add_ln228_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln283_fu_153_p2 == 1'd0) & (icmp_ln220_fu_143_p2 == 1'd0) & (icmp_ln219_fu_125_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        CW_vi[9 : 4] <= or_ln284_fu_165_p2[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln339_reg_478 <= add_ln339_fu_304_p2;
        isNeg_reg_483 <= add_ln339_fu_304_p2[32'd8];
        sub_ln1311_reg_489 <= sub_ln1311_fu_318_p2;
        tmp_V_1_reg_473 <= tmp_V_1_fu_296_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln220_fu_143_p2 == 1'd0) & (icmp_ln219_fu_125_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        high_2_reg_438 <= high_2_fu_405_p2;
        low_1_reg_433 <= low_1_fu_189_p2;
        trunc_ln_reg_443 <= {{high_2_fu_405_p2[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln219_reg_412 <= icmp_ln219_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln219_fu_125_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln220_reg_416 <= icmp_ln220_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rand_state <= x_2_fu_265_p2;
        x_2_reg_448 <= x_2_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_4_i_i_reg_468 <= grp_fu_110_p2;
        tmp_i_reg_463 <= grp_fu_118_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_i_i_reg_458 <= grp_fu_115_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln220_fu_143_p2 == 1'd1) & (icmp_ln219_fu_125_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        current_txop_holder_o = 3'd3;
    end else begin
        current_txop_holder_o = current_txop_holder_i;
    end
end

always @ (*) begin
    if (((icmp_ln220_fu_143_p2 == 1'd1) & (icmp_ln219_fu_125_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        current_txop_holder_o_ap_vld = 1'b1;
    end else begin
        current_txop_holder_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_110_p0 = tmp_i_reg_463;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_110_p0 = tmp_i_i_reg_458;
    end else begin
        grp_fu_110_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_110_p1 = tmp_4_i_i_reg_468;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_110_p1 = 32'd805306368;
    end else begin
        grp_fu_110_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln220_fu_143_p2 == 1'd0) & (icmp_ln219_fu_125_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln220_fu_143_p2 == 1'd1) | (icmp_ln219_fu_125_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_225_p2 = (16'd15 + trunc_ln_reg_443);

assign add_ln228_fu_131_p2 = ($signed(vi_backoff_counter) + $signed(10'd1023));

assign add_ln339_fu_304_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_300_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_condition_60 = ((icmp_ln220_fu_143_p2 == 1'd0) & (icmp_ln219_fu_125_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1));
end

assign grp_fu_118_p0 = empty_reg_100;

assign high_2_fu_405_p0 = 32'd48271;

assign high_2_fu_405_p1 = high_2_fu_405_p10;

assign high_2_fu_405_p10 = high_fu_195_p4;

assign high_fu_195_p4 = {{rand_state[31:15]}};

assign icmp_ln219_fu_125_p2 = ((vi_backoff_counter == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln220_fu_143_p2 = ((current_txop_holder_i < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln283_fu_153_p2 = ((CW_vi == 10'd1023) ? 1'b1 : 1'b0);

assign low_1_fu_189_p0 = low_1_fu_189_p00;

assign low_1_fu_189_p00 = low_fu_181_p1;

assign low_1_fu_189_p2 = (low_1_fu_189_p0 * $signed('hBC8F));

assign low_fu_181_p1 = rand_state[14:0];

assign mantissa_V_fu_324_p4 = {{{{1'd1}, {tmp_V_1_reg_473}}}, {1'd0}};

assign or_ln284_fu_165_p2 = (shl_ln284_fu_159_p2 | 10'd1);

assign p_Val2_s_fu_282_p1 = grp_fu_110_p2;

assign r_V_1_fu_364_p2 = zext_ln682_fu_333_p1 << zext_ln1287_fu_354_p1;

assign r_V_fu_358_p2 = mantissa_V_fu_324_p4 >> sext_ln1311_2_fu_350_p1;

assign select_ln1312_fu_392_p3 = ((isNeg_reg_483[0:0] === 1'b1) ? zext_ln662_fu_378_p1 : tmp_2_fu_382_p4);

assign sext_ln1311_1_fu_346_p1 = ush_fu_340_p3;

assign sext_ln1311_2_fu_350_p1 = ush_fu_340_p3;

assign sext_ln1311_fu_337_p1 = $signed(sub_ln1311_reg_489);

assign shl_ln284_fu_159_p2 = CW_vi << 10'd1;

assign sub_ln1311_fu_318_p2 = (8'd127 - tmp_V_fu_286_p4);

assign tmp_2_fu_382_p4 = {{r_V_1_fu_364_p2[33:24]}};

assign tmp_3_fu_370_p3 = r_V_fu_358_p2[32'd24];

assign tmp_V_1_fu_296_p1 = p_Val2_s_fu_282_p1[22:0];

assign tmp_V_fu_286_p4 = {{p_Val2_s_fu_282_p1[30:23]}};

assign tmp_fu_253_p3 = x_1_fu_240_p2[32'd31];

assign trunc_ln11_fu_245_p1 = x_1_fu_240_p2[30:0];

assign trunc_ln9_fu_218_p1 = high_2_reg_438[15:0];

assign ush_fu_340_p3 = ((isNeg_reg_483[0:0] === 1'b1) ? sext_ln1311_fu_337_p1 : add_ln339_reg_478);

assign x_1_fu_240_p2 = (x_fu_234_p2 + low_1_reg_433);

assign x_2_fu_265_p2 = (zext_ln12_fu_249_p1 + zext_ln12_1_fu_261_p1);

assign x_fu_234_p2 = zext_ln10_fu_221_p1 << zext_ln10_1_fu_230_p1;

assign zext_ln10_1_fu_230_p1 = add_ln10_fu_225_p2;

assign zext_ln10_fu_221_p1 = trunc_ln9_fu_218_p1;

assign zext_ln1287_fu_354_p1 = $unsigned(sext_ln1311_1_fu_346_p1);

assign zext_ln12_1_fu_261_p1 = tmp_fu_253_p3;

assign zext_ln12_fu_249_p1 = trunc_ln11_fu_245_p1;

assign zext_ln339_fu_300_p1 = tmp_V_fu_286_p4;

assign zext_ln662_fu_378_p1 = tmp_3_fu_370_p3;

assign zext_ln682_fu_333_p1 = mantissa_V_fu_324_p4;

always @ (posedge ap_clk) begin
    CW_vi[3:0] <= 4'b1111;
    empty_reg_100[3:0] <= 4'b1111;
end

endmodule //backoff_vi
