// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="phy_data_confirm,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.457000,HLS_SYN_LAT=103,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=75,HLS_SYN_LUT=177,HLS_VERSION=2019_2}" *)

module phy_data_confirm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        frame_to_transfer_address0,
        frame_to_transfer_ce0,
        frame_to_transfer_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] frame_to_transfer_address0;
output   frame_to_transfer_ce0;
input  [7:0] frame_to_transfer_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg frame_to_transfer_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] count;
reg   [6:0] frame_address0;
reg    frame_ce0;
reg    frame_we0;
wire   [7:0] frame_q0;
reg   [0:0] stop_tx;
reg   [6:0] count_load_reg_141;
wire   [0:0] icmp_ln10_fu_90_p2;
reg   [0:0] icmp_ln10_reg_146;
wire   [6:0] q_fu_102_p2;
reg   [6:0] q_reg_153;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln12_fu_108_p1;
reg   [63:0] zext_ln12_reg_158;
wire   [0:0] icmp_ln11_fu_96_p2;
wire   [6:0] add_ln15_fu_113_p2;
reg   [6:0] add_ln15_reg_168;
wire   [0:0] icmp_ln16_fu_119_p2;
reg   [0:0] icmp_ln16_reg_174;
wire    grp_phy_data_request_fu_79_ap_start;
wire    grp_phy_data_request_fu_79_ap_done;
wire    grp_phy_data_request_fu_79_ap_idle;
wire    grp_phy_data_request_fu_79_ap_ready;
wire   [6:0] grp_phy_data_request_fu_79_data_address0;
wire    grp_phy_data_request_fu_79_data_ce0;
reg   [6:0] q_0_reg_57;
wire    ap_CS_fsm_state3;
reg   [6:0] ap_phi_mux_count_new_0_phi_fu_72_p4;
reg   [6:0] count_new_0_reg_68;
wire    ap_CS_fsm_state4;
reg    ap_block_state4_on_subcall_done;
reg    grp_phy_data_request_fu_79_ap_start_reg;
wire   [0:0] stop_tx_load_load_fu_125_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 count = 7'd0;
#0 stop_tx = 1'd0;
#0 grp_phy_data_request_fu_79_ap_start_reg = 1'b0;
end

phy_data_confirm_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
frame_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(frame_address0),
    .ce0(frame_ce0),
    .we0(frame_we0),
    .d0(frame_to_transfer_q0),
    .q0(frame_q0)
);

phy_data_request grp_phy_data_request_fu_79(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_phy_data_request_fu_79_ap_start),
    .ap_done(grp_phy_data_request_fu_79_ap_done),
    .ap_idle(grp_phy_data_request_fu_79_ap_idle),
    .ap_ready(grp_phy_data_request_fu_79_ap_ready),
    .data_address0(grp_phy_data_request_fu_79_data_address0),
    .data_ce0(grp_phy_data_request_fu_79_data_ce0),
    .data_q0(frame_q0),
    .data_offset(add_ln15_reg_168)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_phy_data_request_fu_79_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln16_fu_119_p2 == 1'd0) & (icmp_ln10_reg_146 == 1'd0)) | ((icmp_ln11_fu_96_p2 == 1'd1) & (icmp_ln16_fu_119_p2 == 1'd0))))) begin
            grp_phy_data_request_fu_79_ap_start_reg <= 1'b1;
        end else if ((grp_phy_data_request_fu_79_ap_ready == 1'b1)) begin
            grp_phy_data_request_fu_79_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_174 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        count_new_0_reg_68 <= add_ln15_reg_168;
    end else if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln16_fu_119_p2 == 1'd1) & (icmp_ln10_reg_146 == 1'd0)) | ((icmp_ln16_fu_119_p2 == 1'd1) & (icmp_ln11_fu_96_p2 == 1'd1))))) begin
        count_new_0_reg_68 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln10_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        q_0_reg_57 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        q_0_reg_57 <= q_reg_153;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln11_fu_96_p2 == 1'd1) | (icmp_ln10_reg_146 == 1'd0)))) begin
        add_ln15_reg_168 <= add_ln15_fu_113_p2;
        icmp_ln16_reg_174 <= icmp_ln16_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        count <= ap_phi_mux_count_new_0_phi_fu_72_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        count_load_reg_141 <= count;
        icmp_ln10_reg_146 <= icmp_ln10_fu_90_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_146 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        q_reg_153 <= q_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln16_fu_119_p2 == 1'd1) & (icmp_ln10_reg_146 == 1'd0) & (stop_tx_load_load_fu_125_p1 == 1'd0)) | ((icmp_ln16_fu_119_p2 == 1'd1) & (icmp_ln11_fu_96_p2 == 1'd1) & (stop_tx_load_load_fu_125_p1 == 1'd0))))) begin
        stop_tx <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_146 == 1'd1) & (icmp_ln11_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln12_reg_158[6 : 0] <= zext_ln12_fu_108_p1[6 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_174 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_phi_mux_count_new_0_phi_fu_72_p4 = add_ln15_reg_168;
    end else begin
        ap_phi_mux_count_new_0_phi_fu_72_p4 = count_new_0_reg_68;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        frame_address0 = zext_ln12_reg_158;
    end else if (((icmp_ln16_reg_174 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        frame_address0 = grp_phy_data_request_fu_79_data_address0;
    end else begin
        frame_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        frame_ce0 = 1'b1;
    end else if (((icmp_ln16_reg_174 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        frame_ce0 = grp_phy_data_request_fu_79_data_ce0;
    end else begin
        frame_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_to_transfer_ce0 = 1'b1;
    end else begin
        frame_to_transfer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        frame_we0 = 1'b1;
    end else begin
        frame_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln11_fu_96_p2 == 1'd1) | (icmp_ln10_reg_146 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_113_p2 = (count_load_reg_141 + 7'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((icmp_ln16_reg_174 == 1'd0) & (grp_phy_data_request_fu_79_ap_done == 1'b0));
end

assign frame_to_transfer_address0 = zext_ln12_fu_108_p1;

assign grp_phy_data_request_fu_79_ap_start = grp_phy_data_request_fu_79_ap_start_reg;

assign icmp_ln10_fu_90_p2 = ((count == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_96_p2 = ((q_0_reg_57 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_119_p2 = ((add_ln15_fu_113_p2 == 7'd100) ? 1'b1 : 1'b0);

assign q_fu_102_p2 = (q_0_reg_57 + 7'd1);

assign stop_tx_load_load_fu_125_p1 = stop_tx;

assign zext_ln12_fu_108_p1 = q_0_reg_57;

always @ (posedge ap_clk) begin
    zext_ln12_reg_158[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //phy_data_confirm
