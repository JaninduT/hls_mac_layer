// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "start_backoff_vo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic start_backoff_vo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic start_backoff_vo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> start_backoff_vo::ap_ST_fsm_state1 = "1";
const sc_lv<2> start_backoff_vo::ap_ST_fsm_state2 = "10";
const sc_lv<32> start_backoff_vo::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<10> start_backoff_vo::ap_const_lv10_F = "1111";
const sc_lv<1> start_backoff_vo::ap_const_lv1_0 = "0";
const sc_lv<1> start_backoff_vo::ap_const_lv1_1 = "1";
const sc_lv<32> start_backoff_vo::ap_const_lv32_1 = "1";
const sc_lv<10> start_backoff_vo::ap_const_lv10_3FF = "1111111111";
const sc_lv<10> start_backoff_vo::ap_const_lv10_1 = "1";
const sc_lv<32> start_backoff_vo::ap_const_lv32_BC8F = "1011110010001111";
const sc_lv<32> start_backoff_vo::ap_const_lv32_F = "1111";
const sc_lv<32> start_backoff_vo::ap_const_lv32_1F = "11111";
const sc_lv<32> start_backoff_vo::ap_const_lv32_10 = "10000";
const sc_lv<16> start_backoff_vo::ap_const_lv16_F = "1111";
const bool start_backoff_vo::ap_const_boolean_1 = true;

start_backoff_vo::start_backoff_vo(sc_module_name name) : sc_module(name), mVcdFile(0) {
    start_backoff_vo_bkb_U1 = new start_backoff_vo_bkb<1,1,17,17,32>("start_backoff_vo_bkb_U1");
    start_backoff_vo_bkb_U1->din0(high_2_fu_184_p0);
    start_backoff_vo_bkb_U1->din1(high_2_fu_184_p1);
    start_backoff_vo_bkb_U1->dout(high_2_fu_184_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln10_fu_132_p2);
    sensitive << ( trunc_ln_reg_207 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_high_2_fu_184_p0);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_high_2_fu_184_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( high_2_fu_184_p10 );

    SC_METHOD(thread_high_2_fu_184_p10);
    sensitive << ( high_fu_102_p4 );

    SC_METHOD(thread_high_fu_102_p4);
    sensitive << ( rand_state );

    SC_METHOD(thread_icmp_ln272_fu_60_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( CW_vo );
    sensitive << ( invoke_reason_read_read_fu_44_p2 );

    SC_METHOD(thread_invoke_reason_read_read_fu_44_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( invoke_reason );

    SC_METHOD(thread_low_1_fu_96_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( low_1_fu_96_p00 );

    SC_METHOD(thread_low_1_fu_96_p00);
    sensitive << ( low_fu_88_p1 );

    SC_METHOD(thread_low_1_fu_96_p2);
    sensitive << ( low_1_fu_96_p0 );

    SC_METHOD(thread_low_fu_88_p1);
    sensitive << ( rand_state );

    SC_METHOD(thread_or_ln273_fu_72_p2);
    sensitive << ( shl_ln273_fu_66_p2 );

    SC_METHOD(thread_shl_ln273_fu_66_p2);
    sensitive << ( CW_vo );

    SC_METHOD(thread_tmp_fu_160_p3);
    sensitive << ( x_1_fu_147_p2 );

    SC_METHOD(thread_trunc_ln11_fu_152_p1);
    sensitive << ( x_1_fu_147_p2 );

    SC_METHOD(thread_trunc_ln9_fu_125_p1);
    sensitive << ( high_2_reg_202 );

    SC_METHOD(thread_x_1_fu_147_p2);
    sensitive << ( low_1_reg_197 );
    sensitive << ( x_fu_141_p2 );

    SC_METHOD(thread_x_2_fu_172_p2);
    sensitive << ( zext_ln13_1_fu_168_p1 );
    sensitive << ( zext_ln13_fu_156_p1 );

    SC_METHOD(thread_x_fu_141_p2);
    sensitive << ( zext_ln10_fu_128_p1 );
    sensitive << ( zext_ln10_1_fu_137_p1 );

    SC_METHOD(thread_zext_ln10_1_fu_137_p1);
    sensitive << ( add_ln10_fu_132_p2 );

    SC_METHOD(thread_zext_ln10_fu_128_p1);
    sensitive << ( trunc_ln9_fu_125_p1 );

    SC_METHOD(thread_zext_ln13_1_fu_168_p1);
    sensitive << ( tmp_fu_160_p3 );

    SC_METHOD(thread_zext_ln13_fu_156_p1);
    sensitive << ( trunc_ln11_fu_152_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    CW_vo = "0000001111";
    rand_state = "00000111010110111100110100010101";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "start_backoff_vo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, invoke_reason, "(port)invoke_reason");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, CW_vo, "CW_vo");
    sc_trace(mVcdFile, rand_state, "rand_state");
    sc_trace(mVcdFile, low_1_fu_96_p2, "low_1_fu_96_p2");
    sc_trace(mVcdFile, low_1_reg_197, "low_1_reg_197");
    sc_trace(mVcdFile, high_2_fu_184_p2, "high_2_fu_184_p2");
    sc_trace(mVcdFile, high_2_reg_202, "high_2_reg_202");
    sc_trace(mVcdFile, trunc_ln_reg_207, "trunc_ln_reg_207");
    sc_trace(mVcdFile, invoke_reason_read_read_fu_44_p2, "invoke_reason_read_read_fu_44_p2");
    sc_trace(mVcdFile, or_ln273_fu_72_p2, "or_ln273_fu_72_p2");
    sc_trace(mVcdFile, icmp_ln272_fu_60_p2, "icmp_ln272_fu_60_p2");
    sc_trace(mVcdFile, x_2_fu_172_p2, "x_2_fu_172_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, shl_ln273_fu_66_p2, "shl_ln273_fu_66_p2");
    sc_trace(mVcdFile, low_fu_88_p1, "low_fu_88_p1");
    sc_trace(mVcdFile, low_1_fu_96_p0, "low_1_fu_96_p0");
    sc_trace(mVcdFile, high_fu_102_p4, "high_fu_102_p4");
    sc_trace(mVcdFile, trunc_ln9_fu_125_p1, "trunc_ln9_fu_125_p1");
    sc_trace(mVcdFile, add_ln10_fu_132_p2, "add_ln10_fu_132_p2");
    sc_trace(mVcdFile, zext_ln10_fu_128_p1, "zext_ln10_fu_128_p1");
    sc_trace(mVcdFile, zext_ln10_1_fu_137_p1, "zext_ln10_1_fu_137_p1");
    sc_trace(mVcdFile, x_fu_141_p2, "x_fu_141_p2");
    sc_trace(mVcdFile, x_1_fu_147_p2, "x_1_fu_147_p2");
    sc_trace(mVcdFile, trunc_ln11_fu_152_p1, "trunc_ln11_fu_152_p1");
    sc_trace(mVcdFile, tmp_fu_160_p3, "tmp_fu_160_p3");
    sc_trace(mVcdFile, zext_ln13_1_fu_168_p1, "zext_ln13_1_fu_168_p1");
    sc_trace(mVcdFile, zext_ln13_fu_156_p1, "zext_ln13_fu_156_p1");
    sc_trace(mVcdFile, high_2_fu_184_p0, "high_2_fu_184_p0");
    sc_trace(mVcdFile, high_2_fu_184_p1, "high_2_fu_184_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, high_2_fu_184_p10, "high_2_fu_184_p10");
    sc_trace(mVcdFile, low_1_fu_96_p00, "low_1_fu_96_p00");
#endif

    }
    mHdltvinHandle.open("start_backoff_vo.hdltvin.dat");
    mHdltvoutHandle.open("start_backoff_vo.hdltvout.dat");
}

start_backoff_vo::~start_backoff_vo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete start_backoff_vo_bkb_U1;
}

void start_backoff_vo::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if ((esl_seteq<1,1,1>(invoke_reason_read_read_fu_44_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln272_fu_60_p2.read()))) {
            CW_vo = or_ln273_fu_72_p2.read();
        } else if (esl_seteq<1,1,1>(invoke_reason_read_read_fu_44_p2.read(), ap_const_lv1_0)) {
            CW_vo = ap_const_lv10_F;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        high_2_reg_202 = high_2_fu_184_p2.read();
        low_1_reg_197 = low_1_fu_96_p2.read();
        trunc_ln_reg_207 = high_2_fu_184_p2.read().range(31, 16);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        rand_state = x_2_fu_172_p2.read();
    }
}

void start_backoff_vo::thread_add_ln10_fu_132_p2() {
    add_ln10_fu_132_p2 = (!ap_const_lv16_F.is_01() || !trunc_ln_reg_207.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_F) + sc_biguint<16>(trunc_ln_reg_207.read()));
}

void start_backoff_vo::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void start_backoff_vo::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void start_backoff_vo::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void start_backoff_vo::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void start_backoff_vo::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void start_backoff_vo::thread_high_2_fu_184_p0() {
    high_2_fu_184_p0 =  (sc_lv<17>) (ap_const_lv32_BC8F);
}

void start_backoff_vo::thread_high_2_fu_184_p1() {
    high_2_fu_184_p1 =  (sc_lv<17>) (high_2_fu_184_p10.read());
}

void start_backoff_vo::thread_high_2_fu_184_p10() {
    high_2_fu_184_p10 = esl_zext<32,17>(high_fu_102_p4.read());
}

void start_backoff_vo::thread_high_fu_102_p4() {
    high_fu_102_p4 = rand_state.read().range(31, 15);
}

void start_backoff_vo::thread_icmp_ln272_fu_60_p2() {
    icmp_ln272_fu_60_p2 = (!CW_vo.read().is_01() || !ap_const_lv10_3FF.is_01())? sc_lv<1>(): sc_lv<1>(CW_vo.read() == ap_const_lv10_3FF);
}

void start_backoff_vo::thread_invoke_reason_read_read_fu_44_p2() {
    invoke_reason_read_read_fu_44_p2 = invoke_reason.read();
}

void start_backoff_vo::thread_low_1_fu_96_p0() {
    low_1_fu_96_p0 =  (sc_lv<15>) (low_1_fu_96_p00.read());
}

void start_backoff_vo::thread_low_1_fu_96_p00() {
    low_1_fu_96_p00 = esl_zext<32,15>(low_fu_88_p1.read());
}

void start_backoff_vo::thread_low_1_fu_96_p2() {
    low_1_fu_96_p2 = (!low_1_fu_96_p0.read().is_01() || !ap_const_lv32_BC8F.is_01())? sc_lv<32>(): sc_biguint<15>(low_1_fu_96_p0.read()) * sc_biguint<32>(ap_const_lv32_BC8F);
}

void start_backoff_vo::thread_low_fu_88_p1() {
    low_fu_88_p1 = rand_state.read().range(15-1, 0);
}

void start_backoff_vo::thread_or_ln273_fu_72_p2() {
    or_ln273_fu_72_p2 = (shl_ln273_fu_66_p2.read() | ap_const_lv10_1);
}

void start_backoff_vo::thread_shl_ln273_fu_66_p2() {
    shl_ln273_fu_66_p2 = (!ap_const_lv10_1.is_01())? sc_lv<10>(): CW_vo.read() << (unsigned short)ap_const_lv10_1.to_uint();
}

void start_backoff_vo::thread_tmp_fu_160_p3() {
    tmp_fu_160_p3 = x_1_fu_147_p2.read().range(31, 31);
}

void start_backoff_vo::thread_trunc_ln11_fu_152_p1() {
    trunc_ln11_fu_152_p1 = x_1_fu_147_p2.read().range(31-1, 0);
}

void start_backoff_vo::thread_trunc_ln9_fu_125_p1() {
    trunc_ln9_fu_125_p1 = high_2_reg_202.read().range(16-1, 0);
}

void start_backoff_vo::thread_x_1_fu_147_p2() {
    x_1_fu_147_p2 = (!low_1_reg_197.read().is_01() || !x_fu_141_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(low_1_reg_197.read()) + sc_biguint<32>(x_fu_141_p2.read()));
}

void start_backoff_vo::thread_x_2_fu_172_p2() {
    x_2_fu_172_p2 = (!zext_ln13_1_fu_168_p1.read().is_01() || !zext_ln13_fu_156_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln13_1_fu_168_p1.read()) + sc_biguint<32>(zext_ln13_fu_156_p1.read()));
}

void start_backoff_vo::thread_x_fu_141_p2() {
    x_fu_141_p2 = (!zext_ln10_1_fu_137_p1.read().is_01())? sc_lv<32>(): zext_ln10_fu_128_p1.read() << (unsigned short)zext_ln10_1_fu_137_p1.read().to_uint();
}

void start_backoff_vo::thread_zext_ln10_1_fu_137_p1() {
    zext_ln10_1_fu_137_p1 = esl_zext<32,16>(add_ln10_fu_132_p2.read());
}

void start_backoff_vo::thread_zext_ln10_fu_128_p1() {
    zext_ln10_fu_128_p1 = esl_zext<32,16>(trunc_ln9_fu_125_p1.read());
}

void start_backoff_vo::thread_zext_ln13_1_fu_168_p1() {
    zext_ln13_1_fu_168_p1 = esl_zext<32,1>(tmp_fu_160_p3.read());
}

void start_backoff_vo::thread_zext_ln13_fu_156_p1() {
    zext_ln13_fu_156_p1 = esl_zext<32,31>(trunc_ln11_fu_152_p1.read());
}

void start_backoff_vo::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void start_backoff_vo::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"invoke_reason\" :  \"" << invoke_reason.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

