// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _random_int_gen_HH_
#define _random_int_gen_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "send_frame_urem_3bkb.h"
#include "send_frame_mul_mucud.h"

namespace ap_rtl {

struct random_int_gen : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<10> > max_val;
    sc_in< sc_lv<32> > rand_state_i;
    sc_out< sc_lv<32> > rand_state_o;
    sc_out< sc_logic > rand_state_o_ap_vld;
    sc_out< sc_lv<10> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    random_int_gen(sc_module_name name);
    SC_HAS_PROCESS(random_int_gen);

    ~random_int_gen();

    sc_trace_file* mVcdFile;

    send_frame_urem_3bkb<1,36,32,10,10>* send_frame_urem_3bkb_U23;
    send_frame_mul_mucud<1,1,17,17,32>* send_frame_mul_mucud_U24;
    sc_signal< sc_lv<38> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > low_1_fu_54_p2;
    sc_signal< sc_lv<32> > low_1_reg_161;
    sc_signal< sc_lv<32> > high_2_fu_154_p2;
    sc_signal< sc_lv<32> > high_2_reg_166;
    sc_signal< sc_lv<16> > trunc_ln1_reg_171;
    sc_signal< sc_lv<31> > trunc_ln14_fu_110_p1;
    sc_signal< sc_lv<31> > trunc_ln14_reg_176;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_1_reg_181;
    sc_signal< sc_lv<32> > x_2_fu_128_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<15> > low_fu_46_p1;
    sc_signal< sc_lv<15> > low_1_fu_54_p0;
    sc_signal< sc_lv<17> > high_fu_60_p4;
    sc_signal< sc_lv<16> > trunc_ln12_fu_83_p1;
    sc_signal< sc_lv<16> > add_ln13_fu_90_p2;
    sc_signal< sc_lv<32> > zext_ln13_fu_86_p1;
    sc_signal< sc_lv<32> > zext_ln13_1_fu_95_p1;
    sc_signal< sc_lv<32> > x_fu_99_p2;
    sc_signal< sc_lv<32> > x_1_fu_105_p2;
    sc_signal< sc_lv<32> > zext_ln15_1_fu_125_p1;
    sc_signal< sc_lv<32> > zext_ln15_fu_122_p1;
    sc_signal< sc_lv<32> > grp_fu_144_p0;
    sc_signal< sc_lv<10> > grp_fu_144_p1;
    sc_signal< sc_lv<10> > grp_fu_144_p2;
    sc_signal< sc_logic > ap_CS_fsm_state38;
    sc_signal< sc_lv<17> > high_2_fu_154_p0;
    sc_signal< sc_lv<17> > high_2_fu_154_p1;
    sc_signal< sc_logic > grp_fu_144_ap_start;
    sc_signal< sc_logic > grp_fu_144_ap_done;
    sc_signal< sc_lv<10> > ret_val_fu_150_p1;
    sc_signal< sc_lv<10> > ap_return_preg;
    sc_signal< sc_lv<38> > ap_NS_fsm;
    sc_signal< sc_lv<32> > grp_fu_144_p10;
    sc_signal< sc_lv<32> > high_2_fu_154_p10;
    sc_signal< sc_lv<32> > low_1_fu_54_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<38> ap_ST_fsm_state1;
    static const sc_lv<38> ap_ST_fsm_state2;
    static const sc_lv<38> ap_ST_fsm_state3;
    static const sc_lv<38> ap_ST_fsm_state4;
    static const sc_lv<38> ap_ST_fsm_state5;
    static const sc_lv<38> ap_ST_fsm_state6;
    static const sc_lv<38> ap_ST_fsm_state7;
    static const sc_lv<38> ap_ST_fsm_state8;
    static const sc_lv<38> ap_ST_fsm_state9;
    static const sc_lv<38> ap_ST_fsm_state10;
    static const sc_lv<38> ap_ST_fsm_state11;
    static const sc_lv<38> ap_ST_fsm_state12;
    static const sc_lv<38> ap_ST_fsm_state13;
    static const sc_lv<38> ap_ST_fsm_state14;
    static const sc_lv<38> ap_ST_fsm_state15;
    static const sc_lv<38> ap_ST_fsm_state16;
    static const sc_lv<38> ap_ST_fsm_state17;
    static const sc_lv<38> ap_ST_fsm_state18;
    static const sc_lv<38> ap_ST_fsm_state19;
    static const sc_lv<38> ap_ST_fsm_state20;
    static const sc_lv<38> ap_ST_fsm_state21;
    static const sc_lv<38> ap_ST_fsm_state22;
    static const sc_lv<38> ap_ST_fsm_state23;
    static const sc_lv<38> ap_ST_fsm_state24;
    static const sc_lv<38> ap_ST_fsm_state25;
    static const sc_lv<38> ap_ST_fsm_state26;
    static const sc_lv<38> ap_ST_fsm_state27;
    static const sc_lv<38> ap_ST_fsm_state28;
    static const sc_lv<38> ap_ST_fsm_state29;
    static const sc_lv<38> ap_ST_fsm_state30;
    static const sc_lv<38> ap_ST_fsm_state31;
    static const sc_lv<38> ap_ST_fsm_state32;
    static const sc_lv<38> ap_ST_fsm_state33;
    static const sc_lv<38> ap_ST_fsm_state34;
    static const sc_lv<38> ap_ST_fsm_state35;
    static const sc_lv<38> ap_ST_fsm_state36;
    static const sc_lv<38> ap_ST_fsm_state37;
    static const sc_lv<38> ap_ST_fsm_state38;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_BC8F;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<16> ap_const_lv16_F;
    static const sc_lv<32> ap_const_lv32_25;
    static const sc_lv<10> ap_const_lv10_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln13_fu_90_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state38();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_grp_fu_144_ap_start();
    void thread_grp_fu_144_p0();
    void thread_grp_fu_144_p1();
    void thread_grp_fu_144_p10();
    void thread_high_2_fu_154_p0();
    void thread_high_2_fu_154_p1();
    void thread_high_2_fu_154_p10();
    void thread_high_fu_60_p4();
    void thread_low_1_fu_54_p0();
    void thread_low_1_fu_54_p00();
    void thread_low_1_fu_54_p2();
    void thread_low_fu_46_p1();
    void thread_rand_state_o();
    void thread_rand_state_o_ap_vld();
    void thread_ret_val_fu_150_p1();
    void thread_trunc_ln12_fu_83_p1();
    void thread_trunc_ln14_fu_110_p1();
    void thread_x_1_fu_105_p2();
    void thread_x_2_fu_128_p2();
    void thread_x_fu_99_p2();
    void thread_zext_ln13_1_fu_95_p1();
    void thread_zext_ln13_fu_86_p1();
    void thread_zext_ln15_1_fu_125_p1();
    void thread_zext_ln15_fu_122_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
