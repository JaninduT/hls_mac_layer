// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ma_unitdatax_status_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ma_unitdatax_status_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ma_unitdatax_status_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> ma_unitdatax_status_s::ap_ST_fsm_state1 = "1";
const sc_lv<32> ma_unitdatax_status_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> ma_unitdatax_status_s::ap_const_lv1_1 = "1";
const sc_lv<1> ma_unitdatax_status_s::ap_const_lv1_0 = "0";
const sc_lv<3> ma_unitdatax_status_s::ap_const_lv3_0 = "000";
const sc_lv<3> ma_unitdatax_status_s::ap_const_lv3_1 = "1";
const sc_lv<3> ma_unitdatax_status_s::ap_const_lv3_2 = "10";
const sc_lv<3> ma_unitdatax_status_s::ap_const_lv3_3 = "11";
const sc_lv<3> ma_unitdatax_status_s::ap_const_lv3_4 = "100";
const sc_lv<8> ma_unitdatax_status_s::ap_const_lv8_1 = "1";
const bool ma_unitdatax_status_s::ap_const_boolean_1 = true;

ma_unitdatax_status_s::ma_unitdatax_status_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln14_fu_148_p2);
    sensitive << ( successful );

    SC_METHOD(thread_add_ln16_fu_132_p2);
    sensitive << ( unsupported_priority );

    SC_METHOD(thread_add_ln18_fu_116_p2);
    sensitive << ( unsupported_service_s );

    SC_METHOD(thread_add_ln20_fu_100_p2);
    sensitive << ( unsupported_channel_s );

    SC_METHOD(thread_add_ln22_fu_84_p2);
    sensitive << ( unsupported_tx_param );

    SC_METHOD(thread_add_ln24_fu_68_p2);
    sensitive << ( queue_full );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln13_fu_34_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( trans_sts );

    SC_METHOD(thread_icmp_ln15_fu_40_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( trans_sts );
    sensitive << ( icmp_ln13_fu_34_p2 );

    SC_METHOD(thread_icmp_ln17_fu_46_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( trans_sts );
    sensitive << ( icmp_ln13_fu_34_p2 );
    sensitive << ( icmp_ln15_fu_40_p2 );

    SC_METHOD(thread_icmp_ln19_fu_52_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( trans_sts );
    sensitive << ( icmp_ln13_fu_34_p2 );
    sensitive << ( icmp_ln15_fu_40_p2 );
    sensitive << ( icmp_ln17_fu_46_p2 );

    SC_METHOD(thread_icmp_ln21_fu_58_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( trans_sts );
    sensitive << ( icmp_ln13_fu_34_p2 );
    sensitive << ( icmp_ln15_fu_40_p2 );
    sensitive << ( icmp_ln17_fu_46_p2 );
    sensitive << ( icmp_ln19_fu_52_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "1";
    successful = "00000000";
    unsupported_priority = "00000000";
    unsupported_service_s = "00000000";
    unsupported_channel_s = "00000000";
    unsupported_tx_param = "00000000";
    queue_full = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ma_unitdatax_status_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, trans_sts, "(port)trans_sts");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, successful, "successful");
    sc_trace(mVcdFile, unsupported_priority, "unsupported_priority");
    sc_trace(mVcdFile, unsupported_service_s, "unsupported_service_s");
    sc_trace(mVcdFile, unsupported_channel_s, "unsupported_channel_s");
    sc_trace(mVcdFile, unsupported_tx_param, "unsupported_tx_param");
    sc_trace(mVcdFile, queue_full, "queue_full");
    sc_trace(mVcdFile, add_ln14_fu_148_p2, "add_ln14_fu_148_p2");
    sc_trace(mVcdFile, icmp_ln13_fu_34_p2, "icmp_ln13_fu_34_p2");
    sc_trace(mVcdFile, add_ln16_fu_132_p2, "add_ln16_fu_132_p2");
    sc_trace(mVcdFile, icmp_ln15_fu_40_p2, "icmp_ln15_fu_40_p2");
    sc_trace(mVcdFile, add_ln18_fu_116_p2, "add_ln18_fu_116_p2");
    sc_trace(mVcdFile, icmp_ln17_fu_46_p2, "icmp_ln17_fu_46_p2");
    sc_trace(mVcdFile, add_ln20_fu_100_p2, "add_ln20_fu_100_p2");
    sc_trace(mVcdFile, icmp_ln19_fu_52_p2, "icmp_ln19_fu_52_p2");
    sc_trace(mVcdFile, add_ln22_fu_84_p2, "add_ln22_fu_84_p2");
    sc_trace(mVcdFile, icmp_ln21_fu_58_p2, "icmp_ln21_fu_58_p2");
    sc_trace(mVcdFile, add_ln24_fu_68_p2, "add_ln24_fu_68_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

ma_unitdatax_status_s::~ma_unitdatax_status_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void ma_unitdatax_status_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln13_fu_34_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_fu_40_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_46_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln19_fu_52_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln21_fu_58_p2.read()))) {
        queue_full = add_ln24_fu_68_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln13_fu_34_p2.read(), ap_const_lv1_1))) {
        successful = add_ln14_fu_148_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln13_fu_34_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_fu_40_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_46_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln19_fu_52_p2.read()))) {
        unsupported_channel_s = add_ln20_fu_100_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln13_fu_34_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln15_fu_40_p2.read()))) {
        unsupported_priority = add_ln16_fu_132_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln13_fu_34_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_fu_40_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln17_fu_46_p2.read()))) {
        unsupported_service_s = add_ln18_fu_116_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln13_fu_34_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_fu_40_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_46_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln19_fu_52_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln21_fu_58_p2.read()))) {
        unsupported_tx_param = add_ln22_fu_84_p2.read();
    }
}

void ma_unitdatax_status_s::thread_add_ln14_fu_148_p2() {
    add_ln14_fu_148_p2 = (!successful.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(successful.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void ma_unitdatax_status_s::thread_add_ln16_fu_132_p2() {
    add_ln16_fu_132_p2 = (!unsupported_priority.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(unsupported_priority.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void ma_unitdatax_status_s::thread_add_ln18_fu_116_p2() {
    add_ln18_fu_116_p2 = (!unsupported_service_s.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(unsupported_service_s.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void ma_unitdatax_status_s::thread_add_ln20_fu_100_p2() {
    add_ln20_fu_100_p2 = (!unsupported_channel_s.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(unsupported_channel_s.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void ma_unitdatax_status_s::thread_add_ln22_fu_84_p2() {
    add_ln22_fu_84_p2 = (!unsupported_tx_param.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(unsupported_tx_param.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void ma_unitdatax_status_s::thread_add_ln24_fu_68_p2() {
    add_ln24_fu_68_p2 = (!queue_full.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(queue_full.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void ma_unitdatax_status_s::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ma_unitdatax_status_s::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ma_unitdatax_status_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ma_unitdatax_status_s::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ma_unitdatax_status_s::thread_icmp_ln13_fu_34_p2() {
    icmp_ln13_fu_34_p2 = (!trans_sts.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(trans_sts.read() == ap_const_lv3_0);
}

void ma_unitdatax_status_s::thread_icmp_ln15_fu_40_p2() {
    icmp_ln15_fu_40_p2 = (!trans_sts.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<1>(): sc_lv<1>(trans_sts.read() == ap_const_lv3_1);
}

void ma_unitdatax_status_s::thread_icmp_ln17_fu_46_p2() {
    icmp_ln17_fu_46_p2 = (!trans_sts.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<1>(): sc_lv<1>(trans_sts.read() == ap_const_lv3_2);
}

void ma_unitdatax_status_s::thread_icmp_ln19_fu_52_p2() {
    icmp_ln19_fu_52_p2 = (!trans_sts.read().is_01() || !ap_const_lv3_3.is_01())? sc_lv<1>(): sc_lv<1>(trans_sts.read() == ap_const_lv3_3);
}

void ma_unitdatax_status_s::thread_icmp_ln21_fu_58_p2() {
    icmp_ln21_fu_58_p2 = (!trans_sts.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(trans_sts.read() == ap_const_lv3_4);
}

void ma_unitdatax_status_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

