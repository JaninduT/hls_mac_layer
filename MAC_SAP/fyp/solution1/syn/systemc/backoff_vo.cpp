// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "backoff_vo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic backoff_vo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic backoff_vo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> backoff_vo::ap_ST_fsm_state1 = "1";
const sc_lv<2> backoff_vo::ap_ST_fsm_state2 = "10";
const bool backoff_vo::ap_const_boolean_1 = true;
const sc_lv<32> backoff_vo::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> backoff_vo::ap_const_lv1_0 = "0";
const sc_lv<1> backoff_vo::ap_const_lv1_1 = "1";
const sc_lv<10> backoff_vo::ap_const_lv10_F = "1111";
const sc_lv<32> backoff_vo::ap_const_lv32_1 = "1";
const sc_lv<3> backoff_vo::ap_const_lv3_4 = "100";
const bool backoff_vo::ap_const_boolean_0 = false;
const sc_lv<32> backoff_vo::ap_const_lv32_2 = "10";
const sc_lv<10> backoff_vo::ap_const_lv10_0 = "0000000000";
const sc_lv<10> backoff_vo::ap_const_lv10_3FF = "1111111111";

backoff_vo::backoff_vo(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_random_int_gen_fu_32 = new random_int_gen("grp_random_int_gen_fu_32");
    grp_random_int_gen_fu_32->ap_clk(ap_clk);
    grp_random_int_gen_fu_32->ap_rst(ap_rst);
    grp_random_int_gen_fu_32->ap_start(grp_random_int_gen_fu_32_ap_start);
    grp_random_int_gen_fu_32->ap_done(grp_random_int_gen_fu_32_ap_done);
    grp_random_int_gen_fu_32->ap_idle(grp_random_int_gen_fu_32_ap_idle);
    grp_random_int_gen_fu_32->ap_ready(grp_random_int_gen_fu_32_ap_ready);
    grp_random_int_gen_fu_32->max_val(ap_var_for_const0);
    grp_random_int_gen_fu_32->rand_state_i(rand_state_i);
    grp_random_int_gen_fu_32->rand_state_o(grp_random_int_gen_fu_32_rand_state_o);
    grp_random_int_gen_fu_32->rand_state_o_ap_vld(grp_random_int_gen_fu_32_rand_state_o_ap_vld);
    grp_random_int_gen_fu_32->ap_return(grp_random_int_gen_fu_32_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln260_fu_62_p2);
    sensitive << ( vo_backoff_counter_i );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2_on_subcall_done);
    sensitive << ( grp_random_int_gen_fu_32_ap_done );
    sensitive << ( ap_predicate_op14_call_state2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op14_call_state2);
    sensitive << ( tmp_reg_80 );
    sensitive << ( icmp_ln255_reg_84 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_current_txop_holder);
    sensitive << ( tmp_reg_80 );
    sensitive << ( icmp_ln255_reg_84 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_current_txop_holder_ap_vld);
    sensitive << ( tmp_reg_80 );
    sensitive << ( icmp_ln255_reg_84 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_grp_random_int_gen_fu_32_ap_start);
    sensitive << ( grp_random_int_gen_fu_32_ap_start_reg );

    SC_METHOD(thread_icmp_ln255_fu_56_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( vo_backoff_counter_i );
    sensitive << ( tmp_fu_44_p3 );

    SC_METHOD(thread_rand_state_o);
    sensitive << ( rand_state_i );
    sensitive << ( tmp_reg_80 );
    sensitive << ( icmp_ln255_reg_84 );
    sensitive << ( grp_random_int_gen_fu_32_rand_state_o );
    sensitive << ( grp_random_int_gen_fu_32_rand_state_o_ap_vld );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_rand_state_o_ap_vld);
    sensitive << ( tmp_reg_80 );
    sensitive << ( icmp_ln255_reg_84 );
    sensitive << ( grp_random_int_gen_fu_32_rand_state_o_ap_vld );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_fu_44_p3);
    sensitive << ( available_spaces_vo );

    SC_METHOD(thread_vo_backoff_counter_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( vo_backoff_counter_i );
    sensitive << ( tmp_fu_44_p3 );
    sensitive << ( tmp_reg_80 );
    sensitive << ( icmp_ln255_fu_56_p2 );
    sensitive << ( icmp_ln255_reg_84 );
    sensitive << ( grp_random_int_gen_fu_32_ap_return );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );
    sensitive << ( add_ln260_fu_62_p2 );

    SC_METHOD(thread_vo_backoff_counter_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_44_p3 );
    sensitive << ( tmp_reg_80 );
    sensitive << ( icmp_ln255_fu_56_p2 );
    sensitive << ( icmp_ln255_reg_84 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "01";
    grp_random_int_gen_fu_32_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "backoff_vo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, current_txop_holder, "(port)current_txop_holder");
    sc_trace(mVcdFile, current_txop_holder_ap_vld, "(port)current_txop_holder_ap_vld");
    sc_trace(mVcdFile, available_spaces_vo, "(port)available_spaces_vo");
    sc_trace(mVcdFile, vo_backoff_counter_i, "(port)vo_backoff_counter_i");
    sc_trace(mVcdFile, vo_backoff_counter_o, "(port)vo_backoff_counter_o");
    sc_trace(mVcdFile, vo_backoff_counter_o_ap_vld, "(port)vo_backoff_counter_o_ap_vld");
    sc_trace(mVcdFile, rand_state_i, "(port)rand_state_i");
    sc_trace(mVcdFile, rand_state_o, "(port)rand_state_o");
    sc_trace(mVcdFile, rand_state_o_ap_vld, "(port)rand_state_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_fu_44_p3, "tmp_fu_44_p3");
    sc_trace(mVcdFile, tmp_reg_80, "tmp_reg_80");
    sc_trace(mVcdFile, icmp_ln255_fu_56_p2, "icmp_ln255_fu_56_p2");
    sc_trace(mVcdFile, icmp_ln255_reg_84, "icmp_ln255_reg_84");
    sc_trace(mVcdFile, grp_random_int_gen_fu_32_ap_start, "grp_random_int_gen_fu_32_ap_start");
    sc_trace(mVcdFile, grp_random_int_gen_fu_32_ap_done, "grp_random_int_gen_fu_32_ap_done");
    sc_trace(mVcdFile, grp_random_int_gen_fu_32_ap_idle, "grp_random_int_gen_fu_32_ap_idle");
    sc_trace(mVcdFile, grp_random_int_gen_fu_32_ap_ready, "grp_random_int_gen_fu_32_ap_ready");
    sc_trace(mVcdFile, grp_random_int_gen_fu_32_rand_state_o, "grp_random_int_gen_fu_32_rand_state_o");
    sc_trace(mVcdFile, grp_random_int_gen_fu_32_rand_state_o_ap_vld, "grp_random_int_gen_fu_32_rand_state_o_ap_vld");
    sc_trace(mVcdFile, grp_random_int_gen_fu_32_ap_return, "grp_random_int_gen_fu_32_ap_return");
    sc_trace(mVcdFile, grp_random_int_gen_fu_32_ap_start_reg, "grp_random_int_gen_fu_32_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_predicate_op14_call_state2, "ap_predicate_op14_call_state2");
    sc_trace(mVcdFile, ap_block_state2_on_subcall_done, "ap_block_state2_on_subcall_done");
    sc_trace(mVcdFile, add_ln260_fu_62_p2, "add_ln260_fu_62_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

backoff_vo::~backoff_vo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_random_int_gen_fu_32;
}

void backoff_vo::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv10_F;
}

void backoff_vo::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_random_int_gen_fu_32_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             esl_seteq<1,1,1>(tmp_fu_44_p3.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(icmp_ln255_fu_56_p2.read(), ap_const_lv1_1))) {
            grp_random_int_gen_fu_32_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_random_int_gen_fu_32_ap_ready.read())) {
            grp_random_int_gen_fu_32_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(tmp_fu_44_p3.read(), ap_const_lv1_0))) {
        icmp_ln255_reg_84 = icmp_ln255_fu_56_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_reg_80 = available_spaces_vo.read().range(2, 2);
    }
}

void backoff_vo::thread_add_ln260_fu_62_p2() {
    add_ln260_fu_62_p2 = (!vo_backoff_counter_i.read().is_01() || !ap_const_lv10_3FF.is_01())? sc_lv<10>(): (sc_biguint<10>(vo_backoff_counter_i.read()) + sc_bigint<10>(ap_const_lv10_3FF));
}

void backoff_vo::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void backoff_vo::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void backoff_vo::thread_ap_block_state2_on_subcall_done() {
    ap_block_state2_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_random_int_gen_fu_32_ap_done.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_call_state2.read()));
}

void backoff_vo::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void backoff_vo::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void backoff_vo::thread_ap_predicate_op14_call_state2() {
    ap_predicate_op14_call_state2 = (esl_seteq<1,1,1>(tmp_reg_80.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln255_reg_84.read(), ap_const_lv1_1));
}

void backoff_vo::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void backoff_vo::thread_current_txop_holder() {
    current_txop_holder = ap_const_lv3_4;
}

void backoff_vo::thread_current_txop_holder_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_reg_80.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(icmp_ln255_reg_84.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        current_txop_holder_ap_vld = ap_const_logic_1;
    } else {
        current_txop_holder_ap_vld = ap_const_logic_0;
    }
}

void backoff_vo::thread_grp_random_int_gen_fu_32_ap_start() {
    grp_random_int_gen_fu_32_ap_start = grp_random_int_gen_fu_32_ap_start_reg.read();
}

void backoff_vo::thread_icmp_ln255_fu_56_p2() {
    icmp_ln255_fu_56_p2 = (!vo_backoff_counter_i.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(vo_backoff_counter_i.read() == ap_const_lv10_0);
}

void backoff_vo::thread_rand_state_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_reg_80.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(icmp_ln255_reg_84.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, grp_random_int_gen_fu_32_rand_state_o_ap_vld.read()))) {
        rand_state_o = grp_random_int_gen_fu_32_rand_state_o.read();
    } else {
        rand_state_o = rand_state_i.read();
    }
}

void backoff_vo::thread_rand_state_o_ap_vld() {
    rand_state_o_ap_vld = grp_random_int_gen_fu_32_rand_state_o_ap_vld.read();
}

void backoff_vo::thread_tmp_fu_44_p3() {
    tmp_fu_44_p3 = available_spaces_vo.read().range(2, 2);
}

void backoff_vo::thread_vo_backoff_counter_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_reg_80.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(icmp_ln255_reg_84.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        vo_backoff_counter_o = grp_random_int_gen_fu_32_ap_return.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(tmp_fu_44_p3.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(icmp_ln255_fu_56_p2.read(), ap_const_lv1_0))) {
        vo_backoff_counter_o = add_ln260_fu_62_p2.read();
    } else {
        vo_backoff_counter_o = vo_backoff_counter_i.read();
    }
}

void backoff_vo::thread_vo_backoff_counter_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_reg_80.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(icmp_ln255_reg_84.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(tmp_fu_44_p3.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(icmp_ln255_fu_56_p2.read(), ap_const_lv1_0)))) {
        vo_backoff_counter_o_ap_vld = ap_const_logic_1;
    } else {
        vo_backoff_counter_o_ap_vld = ap_const_logic_0;
    }
}

void backoff_vo::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

