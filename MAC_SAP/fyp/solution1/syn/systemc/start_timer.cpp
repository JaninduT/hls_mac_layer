// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "start_timer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic start_timer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic start_timer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> start_timer::ap_ST_fsm_state1 = "1";
const sc_lv<3> start_timer::ap_ST_fsm_state2 = "10";
const sc_lv<3> start_timer::ap_ST_fsm_state3 = "100";
const sc_lv<32> start_timer::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> start_timer::ap_const_lv32_1 = "1";
const sc_lv<32> start_timer::ap_const_lv32_2 = "10";
const sc_lv<20> start_timer::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<1> start_timer::ap_const_lv1_1 = "1";
const sc_lv<1> start_timer::ap_const_lv1_0 = "0";
const sc_lv<7> start_timer::ap_const_lv7_0 = "0000000";
const sc_lv<7> start_timer::ap_const_lv7_48 = "1001000";
const sc_lv<16> start_timer::ap_const_lv16_0 = "0000000000000000";
const sc_lv<16> start_timer::ap_const_lv16_1 = "1";
const sc_lv<9> start_timer::ap_const_lv9_1FE = "111111110";
const sc_lv<20> start_timer::ap_const_lv20_1 = "1";
const bool start_timer::ap_const_boolean_1 = true;

start_timer::start_timer(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln8_fu_114_p2);
    sensitive << ( zext_ln8_1_fu_110_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_61);
    sensitive << ( count_idle_read_read_fu_36_p2 );
    sensitive << ( icmp_ln8_fu_124_p2 );
    sensitive << ( medium_state_read_read_fu_42_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( count_idle_read_read_fu_36_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln8_fu_124_p2 );
    sensitive << ( medium_state_read_read_fu_42_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_timeout_write_assign_phi_fu_62_p4);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln8_fu_124_p2 );
    sensitive << ( ap_condition_61 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( count_idle_read_read_fu_36_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln8_fu_124_p2 );
    sensitive << ( medium_state_read_read_fu_42_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( count_idle_read_read_fu_36_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln8_fu_124_p2 );
    sensitive << ( medium_state_read_read_fu_42_p2 );
    sensitive << ( ap_phi_mux_timeout_write_assign_phi_fu_62_p4 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_count_idle_read_read_fu_36_p2);
    sensitive << ( count_idle );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_73_p2);
    sensitive << ( tc_fu_32 );

    SC_METHOD(thread_i_fu_130_p2);
    sensitive << ( i_0_reg_48 );

    SC_METHOD(thread_icmp_ln8_fu_124_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln8_fu_99_p1 );
    sensitive << ( sext_ln8_fu_120_p1 );

    SC_METHOD(thread_medium_state_read_read_fu_42_p2);
    sensitive << ( medium_state );
    sensitive << ( count_idle_read_read_fu_36_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln8_fu_124_p2 );

    SC_METHOD(thread_sext_ln8_1_fu_106_p1);
    sensitive << ( total_count_fu_28 );

    SC_METHOD(thread_sext_ln8_fu_120_p1);
    sensitive << ( add_ln8_fu_114_p2 );

    SC_METHOD(thread_zext_ln8_1_fu_110_p1);
    sensitive << ( sext_ln8_1_fu_106_p1 );

    SC_METHOD(thread_zext_ln8_fu_99_p1);
    sensitive << ( i_0_reg_48 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( count_idle_read_read_fu_36_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln8_fu_124_p2 );
    sensitive << ( medium_state_read_read_fu_42_p2 );

    ap_CS_fsm = "001";
    ap_return_preg = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "start_timer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, count_idle, "(port)count_idle");
    sc_trace(mVcdFile, medium_state, "(port)medium_state");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, count_idle_read_read_fu_36_p2, "count_idle_read_read_fu_36_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_130_p2, "i_fu_130_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_0_reg_48, "i_0_reg_48");
    sc_trace(mVcdFile, icmp_ln8_fu_124_p2, "icmp_ln8_fu_124_p2");
    sc_trace(mVcdFile, medium_state_read_read_fu_42_p2, "medium_state_read_read_fu_42_p2");
    sc_trace(mVcdFile, ap_phi_mux_timeout_write_assign_phi_fu_62_p4, "ap_phi_mux_timeout_write_assign_phi_fu_62_p4");
    sc_trace(mVcdFile, total_count_fu_28, "total_count_fu_28");
    sc_trace(mVcdFile, tc_fu_32, "tc_fu_32");
    sc_trace(mVcdFile, grp_fu_73_p2, "grp_fu_73_p2");
    sc_trace(mVcdFile, sext_ln8_1_fu_106_p1, "sext_ln8_1_fu_106_p1");
    sc_trace(mVcdFile, zext_ln8_1_fu_110_p1, "zext_ln8_1_fu_110_p1");
    sc_trace(mVcdFile, add_ln8_fu_114_p2, "add_ln8_fu_114_p2");
    sc_trace(mVcdFile, zext_ln8_fu_99_p1, "zext_ln8_fu_99_p1");
    sc_trace(mVcdFile, sext_ln8_fu_120_p1, "sext_ln8_fu_120_p1");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_61, "ap_condition_61");
#endif

    }
}

start_timer::~start_timer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void start_timer::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             ((esl_seteq<1,1,1>(count_idle_read_read_fu_36_p2.read(), ap_const_lv1_1) && 
               esl_seteq<1,1,1>(medium_state_read_read_fu_42_p2.read(), ap_const_lv1_0)) || 
              esl_seteq<1,1,1>(icmp_ln8_fu_124_p2.read(), ap_const_lv1_0)))) {
            ap_return_preg = ap_phi_mux_timeout_write_assign_phi_fu_62_p4.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         ((esl_seteq<1,1,1>(icmp_ln8_fu_124_p2.read(), ap_const_lv1_1) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, medium_state_read_read_fu_42_p2.read())) || 
          (esl_seteq<1,1,1>(icmp_ln8_fu_124_p2.read(), ap_const_lv1_1) && 
           esl_seteq<1,1,1>(count_idle_read_read_fu_36_p2.read(), ap_const_lv1_0))))) {
        i_0_reg_48 = i_fu_130_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_0_reg_48 = ap_const_lv20_0;
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(icmp_ln8_fu_124_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(count_idle_read_read_fu_36_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(icmp_ln8_fu_124_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, medium_state_read_read_fu_42_p2.read()) && 
          esl_seteq<1,1,1>(count_idle_read_read_fu_36_p2.read(), ap_const_lv1_1)))) {
        tc_fu_32 = grp_fu_73_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tc_fu_32 = ap_const_lv16_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        total_count_fu_28 = ap_const_lv7_48;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        total_count_fu_28 = ap_const_lv7_0;
    }
}

void start_timer::thread_add_ln8_fu_114_p2() {
    add_ln8_fu_114_p2 = (!zext_ln8_1_fu_110_p1.read().is_01() || !ap_const_lv9_1FE.is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln8_1_fu_110_p1.read()) + sc_bigint<9>(ap_const_lv9_1FE));
}

void start_timer::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void start_timer::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void start_timer::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void start_timer::thread_ap_condition_61() {
    ap_condition_61 = (esl_seteq<1,1,1>(icmp_ln8_fu_124_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(count_idle_read_read_fu_36_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(medium_state_read_read_fu_42_p2.read(), ap_const_lv1_0));
}

void start_timer::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          ((esl_seteq<1,1,1>(count_idle_read_read_fu_36_p2.read(), ap_const_lv1_1) && 
            esl_seteq<1,1,1>(medium_state_read_read_fu_42_p2.read(), ap_const_lv1_0)) || 
           esl_seteq<1,1,1>(icmp_ln8_fu_124_p2.read(), ap_const_lv1_0))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void start_timer::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void start_timer::thread_ap_phi_mux_timeout_write_assign_phi_fu_62_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        if (esl_seteq<1,1,1>(ap_condition_61.read(), ap_const_boolean_1)) {
            ap_phi_mux_timeout_write_assign_phi_fu_62_p4 = ap_const_lv1_0;
        } else if (esl_seteq<1,1,1>(icmp_ln8_fu_124_p2.read(), ap_const_lv1_0)) {
            ap_phi_mux_timeout_write_assign_phi_fu_62_p4 = ap_const_lv1_1;
        } else {
            ap_phi_mux_timeout_write_assign_phi_fu_62_p4 = "X";
        }
    } else {
        ap_phi_mux_timeout_write_assign_phi_fu_62_p4 = "X";
    }
}

void start_timer::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         ((esl_seteq<1,1,1>(count_idle_read_read_fu_36_p2.read(), ap_const_lv1_1) && 
           esl_seteq<1,1,1>(medium_state_read_read_fu_42_p2.read(), ap_const_lv1_0)) || 
          esl_seteq<1,1,1>(icmp_ln8_fu_124_p2.read(), ap_const_lv1_0)))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void start_timer::thread_ap_return() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         ((esl_seteq<1,1,1>(count_idle_read_read_fu_36_p2.read(), ap_const_lv1_1) && 
           esl_seteq<1,1,1>(medium_state_read_read_fu_42_p2.read(), ap_const_lv1_0)) || 
          esl_seteq<1,1,1>(icmp_ln8_fu_124_p2.read(), ap_const_lv1_0)))) {
        ap_return = ap_phi_mux_timeout_write_assign_phi_fu_62_p4.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void start_timer::thread_count_idle_read_read_fu_36_p2() {
    count_idle_read_read_fu_36_p2 = count_idle.read();
}

void start_timer::thread_grp_fu_73_p2() {
    grp_fu_73_p2 = (!tc_fu_32.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(tc_fu_32.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void start_timer::thread_i_fu_130_p2() {
    i_fu_130_p2 = (!i_0_reg_48.read().is_01() || !ap_const_lv20_1.is_01())? sc_lv<20>(): (sc_biguint<20>(i_0_reg_48.read()) + sc_biguint<20>(ap_const_lv20_1));
}

void start_timer::thread_icmp_ln8_fu_124_p2() {
    icmp_ln8_fu_124_p2 = (!zext_ln8_fu_99_p1.read().is_01() || !sext_ln8_fu_120_p1.read().is_01())? sc_lv<1>(): (sc_bigint<21>(zext_ln8_fu_99_p1.read()) < sc_bigint<21>(sext_ln8_fu_120_p1.read()));
}

void start_timer::thread_medium_state_read_read_fu_42_p2() {
    medium_state_read_read_fu_42_p2 = medium_state.read();
}

void start_timer::thread_sext_ln8_1_fu_106_p1() {
    sext_ln8_1_fu_106_p1 = esl_sext<8,7>(total_count_fu_28.read());
}

void start_timer::thread_sext_ln8_fu_120_p1() {
    sext_ln8_fu_120_p1 = esl_sext<21,9>(add_ln8_fu_114_p2.read());
}

void start_timer::thread_zext_ln8_1_fu_110_p1() {
    zext_ln8_1_fu_110_p1 = esl_zext<9,8>(sext_ln8_1_fu_106_p1.read());
}

void start_timer::thread_zext_ln8_fu_99_p1() {
    zext_ln8_fu_99_p1 = esl_zext<21,20>(i_0_reg_48.read());
}

void start_timer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && ((esl_seteq<1,1,1>(count_idle_read_read_fu_36_p2.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(medium_state_read_read_fu_42_p2.read(), ap_const_lv1_0)) || 
  esl_seteq<1,1,1>(icmp_ln8_fu_124_p2.read(), ap_const_lv1_0)))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

