// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ma_unitdatax_status_s_HH_
#define _ma_unitdatax_status_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct ma_unitdatax_status_s : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<3> > trans_sts;


    // Module declarations
    ma_unitdatax_status_s(sc_module_name name);
    SC_HAS_PROCESS(ma_unitdatax_status_s);

    ~ma_unitdatax_status_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > successful;
    sc_signal< sc_lv<8> > unsupported_priority;
    sc_signal< sc_lv<8> > unsupported_service_s;
    sc_signal< sc_lv<8> > unsupported_channel_s;
    sc_signal< sc_lv<8> > unsupported_tx_param;
    sc_signal< sc_lv<8> > queue_full;
    sc_signal< sc_lv<8> > add_ln14_fu_148_p2;
    sc_signal< sc_lv<1> > icmp_ln13_fu_34_p2;
    sc_signal< sc_lv<8> > add_ln16_fu_132_p2;
    sc_signal< sc_lv<1> > icmp_ln15_fu_40_p2;
    sc_signal< sc_lv<8> > add_ln18_fu_116_p2;
    sc_signal< sc_lv<1> > icmp_ln17_fu_46_p2;
    sc_signal< sc_lv<8> > add_ln20_fu_100_p2;
    sc_signal< sc_lv<1> > icmp_ln19_fu_52_p2;
    sc_signal< sc_lv<8> > add_ln22_fu_84_p2;
    sc_signal< sc_lv<1> > icmp_ln21_fu_58_p2;
    sc_signal< sc_lv<8> > add_ln24_fu_68_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<8> ap_const_lv8_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln14_fu_148_p2();
    void thread_add_ln16_fu_132_p2();
    void thread_add_ln18_fu_116_p2();
    void thread_add_ln20_fu_100_p2();
    void thread_add_ln22_fu_84_p2();
    void thread_add_ln24_fu_68_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_icmp_ln13_fu_34_p2();
    void thread_icmp_ln15_fu_40_p2();
    void thread_icmp_ln17_fu_46_p2();
    void thread_icmp_ln19_fu_52_p2();
    void thread_icmp_ln21_fu_58_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
