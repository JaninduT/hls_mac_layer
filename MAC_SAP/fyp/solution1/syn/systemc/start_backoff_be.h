// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _start_backoff_be_HH_
#define _start_backoff_be_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "random_int_gen.h"

namespace ap_rtl {

struct start_backoff_be : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1> > invoke_reason;
    sc_in< sc_lv<10> > CW_be_i;
    sc_out< sc_lv<10> > CW_be_o;
    sc_out< sc_logic > CW_be_o_ap_vld;
    sc_in< sc_lv<32> > rand_state_i;
    sc_out< sc_lv<32> > rand_state_o;
    sc_out< sc_logic > rand_state_o_ap_vld;
    sc_out< sc_lv<10> > be_backoff_counter;
    sc_out< sc_logic > be_backoff_counter_ap_vld;


    // Module declarations
    start_backoff_be(sc_module_name name);
    SC_HAS_PROCESS(start_backoff_be);

    ~start_backoff_be();

    sc_trace_file* mVcdFile;

    random_int_gen* grp_random_int_gen_fu_37;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > grp_random_int_gen_fu_37_ap_start;
    sc_signal< sc_logic > grp_random_int_gen_fu_37_ap_done;
    sc_signal< sc_logic > grp_random_int_gen_fu_37_ap_idle;
    sc_signal< sc_logic > grp_random_int_gen_fu_37_ap_ready;
    sc_signal< sc_lv<32> > grp_random_int_gen_fu_37_rand_state_o;
    sc_signal< sc_logic > grp_random_int_gen_fu_37_rand_state_o_ap_vld;
    sc_signal< sc_lv<10> > grp_random_int_gen_fu_37_ap_return;
    sc_signal< sc_lv<10> > CW_be_loc_2_reg_24;
    sc_signal< sc_lv<1> > invoke_reason_read_read_fu_18_p2;
    sc_signal< sc_lv<1> > icmp_ln346_fu_56_p2;
    sc_signal< sc_lv<10> > or_ln347_fu_68_p2;
    sc_signal< sc_logic > grp_random_int_gen_fu_37_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > shl_ln347_fu_62_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<10> ap_const_lv10_F;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<10> ap_const_lv10_3FF;
    static const sc_lv<10> ap_const_lv10_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_CW_be_o();
    void thread_CW_be_o_ap_vld();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_be_backoff_counter();
    void thread_be_backoff_counter_ap_vld();
    void thread_grp_random_int_gen_fu_37_ap_start();
    void thread_icmp_ln346_fu_56_p2();
    void thread_invoke_reason_read_read_fu_18_p2();
    void thread_or_ln347_fu_68_p2();
    void thread_rand_state_o();
    void thread_rand_state_o_ap_vld();
    void thread_shl_ln347_fu_62_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
