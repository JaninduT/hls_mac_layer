// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _backoff_vo_HH_
#define _backoff_vo_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "random_int_gen.h"

namespace ap_rtl {

struct backoff_vo : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > current_txop_holder;
    sc_out< sc_logic > current_txop_holder_ap_vld;
    sc_in< sc_lv<3> > available_spaces_vo;
    sc_in< sc_lv<10> > vo_backoff_counter_i;
    sc_out< sc_lv<10> > vo_backoff_counter_o;
    sc_out< sc_logic > vo_backoff_counter_o_ap_vld;
    sc_in< sc_lv<32> > rand_state_i;
    sc_out< sc_lv<32> > rand_state_o;
    sc_out< sc_logic > rand_state_o_ap_vld;
    sc_signal< sc_lv<10> > ap_var_for_const0;


    // Module declarations
    backoff_vo(sc_module_name name);
    SC_HAS_PROCESS(backoff_vo);

    ~backoff_vo();

    sc_trace_file* mVcdFile;

    random_int_gen* grp_random_int_gen_fu_32;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > tmp_fu_44_p3;
    sc_signal< sc_lv<1> > tmp_reg_80;
    sc_signal< sc_lv<1> > icmp_ln255_fu_56_p2;
    sc_signal< sc_lv<1> > icmp_ln255_reg_84;
    sc_signal< sc_logic > grp_random_int_gen_fu_32_ap_start;
    sc_signal< sc_logic > grp_random_int_gen_fu_32_ap_done;
    sc_signal< sc_logic > grp_random_int_gen_fu_32_ap_idle;
    sc_signal< sc_logic > grp_random_int_gen_fu_32_ap_ready;
    sc_signal< sc_lv<32> > grp_random_int_gen_fu_32_rand_state_o;
    sc_signal< sc_logic > grp_random_int_gen_fu_32_rand_state_o_ap_vld;
    sc_signal< sc_lv<10> > grp_random_int_gen_fu_32_ap_return;
    sc_signal< sc_logic > grp_random_int_gen_fu_32_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< bool > ap_predicate_op14_call_state2;
    sc_signal< bool > ap_block_state2_on_subcall_done;
    sc_signal< sc_lv<10> > add_ln260_fu_62_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_F;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_3FF;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln260_fu_62_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state2_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op14_call_state2();
    void thread_ap_ready();
    void thread_current_txop_holder();
    void thread_current_txop_holder_ap_vld();
    void thread_grp_random_int_gen_fu_32_ap_start();
    void thread_icmp_ln255_fu_56_p2();
    void thread_rand_state_o();
    void thread_rand_state_o_ap_vld();
    void thread_tmp_fu_44_p3();
    void thread_vo_backoff_counter_o();
    void thread_vo_backoff_counter_o_ap_vld();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
