// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _phy_data_confirm_HH_
#define _phy_data_confirm_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "phy_data_request.h"
#include "phy_data_confirm_bkb.h"

namespace ap_rtl {

struct phy_data_confirm : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > frame_to_transfer_address0;
    sc_out< sc_logic > frame_to_transfer_ce0;
    sc_in< sc_lv<8> > frame_to_transfer_q0;


    // Module declarations
    phy_data_confirm(sc_module_name name);
    SC_HAS_PROCESS(phy_data_confirm);

    ~phy_data_confirm();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    phy_data_confirm_bkb* frame_U;
    phy_data_request* grp_phy_data_request_fu_79;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > count;
    sc_signal< sc_lv<7> > frame_address0;
    sc_signal< sc_logic > frame_ce0;
    sc_signal< sc_logic > frame_we0;
    sc_signal< sc_lv<8> > frame_q0;
    sc_signal< sc_lv<1> > stop_tx;
    sc_signal< sc_lv<7> > count_load_reg_141;
    sc_signal< sc_lv<1> > icmp_ln10_fu_90_p2;
    sc_signal< sc_lv<1> > icmp_ln10_reg_146;
    sc_signal< sc_lv<7> > q_fu_102_p2;
    sc_signal< sc_lv<7> > q_reg_153;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln12_fu_108_p1;
    sc_signal< sc_lv<64> > zext_ln12_reg_158;
    sc_signal< sc_lv<1> > icmp_ln11_fu_96_p2;
    sc_signal< sc_lv<7> > add_ln15_fu_113_p2;
    sc_signal< sc_lv<7> > add_ln15_reg_168;
    sc_signal< sc_lv<1> > icmp_ln16_fu_119_p2;
    sc_signal< sc_lv<1> > icmp_ln16_reg_174;
    sc_signal< sc_logic > grp_phy_data_request_fu_79_ap_start;
    sc_signal< sc_logic > grp_phy_data_request_fu_79_ap_done;
    sc_signal< sc_logic > grp_phy_data_request_fu_79_ap_idle;
    sc_signal< sc_logic > grp_phy_data_request_fu_79_ap_ready;
    sc_signal< sc_lv<7> > grp_phy_data_request_fu_79_data_address0;
    sc_signal< sc_logic > grp_phy_data_request_fu_79_data_ce0;
    sc_signal< sc_lv<7> > q_0_reg_57;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<7> > ap_phi_mux_count_new_0_phi_fu_72_p4;
    sc_signal< sc_lv<7> > count_new_0_reg_68;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< bool > ap_block_state4_on_subcall_done;
    sc_signal< sc_logic > grp_phy_data_request_fu_79_ap_start_reg;
    sc_signal< sc_lv<1> > stop_tx_load_load_fu_125_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln15_fu_113_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state4_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_count_new_0_phi_fu_72_p4();
    void thread_ap_ready();
    void thread_frame_address0();
    void thread_frame_ce0();
    void thread_frame_to_transfer_address0();
    void thread_frame_to_transfer_ce0();
    void thread_frame_we0();
    void thread_grp_phy_data_request_fu_79_ap_start();
    void thread_icmp_ln10_fu_90_p2();
    void thread_icmp_ln11_fu_96_p2();
    void thread_icmp_ln16_fu_119_p2();
    void thread_q_fu_102_p2();
    void thread_stop_tx_load_load_fu_125_p1();
    void thread_zext_ln12_fu_108_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
