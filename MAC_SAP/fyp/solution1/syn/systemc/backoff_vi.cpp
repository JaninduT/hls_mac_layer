// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "backoff_vi.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic backoff_vi::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic backoff_vi::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<17> backoff_vi::ap_ST_fsm_state1 = "1";
const sc_lv<17> backoff_vi::ap_ST_fsm_state2 = "10";
const sc_lv<17> backoff_vi::ap_ST_fsm_state3 = "100";
const sc_lv<17> backoff_vi::ap_ST_fsm_state4 = "1000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state5 = "10000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state6 = "100000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state7 = "1000000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state8 = "10000000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state9 = "100000000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state10 = "1000000000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state11 = "10000000000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state12 = "100000000000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<17> backoff_vi::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<32> backoff_vi::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<10> backoff_vi::ap_const_lv10_0 = "0000000000";
const sc_lv<1> backoff_vi::ap_const_lv1_1 = "1";
const sc_lv<1> backoff_vi::ap_const_lv1_0 = "0";
const sc_lv<32> backoff_vi::ap_const_lv32_1 = "1";
const sc_lv<32> backoff_vi::ap_const_lv32_6 = "110";
const sc_lv<32> backoff_vi::ap_const_lv32_7 = "111";
const sc_lv<32> backoff_vi::ap_const_lv32_B = "1011";
const sc_lv<32> backoff_vi::ap_const_lv32_F = "1111";
const sc_lv<32> backoff_vi::ap_const_lv32_10 = "10000";
const sc_lv<3> backoff_vi::ap_const_lv3_3 = "11";
const sc_lv<32> backoff_vi::ap_const_lv32_30000000 = "110000000000000000000000000000";
const sc_lv<32> backoff_vi::ap_const_lv32_8 = "1000";
const sc_lv<32> backoff_vi::ap_const_lv32_C = "1100";
const sc_lv<32> backoff_vi::ap_const_lv32_2 = "10";
const sc_lv<10> backoff_vi::ap_const_lv10_3FF = "1111111111";
const sc_lv<10> backoff_vi::ap_const_lv10_1 = "1";
const sc_lv<32> backoff_vi::ap_const_lv32_BC8F = "1011110010001111";
const sc_lv<32> backoff_vi::ap_const_lv32_1F = "11111";
const sc_lv<16> backoff_vi::ap_const_lv16_F = "1111";
const sc_lv<32> backoff_vi::ap_const_lv32_17 = "10111";
const sc_lv<32> backoff_vi::ap_const_lv32_1E = "11110";
const sc_lv<9> backoff_vi::ap_const_lv9_181 = "110000001";
const sc_lv<8> backoff_vi::ap_const_lv8_7F = "1111111";
const sc_lv<32> backoff_vi::ap_const_lv32_18 = "11000";
const sc_lv<32> backoff_vi::ap_const_lv32_21 = "100001";
const bool backoff_vi::ap_const_boolean_1 = true;

backoff_vi::backoff_vi(sc_module_name name) : sc_module(name), mVcdFile(0) {
    backoff_vi_fmul_3bkb_U1 = new backoff_vi_fmul_3bkb<1,4,32,32,32>("backoff_vi_fmul_3bkb_U1");
    backoff_vi_fmul_3bkb_U1->clk(ap_clk);
    backoff_vi_fmul_3bkb_U1->reset(ap_rst);
    backoff_vi_fmul_3bkb_U1->din0(grp_fu_110_p0);
    backoff_vi_fmul_3bkb_U1->din1(grp_fu_110_p1);
    backoff_vi_fmul_3bkb_U1->ce(ap_var_for_const0);
    backoff_vi_fmul_3bkb_U1->dout(grp_fu_110_p2);
    backoff_vi_uitofpcud_U2 = new backoff_vi_uitofpcud<1,6,32,32>("backoff_vi_uitofpcud_U2");
    backoff_vi_uitofpcud_U2->clk(ap_clk);
    backoff_vi_uitofpcud_U2->reset(ap_rst);
    backoff_vi_uitofpcud_U2->din0(x_2_reg_448);
    backoff_vi_uitofpcud_U2->ce(ap_var_for_const0);
    backoff_vi_uitofpcud_U2->dout(grp_fu_115_p1);
    backoff_vi_sitofpdEe_U3 = new backoff_vi_sitofpdEe<1,6,32,32>("backoff_vi_sitofpdEe_U3");
    backoff_vi_sitofpdEe_U3->clk(ap_clk);
    backoff_vi_sitofpdEe_U3->reset(ap_rst);
    backoff_vi_sitofpdEe_U3->din0(grp_fu_118_p0);
    backoff_vi_sitofpdEe_U3->ce(ap_var_for_const0);
    backoff_vi_sitofpdEe_U3->dout(grp_fu_118_p1);
    backoff_vi_mul_mueOg_U4 = new backoff_vi_mul_mueOg<1,1,17,17,32>("backoff_vi_mul_mueOg_U4");
    backoff_vi_mul_mueOg_U4->din0(high_2_fu_405_p0);
    backoff_vi_mul_mueOg_U4->din1(high_2_fu_405_p1);
    backoff_vi_mul_mueOg_U4->dout(high_2_fu_405_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln10_fu_225_p2);
    sensitive << ( trunc_ln_reg_443 );

    SC_METHOD(thread_add_ln228_fu_131_p2);
    sensitive << ( vi_backoff_counter );

    SC_METHOD(thread_add_ln339_fu_304_p2);
    sensitive << ( zext_ln339_fu_300_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_60);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln219_fu_125_p2 );
    sensitive << ( icmp_ln220_fu_143_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_current_txop_holder_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( current_txop_holder_i );
    sensitive << ( icmp_ln219_fu_125_p2 );
    sensitive << ( icmp_ln220_fu_143_p2 );

    SC_METHOD(thread_current_txop_holder_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln219_fu_125_p2 );
    sensitive << ( icmp_ln220_fu_143_p2 );

    SC_METHOD(thread_grp_fu_110_p0);
    sensitive << ( tmp_i_i_reg_458 );
    sensitive << ( tmp_i_reg_463 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_110_p1);
    sensitive << ( tmp_4_i_i_reg_468 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_118_p0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( empty_reg_100 );

    SC_METHOD(thread_high_2_fu_405_p0);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_high_2_fu_405_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( high_2_fu_405_p10 );

    SC_METHOD(thread_high_2_fu_405_p10);
    sensitive << ( high_fu_195_p4 );

    SC_METHOD(thread_high_fu_195_p4);
    sensitive << ( rand_state );

    SC_METHOD(thread_icmp_ln219_fu_125_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( vi_backoff_counter );

    SC_METHOD(thread_icmp_ln220_fu_143_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( current_txop_holder_i );
    sensitive << ( icmp_ln219_fu_125_p2 );

    SC_METHOD(thread_icmp_ln283_fu_153_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( CW_vi );
    sensitive << ( icmp_ln219_fu_125_p2 );
    sensitive << ( icmp_ln220_fu_143_p2 );

    SC_METHOD(thread_low_1_fu_189_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( low_1_fu_189_p00 );

    SC_METHOD(thread_low_1_fu_189_p00);
    sensitive << ( low_fu_181_p1 );

    SC_METHOD(thread_low_1_fu_189_p2);
    sensitive << ( low_1_fu_189_p0 );

    SC_METHOD(thread_low_fu_181_p1);
    sensitive << ( rand_state );

    SC_METHOD(thread_mantissa_V_fu_324_p4);
    sensitive << ( tmp_V_1_reg_473 );

    SC_METHOD(thread_or_ln284_fu_165_p2);
    sensitive << ( shl_ln284_fu_159_p2 );

    SC_METHOD(thread_p_Val2_s_fu_282_p1);
    sensitive << ( grp_fu_110_p2 );

    SC_METHOD(thread_r_V_1_fu_364_p2);
    sensitive << ( zext_ln682_fu_333_p1 );
    sensitive << ( zext_ln1287_fu_354_p1 );

    SC_METHOD(thread_r_V_fu_358_p2);
    sensitive << ( mantissa_V_fu_324_p4 );
    sensitive << ( sext_ln1311_2_fu_350_p1 );

    SC_METHOD(thread_select_ln1312_fu_392_p3);
    sensitive << ( isNeg_reg_483 );
    sensitive << ( zext_ln662_fu_378_p1 );
    sensitive << ( tmp_2_fu_382_p4 );

    SC_METHOD(thread_sext_ln1311_1_fu_346_p1);
    sensitive << ( ush_fu_340_p3 );

    SC_METHOD(thread_sext_ln1311_2_fu_350_p1);
    sensitive << ( ush_fu_340_p3 );

    SC_METHOD(thread_sext_ln1311_fu_337_p1);
    sensitive << ( sub_ln1311_reg_489 );

    SC_METHOD(thread_shl_ln284_fu_159_p2);
    sensitive << ( CW_vi );

    SC_METHOD(thread_sub_ln1311_fu_318_p2);
    sensitive << ( tmp_V_fu_286_p4 );

    SC_METHOD(thread_tmp_2_fu_382_p4);
    sensitive << ( r_V_1_fu_364_p2 );

    SC_METHOD(thread_tmp_3_fu_370_p3);
    sensitive << ( r_V_fu_358_p2 );

    SC_METHOD(thread_tmp_V_1_fu_296_p1);
    sensitive << ( p_Val2_s_fu_282_p1 );

    SC_METHOD(thread_tmp_V_fu_286_p4);
    sensitive << ( p_Val2_s_fu_282_p1 );

    SC_METHOD(thread_tmp_fu_253_p3);
    sensitive << ( x_1_fu_240_p2 );

    SC_METHOD(thread_trunc_ln11_fu_245_p1);
    sensitive << ( x_1_fu_240_p2 );

    SC_METHOD(thread_trunc_ln9_fu_218_p1);
    sensitive << ( high_2_reg_438 );

    SC_METHOD(thread_ush_fu_340_p3);
    sensitive << ( add_ln339_reg_478 );
    sensitive << ( isNeg_reg_483 );
    sensitive << ( sext_ln1311_fu_337_p1 );

    SC_METHOD(thread_x_1_fu_240_p2);
    sensitive << ( low_1_reg_433 );
    sensitive << ( x_fu_234_p2 );

    SC_METHOD(thread_x_2_fu_265_p2);
    sensitive << ( zext_ln12_fu_249_p1 );
    sensitive << ( zext_ln12_1_fu_261_p1 );

    SC_METHOD(thread_x_fu_234_p2);
    sensitive << ( zext_ln10_fu_221_p1 );
    sensitive << ( zext_ln10_1_fu_230_p1 );

    SC_METHOD(thread_zext_ln10_1_fu_230_p1);
    sensitive << ( add_ln10_fu_225_p2 );

    SC_METHOD(thread_zext_ln10_fu_221_p1);
    sensitive << ( trunc_ln9_fu_218_p1 );

    SC_METHOD(thread_zext_ln1287_fu_354_p1);
    sensitive << ( sext_ln1311_1_fu_346_p1 );

    SC_METHOD(thread_zext_ln12_1_fu_261_p1);
    sensitive << ( tmp_fu_253_p3 );

    SC_METHOD(thread_zext_ln12_fu_249_p1);
    sensitive << ( trunc_ln11_fu_245_p1 );

    SC_METHOD(thread_zext_ln339_fu_300_p1);
    sensitive << ( tmp_V_fu_286_p4 );

    SC_METHOD(thread_zext_ln662_fu_378_p1);
    sensitive << ( tmp_3_fu_370_p3 );

    SC_METHOD(thread_zext_ln682_fu_333_p1);
    sensitive << ( mantissa_V_fu_324_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln219_fu_125_p2 );
    sensitive << ( icmp_ln220_fu_143_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000001";
    vi_backoff_counter = "0000000000";
    CW_vi = "0000001111";
    rand_state = "00000111010110111100110100010101";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "backoff_vi_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, current_txop_holder_i, "(port)current_txop_holder_i");
    sc_trace(mVcdFile, current_txop_holder_o, "(port)current_txop_holder_o");
    sc_trace(mVcdFile, current_txop_holder_o_ap_vld, "(port)current_txop_holder_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, vi_backoff_counter, "vi_backoff_counter");
    sc_trace(mVcdFile, CW_vi, "CW_vi");
    sc_trace(mVcdFile, rand_state, "rand_state");
    sc_trace(mVcdFile, icmp_ln219_fu_125_p2, "icmp_ln219_fu_125_p2");
    sc_trace(mVcdFile, icmp_ln219_reg_412, "icmp_ln219_reg_412");
    sc_trace(mVcdFile, icmp_ln220_fu_143_p2, "icmp_ln220_fu_143_p2");
    sc_trace(mVcdFile, icmp_ln220_reg_416, "icmp_ln220_reg_416");
    sc_trace(mVcdFile, or_ln284_fu_165_p2, "or_ln284_fu_165_p2");
    sc_trace(mVcdFile, icmp_ln283_fu_153_p2, "icmp_ln283_fu_153_p2");
    sc_trace(mVcdFile, low_1_fu_189_p2, "low_1_fu_189_p2");
    sc_trace(mVcdFile, low_1_reg_433, "low_1_reg_433");
    sc_trace(mVcdFile, high_2_fu_405_p2, "high_2_fu_405_p2");
    sc_trace(mVcdFile, high_2_reg_438, "high_2_reg_438");
    sc_trace(mVcdFile, trunc_ln_reg_443, "trunc_ln_reg_443");
    sc_trace(mVcdFile, x_2_fu_265_p2, "x_2_fu_265_p2");
    sc_trace(mVcdFile, x_2_reg_448, "x_2_reg_448");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_115_p1, "grp_fu_115_p1");
    sc_trace(mVcdFile, tmp_i_i_reg_458, "tmp_i_i_reg_458");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_118_p1, "grp_fu_118_p1");
    sc_trace(mVcdFile, tmp_i_reg_463, "tmp_i_reg_463");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_fu_110_p2, "grp_fu_110_p2");
    sc_trace(mVcdFile, tmp_4_i_i_reg_468, "tmp_4_i_i_reg_468");
    sc_trace(mVcdFile, tmp_V_1_fu_296_p1, "tmp_V_1_fu_296_p1");
    sc_trace(mVcdFile, tmp_V_1_reg_473, "tmp_V_1_reg_473");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, add_ln339_fu_304_p2, "add_ln339_fu_304_p2");
    sc_trace(mVcdFile, add_ln339_reg_478, "add_ln339_reg_478");
    sc_trace(mVcdFile, isNeg_reg_483, "isNeg_reg_483");
    sc_trace(mVcdFile, sub_ln1311_fu_318_p2, "sub_ln1311_fu_318_p2");
    sc_trace(mVcdFile, sub_ln1311_reg_489, "sub_ln1311_reg_489");
    sc_trace(mVcdFile, empty_reg_100, "empty_reg_100");
    sc_trace(mVcdFile, add_ln228_fu_131_p2, "add_ln228_fu_131_p2");
    sc_trace(mVcdFile, select_ln1312_fu_392_p3, "select_ln1312_fu_392_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, grp_fu_110_p0, "grp_fu_110_p0");
    sc_trace(mVcdFile, grp_fu_110_p1, "grp_fu_110_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_118_p0, "grp_fu_118_p0");
    sc_trace(mVcdFile, shl_ln284_fu_159_p2, "shl_ln284_fu_159_p2");
    sc_trace(mVcdFile, low_fu_181_p1, "low_fu_181_p1");
    sc_trace(mVcdFile, low_1_fu_189_p0, "low_1_fu_189_p0");
    sc_trace(mVcdFile, high_fu_195_p4, "high_fu_195_p4");
    sc_trace(mVcdFile, trunc_ln9_fu_218_p1, "trunc_ln9_fu_218_p1");
    sc_trace(mVcdFile, add_ln10_fu_225_p2, "add_ln10_fu_225_p2");
    sc_trace(mVcdFile, zext_ln10_fu_221_p1, "zext_ln10_fu_221_p1");
    sc_trace(mVcdFile, zext_ln10_1_fu_230_p1, "zext_ln10_1_fu_230_p1");
    sc_trace(mVcdFile, x_fu_234_p2, "x_fu_234_p2");
    sc_trace(mVcdFile, x_1_fu_240_p2, "x_1_fu_240_p2");
    sc_trace(mVcdFile, trunc_ln11_fu_245_p1, "trunc_ln11_fu_245_p1");
    sc_trace(mVcdFile, tmp_fu_253_p3, "tmp_fu_253_p3");
    sc_trace(mVcdFile, zext_ln12_fu_249_p1, "zext_ln12_fu_249_p1");
    sc_trace(mVcdFile, zext_ln12_1_fu_261_p1, "zext_ln12_1_fu_261_p1");
    sc_trace(mVcdFile, p_Val2_s_fu_282_p1, "p_Val2_s_fu_282_p1");
    sc_trace(mVcdFile, tmp_V_fu_286_p4, "tmp_V_fu_286_p4");
    sc_trace(mVcdFile, zext_ln339_fu_300_p1, "zext_ln339_fu_300_p1");
    sc_trace(mVcdFile, mantissa_V_fu_324_p4, "mantissa_V_fu_324_p4");
    sc_trace(mVcdFile, sext_ln1311_fu_337_p1, "sext_ln1311_fu_337_p1");
    sc_trace(mVcdFile, ush_fu_340_p3, "ush_fu_340_p3");
    sc_trace(mVcdFile, sext_ln1311_1_fu_346_p1, "sext_ln1311_1_fu_346_p1");
    sc_trace(mVcdFile, sext_ln1311_2_fu_350_p1, "sext_ln1311_2_fu_350_p1");
    sc_trace(mVcdFile, zext_ln682_fu_333_p1, "zext_ln682_fu_333_p1");
    sc_trace(mVcdFile, zext_ln1287_fu_354_p1, "zext_ln1287_fu_354_p1");
    sc_trace(mVcdFile, r_V_fu_358_p2, "r_V_fu_358_p2");
    sc_trace(mVcdFile, tmp_3_fu_370_p3, "tmp_3_fu_370_p3");
    sc_trace(mVcdFile, r_V_1_fu_364_p2, "r_V_1_fu_364_p2");
    sc_trace(mVcdFile, zext_ln662_fu_378_p1, "zext_ln662_fu_378_p1");
    sc_trace(mVcdFile, tmp_2_fu_382_p4, "tmp_2_fu_382_p4");
    sc_trace(mVcdFile, high_2_fu_405_p0, "high_2_fu_405_p0");
    sc_trace(mVcdFile, high_2_fu_405_p1, "high_2_fu_405_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, high_2_fu_405_p10, "high_2_fu_405_p10");
    sc_trace(mVcdFile, low_1_fu_189_p00, "low_1_fu_189_p00");
    sc_trace(mVcdFile, ap_condition_60, "ap_condition_60");
#endif

    }
    mHdltvinHandle.open("backoff_vi.hdltvin.dat");
    mHdltvoutHandle.open("backoff_vi.hdltvout.dat");
}

backoff_vi::~backoff_vi() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete backoff_vi_fmul_3bkb_U1;
    delete backoff_vi_uitofpcud_U2;
    delete backoff_vi_sitofpdEe_U3;
    delete backoff_vi_mul_mueOg_U4;
}

void backoff_vi::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void backoff_vi::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_condition_60.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln283_fu_153_p2.read())) {
            empty_reg_100 = CW_vi.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln283_fu_153_p2.read())) {
            empty_reg_100 = or_ln284_fu_165_p2.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(icmp_ln219_reg_412.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_ln220_reg_416.read(), ap_const_lv1_0))) {
        vi_backoff_counter = select_ln1312_fu_392_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(icmp_ln219_fu_125_p2.read(), ap_const_lv1_0))) {
        vi_backoff_counter = add_ln228_fu_131_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln219_fu_125_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(icmp_ln220_fu_143_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln283_fu_153_p2.read()))) {
        CW_vi = or_ln284_fu_165_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        add_ln339_reg_478 = add_ln339_fu_304_p2.read();
        isNeg_reg_483 = add_ln339_fu_304_p2.read().range(8, 8);
        sub_ln1311_reg_489 = sub_ln1311_fu_318_p2.read();
        tmp_V_1_reg_473 = tmp_V_1_fu_296_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln219_fu_125_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(icmp_ln220_fu_143_p2.read(), ap_const_lv1_0))) {
        high_2_reg_438 = high_2_fu_405_p2.read();
        low_1_reg_433 = low_1_fu_189_p2.read();
        trunc_ln_reg_443 = high_2_fu_405_p2.read().range(31, 16);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        icmp_ln219_reg_412 = icmp_ln219_fu_125_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln219_fu_125_p2.read(), ap_const_lv1_1))) {
        icmp_ln220_reg_416 = icmp_ln220_fu_143_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        rand_state = x_2_fu_265_p2.read();
        x_2_reg_448 = x_2_fu_265_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        tmp_4_i_i_reg_468 = grp_fu_110_p2.read();
        tmp_i_reg_463 = grp_fu_118_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_i_i_reg_458 = grp_fu_115_p1.read();
    }
}

void backoff_vi::thread_add_ln10_fu_225_p2() {
    add_ln10_fu_225_p2 = (!ap_const_lv16_F.is_01() || !trunc_ln_reg_443.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_F) + sc_biguint<16>(trunc_ln_reg_443.read()));
}

void backoff_vi::thread_add_ln228_fu_131_p2() {
    add_ln228_fu_131_p2 = (!vi_backoff_counter.read().is_01() || !ap_const_lv10_3FF.is_01())? sc_lv<10>(): (sc_biguint<10>(vi_backoff_counter.read()) + sc_bigint<10>(ap_const_lv10_3FF));
}

void backoff_vi::thread_add_ln339_fu_304_p2() {
    add_ln339_fu_304_p2 = (!ap_const_lv9_181.is_01() || !zext_ln339_fu_300_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_181) + sc_biguint<9>(zext_ln339_fu_300_p1.read()));
}

void backoff_vi::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void backoff_vi::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void backoff_vi::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void backoff_vi::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void backoff_vi::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void backoff_vi::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void backoff_vi::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void backoff_vi::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void backoff_vi::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void backoff_vi::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void backoff_vi::thread_ap_condition_60() {
    ap_condition_60 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln219_fu_125_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(icmp_ln220_fu_143_p2.read(), ap_const_lv1_0));
}

void backoff_vi::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void backoff_vi::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void backoff_vi::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void backoff_vi::thread_current_txop_holder_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(icmp_ln219_fu_125_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_ln220_fu_143_p2.read(), ap_const_lv1_1))) {
        current_txop_holder_o = ap_const_lv3_3;
    } else {
        current_txop_holder_o = current_txop_holder_i.read();
    }
}

void backoff_vi::thread_current_txop_holder_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(icmp_ln219_fu_125_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_ln220_fu_143_p2.read(), ap_const_lv1_1))) {
        current_txop_holder_o_ap_vld = ap_const_logic_1;
    } else {
        current_txop_holder_o_ap_vld = ap_const_logic_0;
    }
}

void backoff_vi::thread_grp_fu_110_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_110_p0 = tmp_i_reg_463.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_110_p0 = tmp_i_i_reg_458.read();
    } else {
        grp_fu_110_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void backoff_vi::thread_grp_fu_110_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_110_p1 = tmp_4_i_i_reg_468.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_110_p1 = ap_const_lv32_30000000;
    } else {
        grp_fu_110_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void backoff_vi::thread_grp_fu_118_p0() {
    grp_fu_118_p0 = esl_zext<32,10>(empty_reg_100.read());
}

void backoff_vi::thread_high_2_fu_405_p0() {
    high_2_fu_405_p0 =  (sc_lv<17>) (ap_const_lv32_BC8F);
}

void backoff_vi::thread_high_2_fu_405_p1() {
    high_2_fu_405_p1 =  (sc_lv<17>) (high_2_fu_405_p10.read());
}

void backoff_vi::thread_high_2_fu_405_p10() {
    high_2_fu_405_p10 = esl_zext<32,17>(high_fu_195_p4.read());
}

void backoff_vi::thread_high_fu_195_p4() {
    high_fu_195_p4 = rand_state.read().range(31, 15);
}

void backoff_vi::thread_icmp_ln219_fu_125_p2() {
    icmp_ln219_fu_125_p2 = (!vi_backoff_counter.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(vi_backoff_counter.read() == ap_const_lv10_0);
}

void backoff_vi::thread_icmp_ln220_fu_143_p2() {
    icmp_ln220_fu_143_p2 = (!current_txop_holder_i.read().is_01() || !ap_const_lv3_3.is_01())? sc_lv<1>(): (sc_biguint<3>(current_txop_holder_i.read()) < sc_biguint<3>(ap_const_lv3_3));
}

void backoff_vi::thread_icmp_ln283_fu_153_p2() {
    icmp_ln283_fu_153_p2 = (!CW_vi.read().is_01() || !ap_const_lv10_3FF.is_01())? sc_lv<1>(): sc_lv<1>(CW_vi.read() == ap_const_lv10_3FF);
}

void backoff_vi::thread_low_1_fu_189_p0() {
    low_1_fu_189_p0 =  (sc_lv<15>) (low_1_fu_189_p00.read());
}

void backoff_vi::thread_low_1_fu_189_p00() {
    low_1_fu_189_p00 = esl_zext<32,15>(low_fu_181_p1.read());
}

void backoff_vi::thread_low_1_fu_189_p2() {
    low_1_fu_189_p2 = (!low_1_fu_189_p0.read().is_01() || !ap_const_lv32_BC8F.is_01())? sc_lv<32>(): sc_biguint<15>(low_1_fu_189_p0.read()) * sc_biguint<32>(ap_const_lv32_BC8F);
}

void backoff_vi::thread_low_fu_181_p1() {
    low_fu_181_p1 = rand_state.read().range(15-1, 0);
}

void backoff_vi::thread_mantissa_V_fu_324_p4() {
    mantissa_V_fu_324_p4 = esl_concat<24,1>(esl_concat<1,23>(ap_const_lv1_1, tmp_V_1_reg_473.read()), ap_const_lv1_0);
}

void backoff_vi::thread_or_ln284_fu_165_p2() {
    or_ln284_fu_165_p2 = (shl_ln284_fu_159_p2.read() | ap_const_lv10_1);
}

void backoff_vi::thread_p_Val2_s_fu_282_p1() {
    p_Val2_s_fu_282_p1 = grp_fu_110_p2.read();
}

void backoff_vi::thread_r_V_1_fu_364_p2() {
    r_V_1_fu_364_p2 = (!zext_ln1287_fu_354_p1.read().is_01())? sc_lv<63>(): zext_ln682_fu_333_p1.read() << (unsigned short)zext_ln1287_fu_354_p1.read().to_uint();
}

void backoff_vi::thread_r_V_fu_358_p2() {
    r_V_fu_358_p2 = (!sext_ln1311_2_fu_350_p1.read().is_01())? sc_lv<25>(): mantissa_V_fu_324_p4.read() >> (unsigned short)sext_ln1311_2_fu_350_p1.read().to_uint();
}

void backoff_vi::thread_select_ln1312_fu_392_p3() {
    select_ln1312_fu_392_p3 = (!isNeg_reg_483.read()[0].is_01())? sc_lv<10>(): ((isNeg_reg_483.read()[0].to_bool())? zext_ln662_fu_378_p1.read(): tmp_2_fu_382_p4.read());
}

void backoff_vi::thread_sext_ln1311_1_fu_346_p1() {
    sext_ln1311_1_fu_346_p1 = esl_sext<32,9>(ush_fu_340_p3.read());
}

void backoff_vi::thread_sext_ln1311_2_fu_350_p1() {
    sext_ln1311_2_fu_350_p1 = esl_sext<25,9>(ush_fu_340_p3.read());
}

void backoff_vi::thread_sext_ln1311_fu_337_p1() {
    sext_ln1311_fu_337_p1 = esl_sext<9,8>(sub_ln1311_reg_489.read());
}

void backoff_vi::thread_shl_ln284_fu_159_p2() {
    shl_ln284_fu_159_p2 = (!ap_const_lv10_1.is_01())? sc_lv<10>(): CW_vi.read() << (unsigned short)ap_const_lv10_1.to_uint();
}

void backoff_vi::thread_sub_ln1311_fu_318_p2() {
    sub_ln1311_fu_318_p2 = (!ap_const_lv8_7F.is_01() || !tmp_V_fu_286_p4.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_7F) - sc_biguint<8>(tmp_V_fu_286_p4.read()));
}

void backoff_vi::thread_tmp_2_fu_382_p4() {
    tmp_2_fu_382_p4 = r_V_1_fu_364_p2.read().range(33, 24);
}

void backoff_vi::thread_tmp_3_fu_370_p3() {
    tmp_3_fu_370_p3 = r_V_fu_358_p2.read().range(24, 24);
}

void backoff_vi::thread_tmp_V_1_fu_296_p1() {
    tmp_V_1_fu_296_p1 = p_Val2_s_fu_282_p1.read().range(23-1, 0);
}

void backoff_vi::thread_tmp_V_fu_286_p4() {
    tmp_V_fu_286_p4 = p_Val2_s_fu_282_p1.read().range(30, 23);
}

void backoff_vi::thread_tmp_fu_253_p3() {
    tmp_fu_253_p3 = x_1_fu_240_p2.read().range(31, 31);
}

void backoff_vi::thread_trunc_ln11_fu_245_p1() {
    trunc_ln11_fu_245_p1 = x_1_fu_240_p2.read().range(31-1, 0);
}

void backoff_vi::thread_trunc_ln9_fu_218_p1() {
    trunc_ln9_fu_218_p1 = high_2_reg_438.read().range(16-1, 0);
}

void backoff_vi::thread_ush_fu_340_p3() {
    ush_fu_340_p3 = (!isNeg_reg_483.read()[0].is_01())? sc_lv<9>(): ((isNeg_reg_483.read()[0].to_bool())? sext_ln1311_fu_337_p1.read(): add_ln339_reg_478.read());
}

void backoff_vi::thread_x_1_fu_240_p2() {
    x_1_fu_240_p2 = (!x_fu_234_p2.read().is_01() || !low_1_reg_433.read().is_01())? sc_lv<32>(): (sc_biguint<32>(x_fu_234_p2.read()) + sc_biguint<32>(low_1_reg_433.read()));
}

void backoff_vi::thread_x_2_fu_265_p2() {
    x_2_fu_265_p2 = (!zext_ln12_fu_249_p1.read().is_01() || !zext_ln12_1_fu_261_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln12_fu_249_p1.read()) + sc_biguint<32>(zext_ln12_1_fu_261_p1.read()));
}

void backoff_vi::thread_x_fu_234_p2() {
    x_fu_234_p2 = (!zext_ln10_1_fu_230_p1.read().is_01())? sc_lv<32>(): zext_ln10_fu_221_p1.read() << (unsigned short)zext_ln10_1_fu_230_p1.read().to_uint();
}

void backoff_vi::thread_zext_ln10_1_fu_230_p1() {
    zext_ln10_1_fu_230_p1 = esl_zext<32,16>(add_ln10_fu_225_p2.read());
}

void backoff_vi::thread_zext_ln10_fu_221_p1() {
    zext_ln10_fu_221_p1 = esl_zext<32,16>(trunc_ln9_fu_218_p1.read());
}

void backoff_vi::thread_zext_ln1287_fu_354_p1() {
    zext_ln1287_fu_354_p1 = esl_zext<63,32>(sext_ln1311_1_fu_346_p1.read());
}

void backoff_vi::thread_zext_ln12_1_fu_261_p1() {
    zext_ln12_1_fu_261_p1 = esl_zext<32,1>(tmp_fu_253_p3.read());
}

void backoff_vi::thread_zext_ln12_fu_249_p1() {
    zext_ln12_fu_249_p1 = esl_zext<32,31>(trunc_ln11_fu_245_p1.read());
}

void backoff_vi::thread_zext_ln339_fu_300_p1() {
    zext_ln339_fu_300_p1 = esl_zext<9,8>(tmp_V_fu_286_p4.read());
}

void backoff_vi::thread_zext_ln662_fu_378_p1() {
    zext_ln662_fu_378_p1 = esl_zext<10,1>(tmp_3_fu_370_p3.read());
}

void backoff_vi::thread_zext_ln682_fu_333_p1() {
    zext_ln682_fu_333_p1 = esl_zext<63,25>(mantissa_V_fu_324_p4.read());
}

void backoff_vi::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln219_fu_125_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(icmp_ln220_fu_143_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && (esl_seteq<1,1,1>(icmp_ln220_fu_143_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(icmp_ln219_fu_125_p2.read(), ap_const_lv1_0)))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<17>) ("XXXXXXXXXXXXXXXXX");
            break;
    }
}

void backoff_vi::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"current_txop_holder_i\" :  \"" << current_txop_holder_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"current_txop_holder_o\" :  \"" << current_txop_holder_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"current_txop_holder_o_ap_vld\" :  \"" << current_txop_holder_o_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

