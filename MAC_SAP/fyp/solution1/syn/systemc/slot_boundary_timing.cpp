// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "slot_boundary_timing.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic slot_boundary_timing::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic slot_boundary_timing::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> slot_boundary_timing::ap_ST_fsm_state1 = "1";
const sc_lv<8> slot_boundary_timing::ap_ST_fsm_state2 = "10";
const sc_lv<8> slot_boundary_timing::ap_ST_fsm_state3 = "100";
const sc_lv<8> slot_boundary_timing::ap_ST_fsm_state4 = "1000";
const sc_lv<8> slot_boundary_timing::ap_ST_fsm_state5 = "10000";
const sc_lv<8> slot_boundary_timing::ap_ST_fsm_state6 = "100000";
const sc_lv<8> slot_boundary_timing::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> slot_boundary_timing::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> slot_boundary_timing::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool slot_boundary_timing::ap_const_boolean_1 = true;
const sc_lv<1> slot_boundary_timing::ap_const_lv1_0 = "0";
const sc_lv<32> slot_boundary_timing::ap_const_lv32_1 = "1";
const sc_lv<32> slot_boundary_timing::ap_const_lv32_2 = "10";
const sc_lv<32> slot_boundary_timing::ap_const_lv32_5 = "101";
const sc_lv<32> slot_boundary_timing::ap_const_lv32_6 = "110";
const sc_lv<32> slot_boundary_timing::ap_const_lv32_4 = "100";
const sc_lv<1> slot_boundary_timing::ap_const_lv1_1 = "1";
const bool slot_boundary_timing::ap_const_boolean_0 = false;
const sc_lv<32> slot_boundary_timing::ap_const_lv32_3 = "11";
const sc_lv<32> slot_boundary_timing::ap_const_lv32_7 = "111";
const sc_lv<2> slot_boundary_timing::ap_const_lv2_0 = "00";
const sc_lv<2> slot_boundary_timing::ap_const_lv2_1 = "1";
const sc_lv<2> slot_boundary_timing::ap_const_lv2_2 = "10";
const sc_lv<2> slot_boundary_timing::ap_const_lv2_3 = "11";

slot_boundary_timing::slot_boundary_timing(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_start_timer_fu_67 = new start_timer("grp_start_timer_fu_67");
    grp_start_timer_fu_67->ap_clk(ap_clk);
    grp_start_timer_fu_67->ap_rst(ap_rst);
    grp_start_timer_fu_67->ap_start(grp_start_timer_fu_67_ap_start);
    grp_start_timer_fu_67->ap_done(grp_start_timer_fu_67_ap_done);
    grp_start_timer_fu_67->ap_idle(grp_start_timer_fu_67_ap_idle);
    grp_start_timer_fu_67->ap_ready(grp_start_timer_fu_67_ap_ready);
    grp_start_timer_fu_67->count_idle(grp_start_timer_fu_67_count_idle);
    grp_start_timer_fu_67->medium_state(medium_state);
    grp_start_timer_fu_67->ap_return(grp_start_timer_fu_67_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state5_on_subcall_done);
    sensitive << ( grp_start_timer_fu_67_ap_done );
    sensitive << ( ap_predicate_op31_call_state5 );
    sensitive << ( ap_predicate_op33_call_state5 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_on_subcall_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14);
    sensitive << ( icmp_ln137_reg_102 );
    sensitive << ( icmp_ln153_reg_106 );
    sensitive << ( icmp_ln163_reg_110 );
    sensitive << ( grp_start_timer_fu_67_ap_return );
    sensitive << ( sifs_timeout_1_reg_122 );
    sensitive << ( sifs_timeout_reg_131 );
    sensitive << ( idle_waiting_new_0_reg_43 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_predicate_op31_call_state5);
    sensitive << ( icmp_ln137_reg_102 );
    sensitive << ( icmp_ln153_reg_106 );
    sensitive << ( icmp_ln163_reg_110 );
    sensitive << ( sifs_timeout_1_reg_122 );

    SC_METHOD(thread_ap_predicate_op33_call_state5);
    sensitive << ( icmp_ln137_reg_102 );
    sensitive << ( sifs_timeout_reg_131 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_on_subcall_done );

    SC_METHOD(thread_grp_start_timer_fu_67_ap_start);
    sensitive << ( grp_start_timer_fu_67_ap_start_reg );

    SC_METHOD(thread_grp_start_timer_fu_67_count_idle);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_predicate_op31_call_state5 );
    sensitive << ( ap_predicate_op33_call_state5 );

    SC_METHOD(thread_icmp_ln137_fu_78_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( timing_mode );

    SC_METHOD(thread_icmp_ln153_fu_84_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( timing_mode );
    sensitive << ( icmp_ln137_fu_78_p2 );

    SC_METHOD(thread_icmp_ln163_fu_90_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( timing_mode );
    sensitive << ( icmp_ln137_fu_78_p2 );
    sensitive << ( icmp_ln153_fu_84_p2 );

    SC_METHOD(thread_icmp_ln179_fu_96_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( timing_mode );
    sensitive << ( icmp_ln137_fu_78_p2 );
    sensitive << ( icmp_ln153_fu_84_p2 );
    sensitive << ( icmp_ln163_fu_90_p2 );

    SC_METHOD(thread_idle_waiting);
    sensitive << ( ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_on_subcall_done );

    SC_METHOD(thread_idle_waiting_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_on_subcall_done );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln137_fu_78_p2 );
    sensitive << ( icmp_ln153_fu_84_p2 );
    sensitive << ( icmp_ln163_fu_90_p2 );
    sensitive << ( grp_start_timer_fu_67_ap_return );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_start_timer_fu_67_ap_done );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln179_fu_96_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000001";
    grp_start_timer_fu_67_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "slot_boundary_timing_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, timing_mode, "(port)timing_mode");
    sc_trace(mVcdFile, idle_waiting, "(port)idle_waiting");
    sc_trace(mVcdFile, idle_waiting_ap_vld, "(port)idle_waiting_ap_vld");
    sc_trace(mVcdFile, medium_state, "(port)medium_state");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, icmp_ln137_fu_78_p2, "icmp_ln137_fu_78_p2");
    sc_trace(mVcdFile, icmp_ln137_reg_102, "icmp_ln137_reg_102");
    sc_trace(mVcdFile, icmp_ln153_fu_84_p2, "icmp_ln153_fu_84_p2");
    sc_trace(mVcdFile, icmp_ln153_reg_106, "icmp_ln153_reg_106");
    sc_trace(mVcdFile, icmp_ln163_fu_90_p2, "icmp_ln163_fu_90_p2");
    sc_trace(mVcdFile, icmp_ln163_reg_110, "icmp_ln163_reg_110");
    sc_trace(mVcdFile, grp_start_timer_fu_67_ap_return, "grp_start_timer_fu_67_ap_return");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_start_timer_fu_67_ap_ready, "grp_start_timer_fu_67_ap_ready");
    sc_trace(mVcdFile, grp_start_timer_fu_67_ap_done, "grp_start_timer_fu_67_ap_done");
    sc_trace(mVcdFile, sifs_timeout_1_reg_122, "sifs_timeout_1_reg_122");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, sifs_timeout_reg_131, "sifs_timeout_reg_131");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_start_timer_fu_67_ap_start, "grp_start_timer_fu_67_ap_start");
    sc_trace(mVcdFile, grp_start_timer_fu_67_ap_idle, "grp_start_timer_fu_67_ap_idle");
    sc_trace(mVcdFile, grp_start_timer_fu_67_count_idle, "grp_start_timer_fu_67_count_idle");
    sc_trace(mVcdFile, ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14, "ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14");
    sc_trace(mVcdFile, idle_waiting_new_0_reg_43, "idle_waiting_new_0_reg_43");
    sc_trace(mVcdFile, icmp_ln179_fu_96_p2, "icmp_ln179_fu_96_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_predicate_op31_call_state5, "ap_predicate_op31_call_state5");
    sc_trace(mVcdFile, ap_predicate_op33_call_state5, "ap_predicate_op33_call_state5");
    sc_trace(mVcdFile, ap_block_state5_on_subcall_done, "ap_block_state5_on_subcall_done");
    sc_trace(mVcdFile, grp_start_timer_fu_67_ap_start_reg, "grp_start_timer_fu_67_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("slot_boundary_timing.hdltvin.dat");
    mHdltvoutHandle.open("slot_boundary_timing.hdltvout.dat");
}

slot_boundary_timing::~slot_boundary_timing() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_start_timer_fu_67;
}

void slot_boundary_timing::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_start_timer_fu_67_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(icmp_ln137_fu_78_p2.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(icmp_ln153_fu_84_p2.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln163_fu_90_p2.read()) && 
              esl_seteq<1,1,1>(icmp_ln179_fu_96_p2.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(icmp_ln137_fu_78_p2.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(icmp_ln153_fu_84_p2.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(icmp_ln163_fu_90_p2.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(icmp_ln137_fu_78_p2.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(icmp_ln153_fu_84_p2.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(icmp_ln137_fu_78_p2.read(), ap_const_lv1_1)) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
            grp_start_timer_fu_67_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_start_timer_fu_67_ap_ready.read())) {
            grp_start_timer_fu_67_ap_start_reg = ap_const_logic_0;
        }
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_ln137_reg_102.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(sifs_timeout_reg_131.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_ln137_reg_102.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(icmp_ln153_reg_106.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(icmp_ln163_reg_110.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(sifs_timeout_1_reg_122.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0)))) {
        idle_waiting_new_0_reg_43 = grp_start_timer_fu_67_ap_return.read();
    } else if (((esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_start_timer_fu_67_ap_return.read())) || 
                (esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_start_timer_fu_67_ap_return.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(icmp_ln137_fu_78_p2.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(icmp_ln153_fu_84_p2.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln163_fu_90_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln179_fu_96_p2.read())))) {
        idle_waiting_new_0_reg_43 = ap_const_lv1_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        icmp_ln137_reg_102 = icmp_ln137_fu_78_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln137_fu_78_p2.read(), ap_const_lv1_0))) {
        icmp_ln153_reg_106 = icmp_ln153_fu_84_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln137_fu_78_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln153_fu_84_p2.read(), ap_const_lv1_0))) {
        icmp_ln163_reg_110 = icmp_ln163_fu_90_p2.read();
    }
    if ((esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        sifs_timeout_1_reg_122 = grp_start_timer_fu_67_ap_return.read();
    }
    if ((esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        sifs_timeout_reg_131 = grp_start_timer_fu_67_ap_return.read();
    }
}

void slot_boundary_timing::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void slot_boundary_timing::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void slot_boundary_timing::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void slot_boundary_timing::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void slot_boundary_timing::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void slot_boundary_timing::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void slot_boundary_timing::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void slot_boundary_timing::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void slot_boundary_timing::thread_ap_block_state5_on_subcall_done() {
    ap_block_state5_on_subcall_done = ((esl_seteq<1,1,1>(ap_const_logic_0, grp_start_timer_fu_67_ap_done.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op31_call_state5.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, grp_start_timer_fu_67_ap_done.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_call_state5.read())));
}

void slot_boundary_timing::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void slot_boundary_timing::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void slot_boundary_timing::thread_ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_ln137_reg_102.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(sifs_timeout_reg_131.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_ln137_reg_102.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(icmp_ln153_reg_106.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(icmp_ln163_reg_110.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(sifs_timeout_1_reg_122.read(), ap_const_lv1_1)))) {
        ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14 = grp_start_timer_fu_67_ap_return.read();
    } else {
        ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14 = idle_waiting_new_0_reg_43.read();
    }
}

void slot_boundary_timing::thread_ap_predicate_op31_call_state5() {
    ap_predicate_op31_call_state5 = (esl_seteq<1,1,1>(icmp_ln137_reg_102.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln153_reg_106.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln163_reg_110.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(sifs_timeout_1_reg_122.read(), ap_const_lv1_1));
}

void slot_boundary_timing::thread_ap_predicate_op33_call_state5() {
    ap_predicate_op33_call_state5 = (esl_seteq<1,1,1>(icmp_ln137_reg_102.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(sifs_timeout_reg_131.read(), ap_const_lv1_1));
}

void slot_boundary_timing::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void slot_boundary_timing::thread_grp_start_timer_fu_67_ap_start() {
    grp_start_timer_fu_67_ap_start = grp_start_timer_fu_67_ap_start_reg.read();
}

void slot_boundary_timing::thread_grp_start_timer_fu_67_count_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        grp_start_timer_fu_67_count_idle = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op31_call_state5.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_call_state5.read())))) {
        grp_start_timer_fu_67_count_idle = ap_const_lv1_1;
    } else {
        grp_start_timer_fu_67_count_idle = "X";
    }
}

void slot_boundary_timing::thread_icmp_ln137_fu_78_p2() {
    icmp_ln137_fu_78_p2 = (!timing_mode.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(timing_mode.read() == ap_const_lv2_0);
}

void slot_boundary_timing::thread_icmp_ln153_fu_84_p2() {
    icmp_ln153_fu_84_p2 = (!timing_mode.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(timing_mode.read() == ap_const_lv2_1);
}

void slot_boundary_timing::thread_icmp_ln163_fu_90_p2() {
    icmp_ln163_fu_90_p2 = (!timing_mode.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(timing_mode.read() == ap_const_lv2_2);
}

void slot_boundary_timing::thread_icmp_ln179_fu_96_p2() {
    icmp_ln179_fu_96_p2 = (!timing_mode.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(timing_mode.read() == ap_const_lv2_3);
}

void slot_boundary_timing::thread_idle_waiting() {
    idle_waiting = ap_phi_mux_idle_waiting_new_0_phi_fu_47_p14.read();
}

void slot_boundary_timing::thread_idle_waiting_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        idle_waiting_ap_vld = ap_const_logic_1;
    } else {
        idle_waiting_ap_vld = ap_const_logic_0;
    }
}

void slot_boundary_timing::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln137_fu_78_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln153_fu_84_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln163_fu_90_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln179_fu_96_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln137_fu_78_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln153_fu_84_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln163_fu_90_p2.read()) && esl_seteq<1,1,1>(icmp_ln179_fu_96_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln137_fu_78_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln153_fu_84_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln163_fu_90_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln137_fu_78_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln153_fu_84_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln137_fu_78_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_start_timer_fu_67_ap_return.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else if ((esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_return.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_return.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else if ((esl_seteq<1,1,1>(grp_start_timer_fu_67_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_start_timer_fu_67_ap_return.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void slot_boundary_timing::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"timing_mode\" :  \"" << timing_mode.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"idle_waiting\" :  \"" << idle_waiting.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"idle_waiting_ap_vld\" :  \"" << idle_waiting_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"medium_state\" :  \"" << medium_state.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

