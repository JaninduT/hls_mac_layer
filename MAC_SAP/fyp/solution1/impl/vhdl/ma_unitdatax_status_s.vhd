-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ma_unitdatax_status_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    trans_sts : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of ma_unitdatax_status_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal successful : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal unsupported_priority : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal unsupported_service_s : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal unsupported_channel_s : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal unsupported_tx_param : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal queue_full : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln14_fu_148_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln13_fu_34_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln16_fu_132_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln15_fu_40_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_fu_116_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln17_fu_46_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_fu_100_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln19_fu_52_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_fu_84_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln21_fu_58_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_68_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln21_fu_58_p2 = ap_const_lv1_0) and (icmp_ln19_fu_52_p2 = ap_const_lv1_0) and (icmp_ln17_fu_46_p2 = ap_const_lv1_0) and (icmp_ln15_fu_40_p2 = ap_const_lv1_0) and (icmp_ln13_fu_34_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                queue_full <= add_ln24_fu_68_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln13_fu_34_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                successful <= add_ln14_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln17_fu_46_p2 = ap_const_lv1_0) and (icmp_ln15_fu_40_p2 = ap_const_lv1_0) and (icmp_ln19_fu_52_p2 = ap_const_lv1_1) and (icmp_ln13_fu_34_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                unsupported_channel_s <= add_ln20_fu_100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln15_fu_40_p2 = ap_const_lv1_1) and (icmp_ln13_fu_34_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                unsupported_priority <= add_ln16_fu_132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln15_fu_40_p2 = ap_const_lv1_0) and (icmp_ln17_fu_46_p2 = ap_const_lv1_1) and (icmp_ln13_fu_34_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                unsupported_service_s <= add_ln18_fu_116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln19_fu_52_p2 = ap_const_lv1_0) and (icmp_ln17_fu_46_p2 = ap_const_lv1_0) and (icmp_ln15_fu_40_p2 = ap_const_lv1_0) and (icmp_ln21_fu_58_p2 = ap_const_lv1_1) and (icmp_ln13_fu_34_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                unsupported_tx_param <= add_ln22_fu_84_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln14_fu_148_p2 <= std_logic_vector(unsigned(successful) + unsigned(ap_const_lv8_1));
    add_ln16_fu_132_p2 <= std_logic_vector(unsigned(unsupported_priority) + unsigned(ap_const_lv8_1));
    add_ln18_fu_116_p2 <= std_logic_vector(unsigned(unsupported_service_s) + unsigned(ap_const_lv8_1));
    add_ln20_fu_100_p2 <= std_logic_vector(unsigned(unsupported_channel_s) + unsigned(ap_const_lv8_1));
    add_ln22_fu_84_p2 <= std_logic_vector(unsigned(unsupported_tx_param) + unsigned(ap_const_lv8_1));
    add_ln24_fu_68_p2 <= std_logic_vector(unsigned(queue_full) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln13_fu_34_p2 <= "1" when (trans_sts = ap_const_lv3_0) else "0";
    icmp_ln15_fu_40_p2 <= "1" when (trans_sts = ap_const_lv3_1) else "0";
    icmp_ln17_fu_46_p2 <= "1" when (trans_sts = ap_const_lv3_2) else "0";
    icmp_ln19_fu_52_p2 <= "1" when (trans_sts = ap_const_lv3_3) else "0";
    icmp_ln21_fu_58_p2 <= "1" when (trans_sts = ap_const_lv3_4) else "0";
end behav;
