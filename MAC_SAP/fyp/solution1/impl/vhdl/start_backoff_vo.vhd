-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity start_backoff_vo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    invoke_reason : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of start_backoff_vo is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "start_backoff_vo,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.485250,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=120,HLS_SYN_LUT=255,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv10_F : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_BC8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011110010001111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_F : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal CW_vo : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";
    signal rand_state : STD_LOGIC_VECTOR (31 downto 0) := "00000111010110111100110100010101";
    signal low_1_fu_96_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal low_1_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal high_2_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal high_2_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_207 : STD_LOGIC_VECTOR (15 downto 0);
    signal invoke_reason_read_read_fu_44_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln273_fu_72_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln272_fu_60_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_2_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln273_fu_66_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal low_fu_88_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal low_1_fu_96_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal high_fu_102_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln9_fu_125_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln10_fu_132_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln10_fu_128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln10_1_fu_137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln11_fu_152_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_160_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln13_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal high_2_fu_184_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal high_2_fu_184_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal high_2_fu_184_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal low_1_fu_96_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component start_backoff_vo_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    start_backoff_vo_bkb_U1 : component start_backoff_vo_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        din0 => high_2_fu_184_p0,
        din1 => high_2_fu_184_p1,
        dout => high_2_fu_184_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    CW_vo_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if (((icmp_ln272_fu_60_p2 = ap_const_lv1_0) and (invoke_reason_read_read_fu_44_p2 = ap_const_lv1_1))) then 
                                        CW_vo(9 downto 4) <= or_ln273_fu_72_p2(9 downto 4);
                elsif ((invoke_reason_read_read_fu_44_p2 = ap_const_lv1_0)) then 
                    CW_vo(4) <= '0';
                    CW_vo(5) <= '0';
                    CW_vo(6) <= '0';
                    CW_vo(7) <= '0';
                    CW_vo(8) <= '0';
                    CW_vo(9) <= '0';
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                high_2_reg_202 <= high_2_fu_184_p2;
                low_1_reg_197 <= low_1_fu_96_p2;
                trunc_ln_reg_207 <= high_2_fu_184_p2(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                rand_state <= x_2_fu_172_p2;
            end if;
        end if;
    end process;
    CW_vo(3 downto 0) <= "1111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln10_fu_132_p2 <= std_logic_vector(unsigned(ap_const_lv16_F) + unsigned(trunc_ln_reg_207));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    high_2_fu_184_p0 <= ap_const_lv32_BC8F(17 - 1 downto 0);
    high_2_fu_184_p1 <= high_2_fu_184_p10(17 - 1 downto 0);
    high_2_fu_184_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(high_fu_102_p4),32));
    high_fu_102_p4 <= rand_state(31 downto 15);
    icmp_ln272_fu_60_p2 <= "1" when (CW_vo = ap_const_lv10_3FF) else "0";
    invoke_reason_read_read_fu_44_p2 <= invoke_reason;
    low_1_fu_96_p0 <= low_1_fu_96_p00(15 - 1 downto 0);
    low_1_fu_96_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low_fu_88_p1),32));
    low_1_fu_96_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low_1_fu_96_p0) * unsigned(ap_const_lv32_BC8F), 32));
    low_fu_88_p1 <= rand_state(15 - 1 downto 0);
    or_ln273_fu_72_p2 <= (shl_ln273_fu_66_p2 or ap_const_lv10_1);
    shl_ln273_fu_66_p2 <= std_logic_vector(shift_left(unsigned(CW_vo),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    tmp_fu_160_p3 <= x_1_fu_147_p2(31 downto 31);
    trunc_ln11_fu_152_p1 <= x_1_fu_147_p2(31 - 1 downto 0);
    trunc_ln9_fu_125_p1 <= high_2_reg_202(16 - 1 downto 0);
    x_1_fu_147_p2 <= std_logic_vector(unsigned(low_1_reg_197) + unsigned(x_fu_141_p2));
    x_2_fu_172_p2 <= std_logic_vector(unsigned(zext_ln13_1_fu_168_p1) + unsigned(zext_ln13_fu_156_p1));
    x_fu_141_p2 <= std_logic_vector(shift_left(unsigned(zext_ln10_fu_128_p1),to_integer(unsigned('0' & zext_ln10_1_fu_137_p1(31-1 downto 0)))));
    zext_ln10_1_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln10_fu_132_p2),32));
    zext_ln10_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln9_fu_125_p1),32));
    zext_ln13_1_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_160_p3),32));
    zext_ln13_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln11_fu_152_p1),32));
end behav;
