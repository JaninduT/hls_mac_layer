-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity start_backoff_vi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    invoke_reason : IN STD_LOGIC_VECTOR (0 downto 0);
    CW_vi_i : IN STD_LOGIC_VECTOR (9 downto 0);
    CW_vi_o : OUT STD_LOGIC_VECTOR (9 downto 0);
    CW_vi_o_ap_vld : OUT STD_LOGIC;
    rand_state_i : IN STD_LOGIC_VECTOR (31 downto 0);
    rand_state_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    rand_state_o_ap_vld : OUT STD_LOGIC;
    vi_backoff_counter : OUT STD_LOGIC_VECTOR (9 downto 0);
    vi_backoff_counter_ap_vld : OUT STD_LOGIC );
end;


architecture behav of start_backoff_vi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv10_F : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_random_int_gen_fu_37_ap_start : STD_LOGIC;
    signal grp_random_int_gen_fu_37_ap_done : STD_LOGIC;
    signal grp_random_int_gen_fu_37_ap_idle : STD_LOGIC;
    signal grp_random_int_gen_fu_37_ap_ready : STD_LOGIC;
    signal grp_random_int_gen_fu_37_rand_state_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_random_int_gen_fu_37_rand_state_o_ap_vld : STD_LOGIC;
    signal grp_random_int_gen_fu_37_ap_return : STD_LOGIC_VECTOR (9 downto 0);
    signal CW_vi_loc_2_reg_24 : STD_LOGIC_VECTOR (9 downto 0);
    signal invoke_reason_read_read_fu_18_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln335_fu_56_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln336_fu_68_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_random_int_gen_fu_37_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln336_fu_62_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component random_int_gen IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_val : IN STD_LOGIC_VECTOR (9 downto 0);
        rand_state_i : IN STD_LOGIC_VECTOR (31 downto 0);
        rand_state_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        rand_state_o_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    grp_random_int_gen_fu_37 : component random_int_gen
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_random_int_gen_fu_37_ap_start,
        ap_done => grp_random_int_gen_fu_37_ap_done,
        ap_idle => grp_random_int_gen_fu_37_ap_idle,
        ap_ready => grp_random_int_gen_fu_37_ap_ready,
        max_val => CW_vi_loc_2_reg_24,
        rand_state_i => rand_state_i,
        rand_state_o => grp_random_int_gen_fu_37_rand_state_o,
        rand_state_o_ap_vld => grp_random_int_gen_fu_37_rand_state_o_ap_vld,
        ap_return => grp_random_int_gen_fu_37_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_random_int_gen_fu_37_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_random_int_gen_fu_37_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_random_int_gen_fu_37_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_random_int_gen_fu_37_ap_ready = ap_const_logic_1)) then 
                    grp_random_int_gen_fu_37_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    CW_vi_loc_2_reg_24_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if (((icmp_ln335_fu_56_p2 = ap_const_lv1_0) and (invoke_reason_read_read_fu_18_p2 = ap_const_lv1_1))) then 
                    CW_vi_loc_2_reg_24 <= or_ln336_fu_68_p2;
                elsif (((icmp_ln335_fu_56_p2 = ap_const_lv1_1) and (invoke_reason_read_read_fu_18_p2 = ap_const_lv1_1))) then 
                    CW_vi_loc_2_reg_24 <= CW_vi_i;
                elsif ((invoke_reason_read_read_fu_18_p2 = ap_const_lv1_0)) then 
                    CW_vi_loc_2_reg_24 <= ap_const_lv10_F;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_random_int_gen_fu_37_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_random_int_gen_fu_37_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    CW_vi_o_assign_proc : process(ap_start, ap_CS_fsm_state1, CW_vi_i, invoke_reason_read_read_fu_18_p2, icmp_ln335_fu_56_p2, or_ln336_fu_68_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if (((icmp_ln335_fu_56_p2 = ap_const_lv1_0) and (invoke_reason_read_read_fu_18_p2 = ap_const_lv1_1))) then 
                CW_vi_o <= or_ln336_fu_68_p2;
            elsif ((invoke_reason_read_read_fu_18_p2 = ap_const_lv1_0)) then 
                CW_vi_o <= ap_const_lv10_F;
            else 
                CW_vi_o <= CW_vi_i;
            end if;
        else 
            CW_vi_o <= CW_vi_i;
        end if; 
    end process;


    CW_vi_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, invoke_reason_read_read_fu_18_p2, icmp_ln335_fu_56_p2)
    begin
        if ((((ap_start = ap_const_logic_1) and (icmp_ln335_fu_56_p2 = ap_const_lv1_0) and (invoke_reason_read_read_fu_18_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (invoke_reason_read_read_fu_18_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            CW_vi_o_ap_vld <= ap_const_logic_1;
        else 
            CW_vi_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_random_int_gen_fu_37_ap_done, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_random_int_gen_fu_37_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_random_int_gen_fu_37_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_random_int_gen_fu_37_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_random_int_gen_fu_37_ap_start <= grp_random_int_gen_fu_37_ap_start_reg;
    icmp_ln335_fu_56_p2 <= "1" when (CW_vi_i = ap_const_lv10_3FF) else "0";
    invoke_reason_read_read_fu_18_p2 <= invoke_reason;
    or_ln336_fu_68_p2 <= (shl_ln336_fu_62_p2 or ap_const_lv10_1);

    rand_state_o_assign_proc : process(rand_state_i, grp_random_int_gen_fu_37_rand_state_o, grp_random_int_gen_fu_37_rand_state_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_random_int_gen_fu_37_rand_state_o_ap_vld = ap_const_logic_1))) then 
            rand_state_o <= grp_random_int_gen_fu_37_rand_state_o;
        else 
            rand_state_o <= rand_state_i;
        end if; 
    end process;

    rand_state_o_ap_vld <= grp_random_int_gen_fu_37_rand_state_o_ap_vld;
    shl_ln336_fu_62_p2 <= std_logic_vector(shift_left(unsigned(CW_vi_i),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    vi_backoff_counter <= grp_random_int_gen_fu_37_ap_return;

    vi_backoff_counter_ap_vld_assign_proc : process(grp_random_int_gen_fu_37_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_random_int_gen_fu_37_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vi_backoff_counter_ap_vld <= ap_const_logic_1;
        else 
            vi_backoff_counter_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
