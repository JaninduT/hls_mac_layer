-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity phy_data_confirm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    frame_to_transfer_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    frame_to_transfer_ce0 : OUT STD_LOGIC;
    frame_to_transfer_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of phy_data_confirm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "phy_data_confirm,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.457000,HLS_SYN_LAT=103,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=75,HLS_SYN_LUT=177,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal count : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal frame_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal frame_ce0 : STD_LOGIC;
    signal frame_we0 : STD_LOGIC;
    signal frame_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal stop_tx : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal count_load_reg_141 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln10_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_146 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_fu_102_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal q_reg_153 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln12_fu_108_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_158 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln11_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_fu_113_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_reg_168 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln16_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_174 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_phy_data_request_fu_79_ap_start : STD_LOGIC;
    signal grp_phy_data_request_fu_79_ap_done : STD_LOGIC;
    signal grp_phy_data_request_fu_79_ap_idle : STD_LOGIC;
    signal grp_phy_data_request_fu_79_ap_ready : STD_LOGIC;
    signal grp_phy_data_request_fu_79_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_phy_data_request_fu_79_data_ce0 : STD_LOGIC;
    signal q_0_reg_57 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_phi_mux_count_new_0_phi_fu_72_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal count_new_0_reg_68 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal grp_phy_data_request_fu_79_ap_start_reg : STD_LOGIC := '0';
    signal stop_tx_load_load_fu_125_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component phy_data_request IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_offset : IN STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component phy_data_confirm_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    frame_U : component phy_data_confirm_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => frame_address0,
        ce0 => frame_ce0,
        we0 => frame_we0,
        d0 => frame_to_transfer_q0,
        q0 => frame_q0);

    grp_phy_data_request_fu_79 : component phy_data_request
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_phy_data_request_fu_79_ap_start,
        ap_done => grp_phy_data_request_fu_79_ap_done,
        ap_idle => grp_phy_data_request_fu_79_ap_idle,
        ap_ready => grp_phy_data_request_fu_79_ap_ready,
        data_address0 => grp_phy_data_request_fu_79_data_address0,
        data_ce0 => grp_phy_data_request_fu_79_data_ce0,
        data_q0 => frame_q0,
        data_offset => add_ln15_reg_168);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_phy_data_request_fu_79_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_phy_data_request_fu_79_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln16_fu_119_p2 = ap_const_lv1_0) and (icmp_ln10_reg_146 = ap_const_lv1_0)) or ((icmp_ln11_fu_96_p2 = ap_const_lv1_1) and (icmp_ln16_fu_119_p2 = ap_const_lv1_0))))) then 
                    grp_phy_data_request_fu_79_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_phy_data_request_fu_79_ap_ready = ap_const_logic_1)) then 
                    grp_phy_data_request_fu_79_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    count_new_0_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_174 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                count_new_0_reg_68 <= add_ln15_reg_168;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln16_fu_119_p2 = ap_const_lv1_1) and (icmp_ln10_reg_146 = ap_const_lv1_0)) or ((icmp_ln16_fu_119_p2 = ap_const_lv1_1) and (icmp_ln11_fu_96_p2 = ap_const_lv1_1))))) then 
                count_new_0_reg_68 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    q_0_reg_57_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln10_fu_90_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                q_0_reg_57 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                q_0_reg_57 <= q_reg_153;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln11_fu_96_p2 = ap_const_lv1_1) or (icmp_ln10_reg_146 = ap_const_lv1_0)))) then
                add_ln15_reg_168 <= add_ln15_fu_113_p2;
                icmp_ln16_reg_174 <= icmp_ln16_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                count <= ap_phi_mux_count_new_0_phi_fu_72_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                count_load_reg_141 <= count;
                icmp_ln10_reg_146 <= icmp_ln10_fu_90_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_146 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                q_reg_153 <= q_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln16_fu_119_p2 = ap_const_lv1_1) and (icmp_ln10_reg_146 = ap_const_lv1_0) and (stop_tx_load_load_fu_125_p1 = ap_const_lv1_0)) or ((icmp_ln16_fu_119_p2 = ap_const_lv1_1) and (icmp_ln11_fu_96_p2 = ap_const_lv1_1) and (stop_tx_load_load_fu_125_p1 = ap_const_lv1_0))))) then
                stop_tx <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_146 = ap_const_lv1_1) and (icmp_ln11_fu_96_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln12_reg_158(6 downto 0) <= zext_ln12_fu_108_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln12_reg_158(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_reg_146, ap_CS_fsm_state2, icmp_ln11_fu_96_p2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln11_fu_96_p2 = ap_const_lv1_1) or (icmp_ln10_reg_146 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln15_fu_113_p2 <= std_logic_vector(unsigned(count_load_reg_141) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state4_on_subcall_done_assign_proc : process(icmp_ln16_reg_174, grp_phy_data_request_fu_79_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((icmp_ln16_reg_174 = ap_const_lv1_0) and (grp_phy_data_request_fu_79_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_count_new_0_phi_fu_72_p4_assign_proc : process(add_ln15_reg_168, icmp_ln16_reg_174, count_new_0_reg_68, ap_CS_fsm_state4)
    begin
        if (((icmp_ln16_reg_174 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_count_new_0_phi_fu_72_p4 <= add_ln15_reg_168;
        else 
            ap_phi_mux_count_new_0_phi_fu_72_p4 <= count_new_0_reg_68;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    frame_address0_assign_proc : process(zext_ln12_reg_158, icmp_ln16_reg_174, grp_phy_data_request_fu_79_data_address0, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            frame_address0 <= zext_ln12_reg_158(7 - 1 downto 0);
        elsif (((icmp_ln16_reg_174 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            frame_address0 <= grp_phy_data_request_fu_79_data_address0;
        else 
            frame_address0 <= "XXXXXXX";
        end if; 
    end process;


    frame_ce0_assign_proc : process(icmp_ln16_reg_174, grp_phy_data_request_fu_79_data_ce0, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            frame_ce0 <= ap_const_logic_1;
        elsif (((icmp_ln16_reg_174 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            frame_ce0 <= grp_phy_data_request_fu_79_data_ce0;
        else 
            frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame_to_transfer_address0 <= zext_ln12_fu_108_p1(7 - 1 downto 0);

    frame_to_transfer_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            frame_to_transfer_ce0 <= ap_const_logic_1;
        else 
            frame_to_transfer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    frame_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            frame_we0 <= ap_const_logic_1;
        else 
            frame_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_phy_data_request_fu_79_ap_start <= grp_phy_data_request_fu_79_ap_start_reg;
    icmp_ln10_fu_90_p2 <= "1" when (count = ap_const_lv7_0) else "0";
    icmp_ln11_fu_96_p2 <= "1" when (q_0_reg_57 = ap_const_lv7_64) else "0";
    icmp_ln16_fu_119_p2 <= "1" when (add_ln15_fu_113_p2 = ap_const_lv7_64) else "0";
    q_fu_102_p2 <= std_logic_vector(unsigned(q_0_reg_57) + unsigned(ap_const_lv7_1));
    stop_tx_load_load_fu_125_p1 <= stop_tx;
    zext_ln12_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_0_reg_57),64));
end behav;
