// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module slot_boundary_timing (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        timing_mode,
        medium_state,
        ap_return
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] timing_mode;
input  [0:0] medium_state;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln187_fu_64_p2;
reg   [0:0] icmp_ln187_reg_94;
wire   [0:0] icmp_ln203_fu_70_p2;
reg   [0:0] icmp_ln203_reg_98;
wire   [0:0] icmp_ln213_fu_76_p2;
reg   [0:0] icmp_ln213_reg_102;
wire   [0:0] grp_start_timer_fu_53_ap_return;
wire    ap_CS_fsm_state2;
wire    grp_start_timer_fu_53_ap_ready;
wire    grp_start_timer_fu_53_ap_done;
wire    ap_CS_fsm_state3;
reg   [0:0] sifs_timeout_1_reg_122;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
reg   [0:0] sifs_timeout_reg_131;
wire    ap_CS_fsm_state8;
wire    grp_start_timer_fu_53_ap_start;
wire    grp_start_timer_fu_53_ap_idle;
reg   [0:0] grp_start_timer_fu_53_count_idle;
reg   [0:0] ap_phi_mux_idle_waiting_write_a_phi_fu_32_p16;
reg   [0:0] idle_waiting_write_a_reg_28;
wire   [0:0] icmp_ln229_fu_82_p2;
wire   [0:0] icmp_ln239_fu_88_p2;
wire    ap_CS_fsm_state6;
reg    ap_predicate_op33_call_state6;
reg    ap_predicate_op35_call_state6;
reg    ap_block_state6_on_subcall_done;
reg    grp_start_timer_fu_53_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
reg   [0:0] ap_return_preg;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 grp_start_timer_fu_53_ap_start_reg = 1'b0;
#0 ap_return_preg = 1'd0;
end

start_timer grp_start_timer_fu_53(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_start_timer_fu_53_ap_start),
    .ap_done(grp_start_timer_fu_53_ap_done),
    .ap_idle(grp_start_timer_fu_53_ap_idle),
    .ap_ready(grp_start_timer_fu_53_ap_ready),
    .count_idle(grp_start_timer_fu_53_count_idle),
    .medium_state(medium_state),
    .ap_return(grp_start_timer_fu_53_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done))) begin
            ap_return_preg <= ap_phi_mux_idle_waiting_write_a_phi_fu_32_p16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_start_timer_fu_53_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln213_fu_76_p2 == 1'd0) & (icmp_ln203_fu_70_p2 == 1'd0) & (icmp_ln187_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln229_fu_82_p2 == 1'd1)) | ((icmp_ln213_fu_76_p2 == 1'd0) & (icmp_ln229_fu_82_p2 == 1'd0) & (icmp_ln203_fu_70_p2 == 1'd0) & (icmp_ln187_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln239_fu_88_p2 == 1'd1)) | ((icmp_ln213_fu_76_p2 == 1'd1) & (icmp_ln203_fu_70_p2 == 1'd0) & (icmp_ln187_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((icmp_ln203_fu_70_p2 == 1'd1) & (icmp_ln187_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((icmp_ln187_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_start_timer_fu_53_ap_start_reg <= 1'b1;
        end else if ((grp_start_timer_fu_53_ap_ready == 1'b1)) begin
            grp_start_timer_fu_53_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_start_timer_fu_53_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((grp_start_timer_fu_53_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((grp_start_timer_fu_53_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((sifs_timeout_reg_131 == 1'd1) & (icmp_ln187_reg_94 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done)) | ((sifs_timeout_1_reg_122 == 1'd1) & (icmp_ln213_reg_102 == 1'd1) & (icmp_ln203_reg_98 == 1'd0) & (icmp_ln187_reg_94 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done)))) begin
        idle_waiting_write_a_reg_28 <= grp_start_timer_fu_53_ap_return;
    end else if ((((grp_start_timer_fu_53_ap_done == 1'b1) & (grp_start_timer_fu_53_ap_return == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((grp_start_timer_fu_53_ap_done == 1'b1) & (grp_start_timer_fu_53_ap_return == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln213_fu_76_p2 == 1'd0) & (icmp_ln239_fu_88_p2 == 1'd0) & (icmp_ln229_fu_82_p2 == 1'd0) & (icmp_ln203_fu_70_p2 == 1'd0) & (icmp_ln187_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        idle_waiting_write_a_reg_28 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp_ln187_reg_94 <= icmp_ln187_fu_64_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln187_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp_ln203_reg_98 <= icmp_ln203_fu_70_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_70_p2 == 1'd0) & (icmp_ln187_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp_ln213_reg_102 <= icmp_ln213_fu_76_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_start_timer_fu_53_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        sifs_timeout_1_reg_122 <= grp_start_timer_fu_53_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_start_timer_fu_53_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        sifs_timeout_reg_131 <= grp_start_timer_fu_53_ap_return;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((((sifs_timeout_reg_131 == 1'd1) & (icmp_ln187_reg_94 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((sifs_timeout_1_reg_122 == 1'd1) & (icmp_ln213_reg_102 == 1'd1) & (icmp_ln203_reg_98 == 1'd0) & (icmp_ln187_reg_94 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        ap_phi_mux_idle_waiting_write_a_phi_fu_32_p16 = grp_start_timer_fu_53_ap_return;
    end else begin
        ap_phi_mux_idle_waiting_write_a_phi_fu_32_p16 = idle_waiting_write_a_reg_28;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done))) begin
        ap_return = ap_phi_mux_idle_waiting_write_a_phi_fu_32_p16;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_start_timer_fu_53_count_idle = 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state6) & (ap_predicate_op35_call_state6 == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (ap_predicate_op33_call_state6 == 1'b1)))) begin
        grp_start_timer_fu_53_count_idle = 1'd1;
    end else begin
        grp_start_timer_fu_53_count_idle = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln213_fu_76_p2 == 1'd0) & (icmp_ln239_fu_88_p2 == 1'd0) & (icmp_ln229_fu_82_p2 == 1'd0) & (icmp_ln203_fu_70_p2 == 1'd0) & (icmp_ln187_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((icmp_ln213_fu_76_p2 == 1'd0) & (icmp_ln229_fu_82_p2 == 1'd0) & (icmp_ln203_fu_70_p2 == 1'd0) & (icmp_ln187_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln239_fu_88_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln213_fu_76_p2 == 1'd0) & (icmp_ln203_fu_70_p2 == 1'd0) & (icmp_ln187_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln229_fu_82_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((icmp_ln213_fu_76_p2 == 1'd1) & (icmp_ln203_fu_70_p2 == 1'd0) & (icmp_ln187_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((icmp_ln203_fu_70_p2 == 1'd1) & (icmp_ln187_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((icmp_ln187_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_start_timer_fu_53_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_start_timer_fu_53_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_start_timer_fu_53_ap_done == 1'b1) & (grp_start_timer_fu_53_ap_return == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((grp_start_timer_fu_53_ap_done == 1'b1) & (grp_start_timer_fu_53_ap_return == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((grp_start_timer_fu_53_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((grp_start_timer_fu_53_ap_done == 1'b1) & (grp_start_timer_fu_53_ap_return == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((grp_start_timer_fu_53_ap_done == 1'b1) & (grp_start_timer_fu_53_ap_return == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state6_on_subcall_done = (((grp_start_timer_fu_53_ap_done == 1'b0) & (ap_predicate_op35_call_state6 == 1'b1)) | ((grp_start_timer_fu_53_ap_done == 1'b0) & (ap_predicate_op33_call_state6 == 1'b1)));
end

always @ (*) begin
    ap_predicate_op33_call_state6 = ((sifs_timeout_1_reg_122 == 1'd1) & (icmp_ln213_reg_102 == 1'd1) & (icmp_ln203_reg_98 == 1'd0) & (icmp_ln187_reg_94 == 1'd0));
end

always @ (*) begin
    ap_predicate_op35_call_state6 = ((sifs_timeout_reg_131 == 1'd1) & (icmp_ln187_reg_94 == 1'd1));
end

assign grp_start_timer_fu_53_ap_start = grp_start_timer_fu_53_ap_start_reg;

assign icmp_ln187_fu_64_p2 = ((timing_mode == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_70_p2 = ((timing_mode == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln213_fu_76_p2 = ((timing_mode == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln229_fu_82_p2 = ((timing_mode == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln239_fu_88_p2 = ((timing_mode == 3'd4) ? 1'b1 : 1'b0);

endmodule //slot_boundary_timing
