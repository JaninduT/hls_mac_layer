// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module random_int_gen (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] rand_state;
wire   [31:0] low_1_fu_44_p2;
reg   [31:0] low_1_reg_139;
wire   [31:0] high_2_fu_132_p2;
reg   [31:0] high_2_reg_144;
reg   [15:0] trunc_ln1_reg_149;
wire   [31:0] x_2_fu_120_p2;
wire    ap_CS_fsm_state2;
wire   [14:0] low_fu_36_p1;
wire   [14:0] low_1_fu_44_p0;
wire   [16:0] high_fu_50_p4;
wire   [15:0] trunc_ln10_fu_73_p1;
wire   [15:0] add_ln11_fu_80_p2;
wire   [31:0] zext_ln11_fu_76_p1;
wire   [31:0] zext_ln11_1_fu_85_p1;
wire   [31:0] x_fu_89_p2;
wire   [31:0] x_1_fu_95_p2;
wire   [30:0] trunc_ln12_fu_100_p1;
wire   [0:0] tmp_1_fu_108_p3;
wire   [31:0] zext_ln13_1_fu_116_p1;
wire   [31:0] zext_ln13_fu_104_p1;
wire   [16:0] high_2_fu_132_p0;
wire   [16:0] high_2_fu_132_p1;
reg   [1:0] ap_NS_fsm;
wire   [31:0] high_2_fu_132_p10;
wire   [31:0] low_1_fu_44_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 rand_state = 32'd123456789;
end

ma_unitdatax_requcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
ma_unitdatax_requcud_U10(
    .din0(high_2_fu_132_p0),
    .din1(high_2_fu_132_p1),
    .dout(high_2_fu_132_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        high_2_reg_144 <= high_2_fu_132_p2;
        low_1_reg_139 <= low_1_fu_44_p2;
        trunc_ln1_reg_149 <= {{high_2_fu_132_p2[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rand_state <= x_2_fu_120_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_80_p2 = (16'd15 + trunc_ln1_reg_149);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign high_2_fu_132_p0 = 32'd48271;

assign high_2_fu_132_p1 = high_2_fu_132_p10;

assign high_2_fu_132_p10 = high_fu_50_p4;

assign high_fu_50_p4 = {{rand_state[31:15]}};

assign low_1_fu_44_p0 = low_1_fu_44_p00;

assign low_1_fu_44_p00 = low_fu_36_p1;

assign low_1_fu_44_p2 = (low_1_fu_44_p0 * $signed('hBC8F));

assign low_fu_36_p1 = rand_state[14:0];

assign tmp_1_fu_108_p3 = x_1_fu_95_p2[32'd31];

assign trunc_ln10_fu_73_p1 = high_2_reg_144[15:0];

assign trunc_ln12_fu_100_p1 = x_1_fu_95_p2[30:0];

assign x_1_fu_95_p2 = (low_1_reg_139 + x_fu_89_p2);

assign x_2_fu_120_p2 = (zext_ln13_1_fu_116_p1 + zext_ln13_fu_104_p1);

assign x_fu_89_p2 = zext_ln11_fu_76_p1 << zext_ln11_1_fu_85_p1;

assign zext_ln11_1_fu_85_p1 = add_ln11_fu_80_p2;

assign zext_ln11_fu_76_p1 = trunc_ln10_fu_73_p1;

assign zext_ln13_1_fu_116_p1 = tmp_1_fu_108_p3;

assign zext_ln13_fu_104_p1 = trunc_ln12_fu_100_p1;

endmodule //random_int_gen
