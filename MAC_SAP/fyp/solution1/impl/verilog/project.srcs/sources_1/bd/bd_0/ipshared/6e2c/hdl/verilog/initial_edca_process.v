// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module initial_edca_process (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        medium_state,
        current_txop_holder_i,
        current_txop_holder_o,
        current_txop_holder_o_ap_vld,
        frame_to_transfer_address0,
        frame_to_transfer_ce0,
        frame_to_transfer_we0,
        frame_to_transfer_d0,
        frame_to_transfer_q0,
        available_spaces_vo_i,
        available_spaces_vo_o,
        available_spaces_vo_o_ap_vld,
        vo_backoff_counter_i,
        vo_backoff_counter_o,
        vo_backoff_counter_o_ap_vld,
        rand_state_i,
        rand_state_o,
        rand_state_o_ap_vld,
        available_spaces_vi_i,
        available_spaces_vi_o,
        available_spaces_vi_o_ap_vld,
        vi_backoff_counter_i,
        vi_backoff_counter_o,
        vi_backoff_counter_o_ap_vld,
        CW_vi_i,
        CW_vi_o,
        CW_vi_o_ap_vld,
        available_spaces_be_i,
        available_spaces_be_o,
        available_spaces_be_o_ap_vld,
        be_backoff_counter_i,
        be_backoff_counter_o,
        be_backoff_counter_o_ap_vld,
        CW_be_i,
        CW_be_o,
        CW_be_o_ap_vld,
        available_spaces_bk_i,
        available_spaces_bk_o,
        available_spaces_bk_o_ap_vld,
        bk_backoff_counter_i,
        bk_backoff_counter_o,
        bk_backoff_counter_o_ap_vld,
        CW_bk_i,
        CW_bk_o,
        CW_bk_o_ap_vld,
        write_pointer_bk_i,
        write_pointer_bk_o,
        write_pointer_bk_o_ap_vld,
        write_pointer_be_i,
        write_pointer_be_o,
        write_pointer_be_o_ap_vld,
        write_pointer_vi_i,
        write_pointer_vi_o,
        write_pointer_vi_o_ap_vld,
        write_pointer_vo_i,
        write_pointer_vo_o,
        write_pointer_vo_o_ap_vld,
        edca_queues_address0,
        edca_queues_ce0,
        edca_queues_we0,
        edca_queues_d0,
        edca_queues_q0,
        read_pointer_bk_i,
        read_pointer_bk_o,
        read_pointer_bk_o_ap_vld,
        read_pointer_be_i,
        read_pointer_be_o,
        read_pointer_be_o_ap_vld,
        read_pointer_vi_i,
        read_pointer_vi_o,
        read_pointer_vi_o_ap_vld,
        read_pointer_vo_i,
        read_pointer_vo_o,
        read_pointer_vo_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] medium_state;
input  [2:0] current_txop_holder_i;
output  [2:0] current_txop_holder_o;
output   current_txop_holder_o_ap_vld;
output  [6:0] frame_to_transfer_address0;
output   frame_to_transfer_ce0;
output   frame_to_transfer_we0;
output  [7:0] frame_to_transfer_d0;
input  [7:0] frame_to_transfer_q0;
input  [2:0] available_spaces_vo_i;
output  [2:0] available_spaces_vo_o;
output   available_spaces_vo_o_ap_vld;
input  [9:0] vo_backoff_counter_i;
output  [9:0] vo_backoff_counter_o;
output   vo_backoff_counter_o_ap_vld;
input  [31:0] rand_state_i;
output  [31:0] rand_state_o;
output   rand_state_o_ap_vld;
input  [2:0] available_spaces_vi_i;
output  [2:0] available_spaces_vi_o;
output   available_spaces_vi_o_ap_vld;
input  [9:0] vi_backoff_counter_i;
output  [9:0] vi_backoff_counter_o;
output   vi_backoff_counter_o_ap_vld;
input  [9:0] CW_vi_i;
output  [9:0] CW_vi_o;
output   CW_vi_o_ap_vld;
input  [2:0] available_spaces_be_i;
output  [2:0] available_spaces_be_o;
output   available_spaces_be_o_ap_vld;
input  [9:0] be_backoff_counter_i;
output  [9:0] be_backoff_counter_o;
output   be_backoff_counter_o_ap_vld;
input  [9:0] CW_be_i;
output  [9:0] CW_be_o;
output   CW_be_o_ap_vld;
input  [2:0] available_spaces_bk_i;
output  [2:0] available_spaces_bk_o;
output   available_spaces_bk_o_ap_vld;
input  [9:0] bk_backoff_counter_i;
output  [9:0] bk_backoff_counter_o;
output   bk_backoff_counter_o_ap_vld;
input  [9:0] CW_bk_i;
output  [9:0] CW_bk_o;
output   CW_bk_o_ap_vld;
input  [1:0] write_pointer_bk_i;
output  [1:0] write_pointer_bk_o;
output   write_pointer_bk_o_ap_vld;
input  [1:0] write_pointer_be_i;
output  [1:0] write_pointer_be_o;
output   write_pointer_be_o_ap_vld;
input  [1:0] write_pointer_vi_i;
output  [1:0] write_pointer_vi_o;
output   write_pointer_vi_o_ap_vld;
input  [1:0] write_pointer_vo_i;
output  [1:0] write_pointer_vo_o;
output   write_pointer_vo_o_ap_vld;
output  [10:0] edca_queues_address0;
output   edca_queues_ce0;
output   edca_queues_we0;
output  [7:0] edca_queues_d0;
input  [7:0] edca_queues_q0;
input  [1:0] read_pointer_bk_i;
output  [1:0] read_pointer_bk_o;
output   read_pointer_bk_o_ap_vld;
input  [1:0] read_pointer_be_i;
output  [1:0] read_pointer_be_o;
output   read_pointer_be_o_ap_vld;
input  [1:0] read_pointer_vi_i;
output  [1:0] read_pointer_vi_o;
output   read_pointer_vi_o_ap_vld;
input  [1:0] read_pointer_vo_i;
output  [1:0] read_pointer_vo_o;
output   read_pointer_vo_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] current_txop_holder_o;
reg current_txop_holder_o_ap_vld;
reg[2:0] available_spaces_vo_o;
reg available_spaces_vo_o_ap_vld;
reg[9:0] vo_backoff_counter_o;
reg[31:0] rand_state_o;
reg rand_state_o_ap_vld;
reg[2:0] available_spaces_vi_o;
reg available_spaces_vi_o_ap_vld;
reg[9:0] vi_backoff_counter_o;
reg vi_backoff_counter_o_ap_vld;
reg[9:0] CW_vi_o;
reg CW_vi_o_ap_vld;
reg[2:0] available_spaces_be_o;
reg available_spaces_be_o_ap_vld;
reg[9:0] be_backoff_counter_o;
reg be_backoff_counter_o_ap_vld;
reg[9:0] CW_be_o;
reg CW_be_o_ap_vld;
reg[2:0] available_spaces_bk_o;
reg available_spaces_bk_o_ap_vld;
reg[9:0] bk_backoff_counter_o;
reg bk_backoff_counter_o_ap_vld;
reg[9:0] CW_bk_o;
reg CW_bk_o_ap_vld;
reg[1:0] write_pointer_bk_o;
reg[1:0] write_pointer_be_o;
reg[1:0] write_pointer_vi_o;
reg[1:0] write_pointer_vo_o;
reg[1:0] read_pointer_bk_o;
reg[1:0] read_pointer_be_o;
reg[1:0] read_pointer_vi_o;
reg[1:0] read_pointer_vo_o;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] grp_slot_boundary_timing_fu_204_ap_return;
reg   [0:0] idle_waited_reg_343;
wire    ap_CS_fsm_state2;
wire    grp_slot_boundary_timing_fu_204_ap_ready;
wire    grp_slot_boundary_timing_fu_204_ap_done;
wire   [0:0] tmp_fu_223_p3;
reg   [0:0] tmp_reg_348;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln268_fu_235_p2;
reg   [0:0] icmp_ln268_reg_352;
wire   [0:0] icmp_ln269_fu_253_p2;
reg   [0:0] icmp_ln269_reg_356;
wire   [0:0] tmp_7_fu_263_p3;
reg   [0:0] tmp_7_reg_360;
wire    ap_CS_fsm_state8;
wire    grp_start_backoff_vi_fu_165_ap_ready;
wire    grp_start_backoff_vi_fu_165_ap_done;
reg    ap_predicate_op39_call_state8;
reg    ap_predicate_op41_call_state8;
reg    ap_block_state8_on_subcall_done;
wire   [0:0] icmp_ln286_fu_275_p2;
reg   [0:0] icmp_ln286_reg_364;
wire   [0:0] icmp_ln287_fu_303_p2;
reg   [0:0] icmp_ln287_reg_368;
wire   [0:0] tmp_9_fu_313_p3;
reg   [0:0] tmp_9_reg_372;
wire    ap_CS_fsm_state11;
wire    grp_start_backoff_be_fu_178_ap_ready;
wire    grp_start_backoff_be_fu_178_ap_done;
reg    ap_predicate_op59_call_state11;
reg    ap_predicate_op61_call_state11;
reg    ap_block_state11_on_subcall_done;
wire   [0:0] icmp_ln304_fu_325_p2;
reg   [0:0] icmp_ln304_reg_376;
wire   [0:0] grp_fu_213_p2;
reg   [0:0] icmp_ln305_reg_380;
reg   [2:0] current_txop_holder_6_reg_384;
wire    ap_CS_fsm_state14;
wire    grp_start_backoff_bk_fu_191_ap_ready;
wire    grp_start_backoff_bk_fu_191_ap_done;
reg    ap_predicate_op78_call_state14;
reg    ap_predicate_op80_call_state14;
reg    ap_block_state14_on_subcall_done;
wire    ap_CS_fsm_state16;
wire    grp_start_tx_fu_119_ap_start;
wire    grp_start_tx_fu_119_ap_done;
wire    grp_start_tx_fu_119_ap_idle;
wire    grp_start_tx_fu_119_ap_ready;
wire   [6:0] grp_start_tx_fu_119_tx_frame_address0;
wire    grp_start_tx_fu_119_tx_frame_ce0;
wire    grp_start_tx_fu_119_tx_frame_we0;
wire   [7:0] grp_start_tx_fu_119_tx_frame_d0;
wire   [2:0] grp_start_tx_fu_119_available_spaces_bk_o;
wire    grp_start_tx_fu_119_available_spaces_bk_o_ap_vld;
wire   [1:0] grp_start_tx_fu_119_write_pointer_bk_o;
wire    grp_start_tx_fu_119_write_pointer_bk_o_ap_vld;
wire   [2:0] grp_start_tx_fu_119_available_spaces_be_o;
wire    grp_start_tx_fu_119_available_spaces_be_o_ap_vld;
wire   [1:0] grp_start_tx_fu_119_write_pointer_be_o;
wire    grp_start_tx_fu_119_write_pointer_be_o_ap_vld;
wire   [2:0] grp_start_tx_fu_119_available_spaces_vi_o;
wire    grp_start_tx_fu_119_available_spaces_vi_o_ap_vld;
wire   [1:0] grp_start_tx_fu_119_write_pointer_vi_o;
wire    grp_start_tx_fu_119_write_pointer_vi_o_ap_vld;
wire   [2:0] grp_start_tx_fu_119_available_spaces_vo_o;
wire    grp_start_tx_fu_119_available_spaces_vo_o_ap_vld;
wire   [1:0] grp_start_tx_fu_119_write_pointer_vo_o;
wire    grp_start_tx_fu_119_write_pointer_vo_o_ap_vld;
wire   [10:0] grp_start_tx_fu_119_edca_queues_address0;
wire    grp_start_tx_fu_119_edca_queues_ce0;
wire    grp_start_tx_fu_119_edca_queues_we0;
wire   [7:0] grp_start_tx_fu_119_edca_queues_d0;
wire   [1:0] grp_start_tx_fu_119_read_pointer_bk_o;
wire    grp_start_tx_fu_119_read_pointer_bk_o_ap_vld;
wire   [1:0] grp_start_tx_fu_119_read_pointer_be_o;
wire    grp_start_tx_fu_119_read_pointer_be_o_ap_vld;
wire   [1:0] grp_start_tx_fu_119_read_pointer_vi_o;
wire    grp_start_tx_fu_119_read_pointer_vi_o_ap_vld;
wire   [1:0] grp_start_tx_fu_119_read_pointer_vo_o;
wire    grp_start_tx_fu_119_read_pointer_vo_o_ap_vld;
wire    grp_backoff_vo_fu_153_ap_start;
wire    grp_backoff_vo_fu_153_ap_done;
wire    grp_backoff_vo_fu_153_ap_idle;
wire    grp_backoff_vo_fu_153_ap_ready;
wire   [2:0] grp_backoff_vo_fu_153_current_txop_holder;
wire    grp_backoff_vo_fu_153_current_txop_holder_ap_vld;
wire   [9:0] grp_backoff_vo_fu_153_vo_backoff_counter_o;
wire    grp_backoff_vo_fu_153_vo_backoff_counter_o_ap_vld;
wire   [31:0] grp_backoff_vo_fu_153_rand_state_o;
wire    grp_backoff_vo_fu_153_rand_state_o_ap_vld;
wire    grp_start_backoff_vi_fu_165_ap_start;
wire    grp_start_backoff_vi_fu_165_ap_idle;
reg   [0:0] grp_start_backoff_vi_fu_165_invoke_reason;
wire   [9:0] grp_start_backoff_vi_fu_165_CW_vi_o;
wire    grp_start_backoff_vi_fu_165_CW_vi_o_ap_vld;
wire   [31:0] grp_start_backoff_vi_fu_165_rand_state_o;
wire    grp_start_backoff_vi_fu_165_rand_state_o_ap_vld;
wire   [9:0] grp_start_backoff_vi_fu_165_vi_backoff_counter;
wire    grp_start_backoff_vi_fu_165_vi_backoff_counter_ap_vld;
wire    grp_start_backoff_be_fu_178_ap_start;
wire    grp_start_backoff_be_fu_178_ap_idle;
reg   [0:0] grp_start_backoff_be_fu_178_invoke_reason;
wire   [9:0] grp_start_backoff_be_fu_178_CW_be_o;
wire    grp_start_backoff_be_fu_178_CW_be_o_ap_vld;
wire   [31:0] grp_start_backoff_be_fu_178_rand_state_o;
wire    grp_start_backoff_be_fu_178_rand_state_o_ap_vld;
wire   [9:0] grp_start_backoff_be_fu_178_be_backoff_counter;
wire    grp_start_backoff_be_fu_178_be_backoff_counter_ap_vld;
wire    grp_start_backoff_bk_fu_191_ap_start;
wire    grp_start_backoff_bk_fu_191_ap_idle;
reg   [0:0] grp_start_backoff_bk_fu_191_invoke_reason;
wire   [9:0] grp_start_backoff_bk_fu_191_CW_bk_o;
wire    grp_start_backoff_bk_fu_191_CW_bk_o_ap_vld;
wire   [31:0] grp_start_backoff_bk_fu_191_rand_state_o;
wire    grp_start_backoff_bk_fu_191_rand_state_o_ap_vld;
wire   [9:0] grp_start_backoff_bk_fu_191_bk_backoff_counter;
wire    grp_start_backoff_bk_fu_191_bk_backoff_counter_ap_vld;
wire    grp_slot_boundary_timing_fu_204_ap_start;
wire    grp_slot_boundary_timing_fu_204_ap_idle;
reg   [2:0] grp_slot_boundary_timing_fu_204_timing_mode;
wire   [0:0] ap_phi_mux_idle_waited_0_phi_fu_112_p4;
reg   [0:0] idle_waited_0_reg_109;
wire    ap_CS_fsm_state3;
reg    grp_start_tx_fu_119_ap_start_reg;
wire    ap_CS_fsm_state17;
reg    grp_backoff_vo_fu_153_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    grp_start_backoff_vi_fu_165_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
reg    grp_start_backoff_be_fu_178_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
reg    grp_start_backoff_bk_fu_191_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
reg    grp_slot_boundary_timing_fu_204_ap_start_reg;
reg    ap_block_state17_on_subcall_done;
wire   [9:0] add_ln278_fu_241_p2;
wire   [9:0] add_ln296_fu_281_p2;
wire   [9:0] add_ln314_fu_331_p2;
wire   [1:0] tmp_8_fu_293_p4;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 grp_start_tx_fu_119_ap_start_reg = 1'b0;
#0 grp_backoff_vo_fu_153_ap_start_reg = 1'b0;
#0 grp_start_backoff_vi_fu_165_ap_start_reg = 1'b0;
#0 grp_start_backoff_be_fu_178_ap_start_reg = 1'b0;
#0 grp_start_backoff_bk_fu_191_ap_start_reg = 1'b0;
#0 grp_slot_boundary_timing_fu_204_ap_start_reg = 1'b0;
end

start_tx grp_start_tx_fu_119(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_start_tx_fu_119_ap_start),
    .ap_done(grp_start_tx_fu_119_ap_done),
    .ap_idle(grp_start_tx_fu_119_ap_idle),
    .ap_ready(grp_start_tx_fu_119_ap_ready),
    .current_txop_holder(current_txop_holder_6_reg_384),
    .tx_frame_address0(grp_start_tx_fu_119_tx_frame_address0),
    .tx_frame_ce0(grp_start_tx_fu_119_tx_frame_ce0),
    .tx_frame_we0(grp_start_tx_fu_119_tx_frame_we0),
    .tx_frame_d0(grp_start_tx_fu_119_tx_frame_d0),
    .tx_frame_q0(frame_to_transfer_q0),
    .available_spaces_bk_i(available_spaces_bk_i),
    .available_spaces_bk_o(grp_start_tx_fu_119_available_spaces_bk_o),
    .available_spaces_bk_o_ap_vld(grp_start_tx_fu_119_available_spaces_bk_o_ap_vld),
    .write_pointer_bk_i(write_pointer_bk_i),
    .write_pointer_bk_o(grp_start_tx_fu_119_write_pointer_bk_o),
    .write_pointer_bk_o_ap_vld(grp_start_tx_fu_119_write_pointer_bk_o_ap_vld),
    .available_spaces_be_i(available_spaces_be_i),
    .available_spaces_be_o(grp_start_tx_fu_119_available_spaces_be_o),
    .available_spaces_be_o_ap_vld(grp_start_tx_fu_119_available_spaces_be_o_ap_vld),
    .write_pointer_be_i(write_pointer_be_i),
    .write_pointer_be_o(grp_start_tx_fu_119_write_pointer_be_o),
    .write_pointer_be_o_ap_vld(grp_start_tx_fu_119_write_pointer_be_o_ap_vld),
    .available_spaces_vi_i(available_spaces_vi_i),
    .available_spaces_vi_o(grp_start_tx_fu_119_available_spaces_vi_o),
    .available_spaces_vi_o_ap_vld(grp_start_tx_fu_119_available_spaces_vi_o_ap_vld),
    .write_pointer_vi_i(write_pointer_vi_i),
    .write_pointer_vi_o(grp_start_tx_fu_119_write_pointer_vi_o),
    .write_pointer_vi_o_ap_vld(grp_start_tx_fu_119_write_pointer_vi_o_ap_vld),
    .available_spaces_vo_i(available_spaces_vo_i),
    .available_spaces_vo_o(grp_start_tx_fu_119_available_spaces_vo_o),
    .available_spaces_vo_o_ap_vld(grp_start_tx_fu_119_available_spaces_vo_o_ap_vld),
    .write_pointer_vo_i(write_pointer_vo_i),
    .write_pointer_vo_o(grp_start_tx_fu_119_write_pointer_vo_o),
    .write_pointer_vo_o_ap_vld(grp_start_tx_fu_119_write_pointer_vo_o_ap_vld),
    .edca_queues_address0(grp_start_tx_fu_119_edca_queues_address0),
    .edca_queues_ce0(grp_start_tx_fu_119_edca_queues_ce0),
    .edca_queues_we0(grp_start_tx_fu_119_edca_queues_we0),
    .edca_queues_d0(grp_start_tx_fu_119_edca_queues_d0),
    .edca_queues_q0(edca_queues_q0),
    .read_pointer_bk_i(read_pointer_bk_i),
    .read_pointer_bk_o(grp_start_tx_fu_119_read_pointer_bk_o),
    .read_pointer_bk_o_ap_vld(grp_start_tx_fu_119_read_pointer_bk_o_ap_vld),
    .read_pointer_be_i(read_pointer_be_i),
    .read_pointer_be_o(grp_start_tx_fu_119_read_pointer_be_o),
    .read_pointer_be_o_ap_vld(grp_start_tx_fu_119_read_pointer_be_o_ap_vld),
    .read_pointer_vi_i(read_pointer_vi_i),
    .read_pointer_vi_o(grp_start_tx_fu_119_read_pointer_vi_o),
    .read_pointer_vi_o_ap_vld(grp_start_tx_fu_119_read_pointer_vi_o_ap_vld),
    .read_pointer_vo_i(read_pointer_vo_i),
    .read_pointer_vo_o(grp_start_tx_fu_119_read_pointer_vo_o),
    .read_pointer_vo_o_ap_vld(grp_start_tx_fu_119_read_pointer_vo_o_ap_vld)
);

backoff_vo grp_backoff_vo_fu_153(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_backoff_vo_fu_153_ap_start),
    .ap_done(grp_backoff_vo_fu_153_ap_done),
    .ap_idle(grp_backoff_vo_fu_153_ap_idle),
    .ap_ready(grp_backoff_vo_fu_153_ap_ready),
    .current_txop_holder(grp_backoff_vo_fu_153_current_txop_holder),
    .current_txop_holder_ap_vld(grp_backoff_vo_fu_153_current_txop_holder_ap_vld),
    .available_spaces_vo(available_spaces_vo_i),
    .vo_backoff_counter_i(vo_backoff_counter_i),
    .vo_backoff_counter_o(grp_backoff_vo_fu_153_vo_backoff_counter_o),
    .vo_backoff_counter_o_ap_vld(grp_backoff_vo_fu_153_vo_backoff_counter_o_ap_vld),
    .rand_state_i(rand_state_i),
    .rand_state_o(grp_backoff_vo_fu_153_rand_state_o),
    .rand_state_o_ap_vld(grp_backoff_vo_fu_153_rand_state_o_ap_vld)
);

start_backoff_vi grp_start_backoff_vi_fu_165(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_start_backoff_vi_fu_165_ap_start),
    .ap_done(grp_start_backoff_vi_fu_165_ap_done),
    .ap_idle(grp_start_backoff_vi_fu_165_ap_idle),
    .ap_ready(grp_start_backoff_vi_fu_165_ap_ready),
    .invoke_reason(grp_start_backoff_vi_fu_165_invoke_reason),
    .CW_vi_i(CW_vi_i),
    .CW_vi_o(grp_start_backoff_vi_fu_165_CW_vi_o),
    .CW_vi_o_ap_vld(grp_start_backoff_vi_fu_165_CW_vi_o_ap_vld),
    .rand_state_i(rand_state_i),
    .rand_state_o(grp_start_backoff_vi_fu_165_rand_state_o),
    .rand_state_o_ap_vld(grp_start_backoff_vi_fu_165_rand_state_o_ap_vld),
    .vi_backoff_counter(grp_start_backoff_vi_fu_165_vi_backoff_counter),
    .vi_backoff_counter_ap_vld(grp_start_backoff_vi_fu_165_vi_backoff_counter_ap_vld)
);

start_backoff_be grp_start_backoff_be_fu_178(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_start_backoff_be_fu_178_ap_start),
    .ap_done(grp_start_backoff_be_fu_178_ap_done),
    .ap_idle(grp_start_backoff_be_fu_178_ap_idle),
    .ap_ready(grp_start_backoff_be_fu_178_ap_ready),
    .invoke_reason(grp_start_backoff_be_fu_178_invoke_reason),
    .CW_be_i(CW_be_i),
    .CW_be_o(grp_start_backoff_be_fu_178_CW_be_o),
    .CW_be_o_ap_vld(grp_start_backoff_be_fu_178_CW_be_o_ap_vld),
    .rand_state_i(rand_state_i),
    .rand_state_o(grp_start_backoff_be_fu_178_rand_state_o),
    .rand_state_o_ap_vld(grp_start_backoff_be_fu_178_rand_state_o_ap_vld),
    .be_backoff_counter(grp_start_backoff_be_fu_178_be_backoff_counter),
    .be_backoff_counter_ap_vld(grp_start_backoff_be_fu_178_be_backoff_counter_ap_vld)
);

start_backoff_bk grp_start_backoff_bk_fu_191(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_start_backoff_bk_fu_191_ap_start),
    .ap_done(grp_start_backoff_bk_fu_191_ap_done),
    .ap_idle(grp_start_backoff_bk_fu_191_ap_idle),
    .ap_ready(grp_start_backoff_bk_fu_191_ap_ready),
    .invoke_reason(grp_start_backoff_bk_fu_191_invoke_reason),
    .CW_bk_i(CW_bk_i),
    .CW_bk_o(grp_start_backoff_bk_fu_191_CW_bk_o),
    .CW_bk_o_ap_vld(grp_start_backoff_bk_fu_191_CW_bk_o_ap_vld),
    .rand_state_i(rand_state_i),
    .rand_state_o(grp_start_backoff_bk_fu_191_rand_state_o),
    .rand_state_o_ap_vld(grp_start_backoff_bk_fu_191_rand_state_o_ap_vld),
    .bk_backoff_counter(grp_start_backoff_bk_fu_191_bk_backoff_counter),
    .bk_backoff_counter_ap_vld(grp_start_backoff_bk_fu_191_bk_backoff_counter_ap_vld)
);

slot_boundary_timing grp_slot_boundary_timing_fu_204(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_slot_boundary_timing_fu_204_ap_start),
    .ap_done(grp_slot_boundary_timing_fu_204_ap_done),
    .ap_idle(grp_slot_boundary_timing_fu_204_ap_idle),
    .ap_ready(grp_slot_boundary_timing_fu_204_ap_ready),
    .timing_mode(grp_slot_boundary_timing_fu_204_timing_mode),
    .medium_state(medium_state),
    .ap_return(grp_slot_boundary_timing_fu_204_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_backoff_vo_fu_153_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_idle_waited_0_phi_fu_112_p4 == 1'd1))) begin
            grp_backoff_vo_fu_153_ap_start_reg <= 1'b1;
        end else if ((grp_backoff_vo_fu_153_ap_ready == 1'b1)) begin
            grp_backoff_vo_fu_153_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_slot_boundary_timing_fu_204_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14) & (grp_fu_213_p2 == 1'd1)))) begin
            grp_slot_boundary_timing_fu_204_ap_start_reg <= 1'b1;
        end else if ((grp_slot_boundary_timing_fu_204_ap_ready == 1'b1)) begin
            grp_slot_boundary_timing_fu_204_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_start_backoff_be_fu_178_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
            grp_start_backoff_be_fu_178_ap_start_reg <= 1'b1;
        end else if ((grp_start_backoff_be_fu_178_ap_ready == 1'b1)) begin
            grp_start_backoff_be_fu_178_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_start_backoff_bk_fu_191_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13))) begin
            grp_start_backoff_bk_fu_191_ap_start_reg <= 1'b1;
        end else if ((grp_start_backoff_bk_fu_191_ap_ready == 1'b1)) begin
            grp_start_backoff_bk_fu_191_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_start_backoff_vi_fu_165_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
            grp_start_backoff_vi_fu_165_ap_start_reg <= 1'b1;
        end else if ((grp_start_backoff_vi_fu_165_ap_ready == 1'b1)) begin
            grp_start_backoff_vi_fu_165_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_start_tx_fu_119_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14) & (grp_fu_213_p2 == 1'd0))) begin
            grp_start_tx_fu_119_ap_start_reg <= 1'b1;
        end else if ((grp_start_tx_fu_119_ap_ready == 1'b1)) begin
            grp_start_tx_fu_119_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_slot_boundary_timing_fu_204_ap_done == 1'b1))) begin
        idle_waited_0_reg_109 <= grp_slot_boundary_timing_fu_204_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        idle_waited_0_reg_109 <= idle_waited_reg_343;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14))) begin
        current_txop_holder_6_reg_384 <= current_txop_holder_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_fu_223_p3 == 1'd0))) begin
        icmp_ln268_reg_352 <= icmp_ln268_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln268_fu_235_p2 == 1'd1) & (tmp_fu_223_p3 == 1'd0))) begin
        icmp_ln269_reg_356 <= icmp_ln269_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_on_subcall_done) & (tmp_7_fu_263_p3 == 1'd0))) begin
        icmp_ln286_reg_364 <= icmp_ln286_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_on_subcall_done) & (icmp_ln286_fu_275_p2 == 1'd1) & (tmp_7_fu_263_p3 == 1'd0))) begin
        icmp_ln287_reg_368 <= icmp_ln287_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (tmp_9_fu_313_p3 == 1'd0))) begin
        icmp_ln304_reg_376 <= icmp_ln304_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln304_fu_325_p2 == 1'd1) & (tmp_9_fu_313_p3 == 1'd0))) begin
        icmp_ln305_reg_380 <= grp_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_slot_boundary_timing_fu_204_ap_done == 1'b1))) begin
        idle_waited_reg_343 <= grp_slot_boundary_timing_fu_204_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_on_subcall_done))) begin
        tmp_7_reg_360 <= available_spaces_be_i[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_9_reg_372 <= available_spaces_bk_i[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_348 <= available_spaces_vi_i[32'd2];
    end
end

always @ (*) begin
    if ((((ap_predicate_op61_call_state11 == 1'b1) & (grp_start_backoff_be_fu_178_CW_be_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_predicate_op59_call_state11 == 1'b1) & (grp_start_backoff_be_fu_178_CW_be_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        CW_be_o = grp_start_backoff_be_fu_178_CW_be_o;
    end else begin
        CW_be_o = CW_be_i;
    end
end

always @ (*) begin
    if ((((ap_predicate_op61_call_state11 == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_predicate_op59_call_state11 == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        CW_be_o_ap_vld = grp_start_backoff_be_fu_178_CW_be_o_ap_vld;
    end else begin
        CW_be_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op80_call_state14 == 1'b1) & (grp_start_backoff_bk_fu_191_CW_bk_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((ap_predicate_op78_call_state14 == 1'b1) & (grp_start_backoff_bk_fu_191_CW_bk_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        CW_bk_o = grp_start_backoff_bk_fu_191_CW_bk_o;
    end else begin
        CW_bk_o = CW_bk_i;
    end
end

always @ (*) begin
    if ((((ap_predicate_op80_call_state14 == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((ap_predicate_op78_call_state14 == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        CW_bk_o_ap_vld = grp_start_backoff_bk_fu_191_CW_bk_o_ap_vld;
    end else begin
        CW_bk_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op41_call_state8 == 1'b1) & (grp_start_backoff_vi_fu_165_CW_vi_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_predicate_op39_call_state8 == 1'b1) & (grp_start_backoff_vi_fu_165_CW_vi_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        CW_vi_o = grp_start_backoff_vi_fu_165_CW_vi_o;
    end else begin
        CW_vi_o = CW_vi_i;
    end
end

always @ (*) begin
    if ((((ap_predicate_op41_call_state8 == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_predicate_op39_call_state8 == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        CW_vi_o_ap_vld = grp_start_backoff_vi_fu_165_CW_vi_o_ap_vld;
    end else begin
        CW_vi_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state17_on_subcall_done) & (1'b1 == ap_CS_fsm_state17)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state17_on_subcall_done) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_start_tx_fu_119_available_spaces_be_o_ap_vld == 1'b1) & (idle_waited_0_reg_109 == 1'd1))) begin
        available_spaces_be_o = grp_start_tx_fu_119_available_spaces_be_o;
    end else begin
        available_spaces_be_o = available_spaces_be_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (idle_waited_0_reg_109 == 1'd1))) begin
        available_spaces_be_o_ap_vld = grp_start_tx_fu_119_available_spaces_be_o_ap_vld;
    end else begin
        available_spaces_be_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_start_tx_fu_119_available_spaces_bk_o_ap_vld == 1'b1) & (idle_waited_0_reg_109 == 1'd1))) begin
        available_spaces_bk_o = grp_start_tx_fu_119_available_spaces_bk_o;
    end else begin
        available_spaces_bk_o = available_spaces_bk_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (idle_waited_0_reg_109 == 1'd1))) begin
        available_spaces_bk_o_ap_vld = grp_start_tx_fu_119_available_spaces_bk_o_ap_vld;
    end else begin
        available_spaces_bk_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_start_tx_fu_119_available_spaces_vi_o_ap_vld == 1'b1) & (idle_waited_0_reg_109 == 1'd1))) begin
        available_spaces_vi_o = grp_start_tx_fu_119_available_spaces_vi_o;
    end else begin
        available_spaces_vi_o = available_spaces_vi_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (idle_waited_0_reg_109 == 1'd1))) begin
        available_spaces_vi_o_ap_vld = grp_start_tx_fu_119_available_spaces_vi_o_ap_vld;
    end else begin
        available_spaces_vi_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_start_tx_fu_119_available_spaces_vo_o_ap_vld == 1'b1) & (idle_waited_0_reg_109 == 1'd1))) begin
        available_spaces_vo_o = grp_start_tx_fu_119_available_spaces_vo_o;
    end else begin
        available_spaces_vo_o = available_spaces_vo_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (idle_waited_0_reg_109 == 1'd1))) begin
        available_spaces_vo_o_ap_vld = grp_start_tx_fu_119_available_spaces_vo_o_ap_vld;
    end else begin
        available_spaces_vo_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_on_subcall_done) & (icmp_ln286_fu_275_p2 == 1'd0) & (tmp_7_fu_263_p3 == 1'd0))) begin
        be_backoff_counter_o = add_ln296_fu_281_p2;
    end else if ((((ap_predicate_op61_call_state11 == 1'b1) & (grp_start_backoff_be_fu_178_be_backoff_counter_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_predicate_op59_call_state11 == 1'b1) & (grp_start_backoff_be_fu_178_be_backoff_counter_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        be_backoff_counter_o = grp_start_backoff_be_fu_178_be_backoff_counter;
    end else begin
        be_backoff_counter_o = be_backoff_counter_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_on_subcall_done) & (icmp_ln286_fu_275_p2 == 1'd0) & (tmp_7_fu_263_p3 == 1'd0))) begin
        be_backoff_counter_o_ap_vld = 1'b1;
    end else if ((((ap_predicate_op61_call_state11 == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_predicate_op59_call_state11 == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        be_backoff_counter_o_ap_vld = grp_start_backoff_be_fu_178_be_backoff_counter_ap_vld;
    end else begin
        be_backoff_counter_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln304_fu_325_p2 == 1'd0) & (tmp_9_fu_313_p3 == 1'd0))) begin
        bk_backoff_counter_o = add_ln314_fu_331_p2;
    end else if ((((ap_predicate_op80_call_state14 == 1'b1) & (grp_start_backoff_bk_fu_191_bk_backoff_counter_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((ap_predicate_op78_call_state14 == 1'b1) & (grp_start_backoff_bk_fu_191_bk_backoff_counter_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        bk_backoff_counter_o = grp_start_backoff_bk_fu_191_bk_backoff_counter;
    end else begin
        bk_backoff_counter_o = bk_backoff_counter_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln304_fu_325_p2 == 1'd0) & (tmp_9_fu_313_p3 == 1'd0))) begin
        bk_backoff_counter_o_ap_vld = 1'b1;
    end else if ((((ap_predicate_op80_call_state14 == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((ap_predicate_op78_call_state14 == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        bk_backoff_counter_o_ap_vld = grp_start_backoff_bk_fu_191_bk_backoff_counter_ap_vld;
    end else begin
        bk_backoff_counter_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state17_on_subcall_done) & (1'b1 == ap_CS_fsm_state17) & (idle_waited_0_reg_109 == 1'd1))) begin
        current_txop_holder_o = 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        current_txop_holder_o = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        current_txop_holder_o = 3'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        current_txop_holder_o = 3'd3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_backoff_vo_fu_153_current_txop_holder_ap_vld == 1'b1))) begin
        current_txop_holder_o = grp_backoff_vo_fu_153_current_txop_holder;
    end else begin
        current_txop_holder_o = current_txop_holder_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_state17_on_subcall_done) & (1'b1 == ap_CS_fsm_state17) & (idle_waited_0_reg_109 == 1'd1)))) begin
        current_txop_holder_o_ap_vld = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        current_txop_holder_o_ap_vld = grp_backoff_vo_fu_153_current_txop_holder_ap_vld;
    end else begin
        current_txop_holder_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_slot_boundary_timing_fu_204_timing_mode = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_slot_boundary_timing_fu_204_timing_mode = 3'd4;
    end else begin
        grp_slot_boundary_timing_fu_204_timing_mode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        if ((ap_predicate_op61_call_state11 == 1'b1)) begin
            grp_start_backoff_be_fu_178_invoke_reason = 1'd0;
        end else if ((ap_predicate_op59_call_state11 == 1'b1)) begin
            grp_start_backoff_be_fu_178_invoke_reason = 1'd1;
        end else begin
            grp_start_backoff_be_fu_178_invoke_reason = 'bx;
        end
    end else begin
        grp_start_backoff_be_fu_178_invoke_reason = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if ((ap_predicate_op80_call_state14 == 1'b1)) begin
            grp_start_backoff_bk_fu_191_invoke_reason = 1'd0;
        end else if ((ap_predicate_op78_call_state14 == 1'b1)) begin
            grp_start_backoff_bk_fu_191_invoke_reason = 1'd1;
        end else begin
            grp_start_backoff_bk_fu_191_invoke_reason = 'bx;
        end
    end else begin
        grp_start_backoff_bk_fu_191_invoke_reason = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        if ((ap_predicate_op41_call_state8 == 1'b1)) begin
            grp_start_backoff_vi_fu_165_invoke_reason = 1'd0;
        end else if ((ap_predicate_op39_call_state8 == 1'b1)) begin
            grp_start_backoff_vi_fu_165_invoke_reason = 1'd1;
        end else begin
            grp_start_backoff_vi_fu_165_invoke_reason = 'bx;
        end
    end else begin
        grp_start_backoff_vi_fu_165_invoke_reason = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op80_call_state14 == 1'b1) & (grp_start_backoff_bk_fu_191_rand_state_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((ap_predicate_op78_call_state14 == 1'b1) & (grp_start_backoff_bk_fu_191_rand_state_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        rand_state_o = grp_start_backoff_bk_fu_191_rand_state_o;
    end else if ((((ap_predicate_op61_call_state11 == 1'b1) & (grp_start_backoff_be_fu_178_rand_state_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_predicate_op59_call_state11 == 1'b1) & (grp_start_backoff_be_fu_178_rand_state_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        rand_state_o = grp_start_backoff_be_fu_178_rand_state_o;
    end else if ((((ap_predicate_op41_call_state8 == 1'b1) & (grp_start_backoff_vi_fu_165_rand_state_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_predicate_op39_call_state8 == 1'b1) & (grp_start_backoff_vi_fu_165_rand_state_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        rand_state_o = grp_start_backoff_vi_fu_165_rand_state_o;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_backoff_vo_fu_153_rand_state_o_ap_vld == 1'b1))) begin
        rand_state_o = grp_backoff_vo_fu_153_rand_state_o;
    end else begin
        rand_state_o = rand_state_i;
    end
end

always @ (*) begin
    if ((((ap_predicate_op80_call_state14 == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((ap_predicate_op78_call_state14 == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        rand_state_o_ap_vld = grp_start_backoff_bk_fu_191_rand_state_o_ap_vld;
    end else if ((((ap_predicate_op61_call_state11 == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_predicate_op59_call_state11 == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        rand_state_o_ap_vld = grp_start_backoff_be_fu_178_rand_state_o_ap_vld;
    end else if ((((ap_predicate_op41_call_state8 == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_predicate_op39_call_state8 == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        rand_state_o_ap_vld = grp_start_backoff_vi_fu_165_rand_state_o_ap_vld;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rand_state_o_ap_vld = grp_backoff_vo_fu_153_rand_state_o_ap_vld;
    end else begin
        rand_state_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_start_tx_fu_119_read_pointer_be_o_ap_vld == 1'b1) & (idle_waited_0_reg_109 == 1'd1))) begin
        read_pointer_be_o = grp_start_tx_fu_119_read_pointer_be_o;
    end else begin
        read_pointer_be_o = read_pointer_be_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_start_tx_fu_119_read_pointer_bk_o_ap_vld == 1'b1) & (idle_waited_0_reg_109 == 1'd1))) begin
        read_pointer_bk_o = grp_start_tx_fu_119_read_pointer_bk_o;
    end else begin
        read_pointer_bk_o = read_pointer_bk_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_start_tx_fu_119_read_pointer_vi_o_ap_vld == 1'b1) & (idle_waited_0_reg_109 == 1'd1))) begin
        read_pointer_vi_o = grp_start_tx_fu_119_read_pointer_vi_o;
    end else begin
        read_pointer_vi_o = read_pointer_vi_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_start_tx_fu_119_read_pointer_vo_o_ap_vld == 1'b1) & (idle_waited_0_reg_109 == 1'd1))) begin
        read_pointer_vo_o = grp_start_tx_fu_119_read_pointer_vo_o;
    end else begin
        read_pointer_vo_o = read_pointer_vo_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln268_fu_235_p2 == 1'd0) & (tmp_fu_223_p3 == 1'd0))) begin
        vi_backoff_counter_o = add_ln278_fu_241_p2;
    end else if ((((ap_predicate_op41_call_state8 == 1'b1) & (grp_start_backoff_vi_fu_165_vi_backoff_counter_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_predicate_op39_call_state8 == 1'b1) & (grp_start_backoff_vi_fu_165_vi_backoff_counter_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        vi_backoff_counter_o = grp_start_backoff_vi_fu_165_vi_backoff_counter;
    end else begin
        vi_backoff_counter_o = vi_backoff_counter_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln268_fu_235_p2 == 1'd0) & (tmp_fu_223_p3 == 1'd0))) begin
        vi_backoff_counter_o_ap_vld = 1'b1;
    end else if ((((ap_predicate_op41_call_state8 == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_predicate_op39_call_state8 == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        vi_backoff_counter_o_ap_vld = grp_start_backoff_vi_fu_165_vi_backoff_counter_ap_vld;
    end else begin
        vi_backoff_counter_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_backoff_vo_fu_153_vo_backoff_counter_o_ap_vld == 1'b1))) begin
        vo_backoff_counter_o = grp_backoff_vo_fu_153_vo_backoff_counter_o;
    end else begin
        vo_backoff_counter_o = vo_backoff_counter_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_start_tx_fu_119_write_pointer_be_o_ap_vld == 1'b1) & (idle_waited_0_reg_109 == 1'd1))) begin
        write_pointer_be_o = grp_start_tx_fu_119_write_pointer_be_o;
    end else begin
        write_pointer_be_o = write_pointer_be_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_start_tx_fu_119_write_pointer_bk_o_ap_vld == 1'b1) & (idle_waited_0_reg_109 == 1'd1))) begin
        write_pointer_bk_o = grp_start_tx_fu_119_write_pointer_bk_o;
    end else begin
        write_pointer_bk_o = write_pointer_bk_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_start_tx_fu_119_write_pointer_vi_o_ap_vld == 1'b1) & (idle_waited_0_reg_109 == 1'd1))) begin
        write_pointer_vi_o = grp_start_tx_fu_119_write_pointer_vi_o;
    end else begin
        write_pointer_vi_o = write_pointer_vi_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_start_tx_fu_119_write_pointer_vo_o_ap_vld == 1'b1) & (idle_waited_0_reg_109 == 1'd1))) begin
        write_pointer_vo_o = grp_start_tx_fu_119_write_pointer_vo_o;
    end else begin
        write_pointer_vo_o = write_pointer_vo_i;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_slot_boundary_timing_fu_204_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_idle_waited_0_phi_fu_112_p4 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((grp_backoff_vo_fu_153_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln269_fu_253_p2 == 1'd1) & (icmp_ln268_fu_235_p2 == 1'd1) & (tmp_fu_223_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln269_fu_253_p2 == 1'd0) & (icmp_ln268_fu_235_p2 == 1'd1) & (tmp_fu_223_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_on_subcall_done) & (icmp_ln287_fu_303_p2 == 1'd1) & (icmp_ln286_fu_275_p2 == 1'd1) & (tmp_7_fu_263_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_on_subcall_done) & (icmp_ln286_fu_275_p2 == 1'd1) & (icmp_ln287_fu_303_p2 == 1'd0) & (tmp_7_fu_263_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_on_subcall_done) & ((tmp_7_fu_263_p3 == 1'd1) | (icmp_ln286_fu_275_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (grp_fu_213_p2 == 1'd1) & (icmp_ln304_fu_325_p2 == 1'd1) & (tmp_9_fu_313_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln304_fu_325_p2 == 1'd1) & (grp_fu_213_p2 == 1'd0) & (tmp_9_fu_313_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11) & ((tmp_9_fu_313_p3 == 1'd1) | (icmp_ln304_fu_325_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14) & (grp_fu_213_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14) & (grp_fu_213_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_slot_boundary_timing_fu_204_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b0 == ap_block_state17_on_subcall_done) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln278_fu_241_p2 = ($signed(vi_backoff_counter_i) + $signed(10'd1023));

assign add_ln296_fu_281_p2 = ($signed(be_backoff_counter_i) + $signed(10'd1023));

assign add_ln314_fu_331_p2 = ($signed(bk_backoff_counter_i) + $signed(10'd1023));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11_on_subcall_done = (((grp_start_backoff_be_fu_178_ap_done == 1'b0) & (ap_predicate_op61_call_state11 == 1'b1)) | ((grp_start_backoff_be_fu_178_ap_done == 1'b0) & (ap_predicate_op59_call_state11 == 1'b1)));
end

always @ (*) begin
    ap_block_state14_on_subcall_done = (((grp_start_backoff_bk_fu_191_ap_done == 1'b0) & (ap_predicate_op80_call_state14 == 1'b1)) | ((grp_start_backoff_bk_fu_191_ap_done == 1'b0) & (ap_predicate_op78_call_state14 == 1'b1)));
end

always @ (*) begin
    ap_block_state17_on_subcall_done = ((grp_start_tx_fu_119_ap_done == 1'b0) & (idle_waited_0_reg_109 == 1'd1));
end

always @ (*) begin
    ap_block_state8_on_subcall_done = (((grp_start_backoff_vi_fu_165_ap_done == 1'b0) & (ap_predicate_op41_call_state8 == 1'b1)) | ((grp_start_backoff_vi_fu_165_ap_done == 1'b0) & (ap_predicate_op39_call_state8 == 1'b1)));
end

assign ap_phi_mux_idle_waited_0_phi_fu_112_p4 = idle_waited_0_reg_109;

always @ (*) begin
    ap_predicate_op39_call_state8 = ((icmp_ln269_reg_356 == 1'd0) & (icmp_ln268_reg_352 == 1'd1) & (tmp_reg_348 == 1'd0));
end

always @ (*) begin
    ap_predicate_op41_call_state8 = ((icmp_ln269_reg_356 == 1'd1) & (icmp_ln268_reg_352 == 1'd1) & (tmp_reg_348 == 1'd0));
end

always @ (*) begin
    ap_predicate_op59_call_state11 = ((icmp_ln286_reg_364 == 1'd1) & (icmp_ln287_reg_368 == 1'd0) & (tmp_7_reg_360 == 1'd0));
end

always @ (*) begin
    ap_predicate_op61_call_state11 = ((icmp_ln287_reg_368 == 1'd1) & (icmp_ln286_reg_364 == 1'd1) & (tmp_7_reg_360 == 1'd0));
end

always @ (*) begin
    ap_predicate_op78_call_state14 = ((icmp_ln304_reg_376 == 1'd1) & (icmp_ln305_reg_380 == 1'd0) & (tmp_9_reg_372 == 1'd0));
end

always @ (*) begin
    ap_predicate_op80_call_state14 = ((icmp_ln305_reg_380 == 1'd1) & (icmp_ln304_reg_376 == 1'd1) & (tmp_9_reg_372 == 1'd0));
end

assign edca_queues_address0 = grp_start_tx_fu_119_edca_queues_address0;

assign edca_queues_ce0 = grp_start_tx_fu_119_edca_queues_ce0;

assign edca_queues_d0 = grp_start_tx_fu_119_edca_queues_d0;

assign edca_queues_we0 = grp_start_tx_fu_119_edca_queues_we0;

assign frame_to_transfer_address0 = grp_start_tx_fu_119_tx_frame_address0;

assign frame_to_transfer_ce0 = grp_start_tx_fu_119_tx_frame_ce0;

assign frame_to_transfer_d0 = grp_start_tx_fu_119_tx_frame_d0;

assign frame_to_transfer_we0 = grp_start_tx_fu_119_tx_frame_we0;

assign grp_backoff_vo_fu_153_ap_start = grp_backoff_vo_fu_153_ap_start_reg;

assign grp_fu_213_p2 = ((current_txop_holder_i == 3'd0) ? 1'b1 : 1'b0);

assign grp_slot_boundary_timing_fu_204_ap_start = grp_slot_boundary_timing_fu_204_ap_start_reg;

assign grp_start_backoff_be_fu_178_ap_start = grp_start_backoff_be_fu_178_ap_start_reg;

assign grp_start_backoff_bk_fu_191_ap_start = grp_start_backoff_bk_fu_191_ap_start_reg;

assign grp_start_backoff_vi_fu_165_ap_start = grp_start_backoff_vi_fu_165_ap_start_reg;

assign grp_start_tx_fu_119_ap_start = grp_start_tx_fu_119_ap_start_reg;

assign icmp_ln268_fu_235_p2 = ((vi_backoff_counter_i == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln269_fu_253_p2 = ((current_txop_holder_i < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln286_fu_275_p2 = ((be_backoff_counter_i == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_303_p2 = ((tmp_8_fu_293_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln304_fu_325_p2 = ((bk_backoff_counter_i == 10'd0) ? 1'b1 : 1'b0);

assign read_pointer_be_o_ap_vld = grp_start_tx_fu_119_read_pointer_be_o_ap_vld;

assign read_pointer_bk_o_ap_vld = grp_start_tx_fu_119_read_pointer_bk_o_ap_vld;

assign read_pointer_vi_o_ap_vld = grp_start_tx_fu_119_read_pointer_vi_o_ap_vld;

assign read_pointer_vo_o_ap_vld = grp_start_tx_fu_119_read_pointer_vo_o_ap_vld;

assign tmp_7_fu_263_p3 = available_spaces_be_i[32'd2];

assign tmp_8_fu_293_p4 = {{current_txop_holder_i[2:1]}};

assign tmp_9_fu_313_p3 = available_spaces_bk_i[32'd2];

assign tmp_fu_223_p3 = available_spaces_vi_i[32'd2];

assign vo_backoff_counter_o_ap_vld = grp_backoff_vo_fu_153_vo_backoff_counter_o_ap_vld;

assign write_pointer_be_o_ap_vld = grp_start_tx_fu_119_write_pointer_be_o_ap_vld;

assign write_pointer_bk_o_ap_vld = grp_start_tx_fu_119_write_pointer_bk_o_ap_vld;

assign write_pointer_vi_o_ap_vld = grp_start_tx_fu_119_write_pointer_vi_o_ap_vld;

assign write_pointer_vo_o_ap_vld = grp_start_tx_fu_119_write_pointer_vo_o_ap_vld;

endmodule //initial_edca_process
