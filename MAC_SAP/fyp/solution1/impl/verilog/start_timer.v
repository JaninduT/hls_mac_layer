// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module start_timer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        count_idle,
        medium_state,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] count_idle;
input  [0:0] medium_state;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] count_idle_read_read_fu_36_p2;
wire    ap_CS_fsm_state2;
wire   [19:0] i_fu_130_p2;
wire    ap_CS_fsm_state3;
reg   [19:0] i_0_reg_48;
wire   [0:0] icmp_ln8_fu_124_p2;
wire   [0:0] medium_state_read_read_fu_42_p2;
reg   [0:0] ap_phi_mux_timeout_write_assign_phi_fu_62_p4;
reg   [6:0] total_count_fu_28;
reg   [15:0] tc_fu_32;
wire   [15:0] grp_fu_73_p2;
wire  signed [7:0] sext_ln8_1_fu_106_p1;
wire   [8:0] zext_ln8_1_fu_110_p1;
wire   [8:0] add_ln8_fu_114_p2;
wire   [20:0] zext_ln8_fu_99_p1;
wire  signed [20:0] sext_ln8_fu_120_p1;
reg   [0:0] ap_return_preg;
reg   [2:0] ap_NS_fsm;
reg    ap_condition_61;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln8_fu_124_p2 == 1'd0) | ((medium_state_read_read_fu_42_p2 == 1'd0) & (count_idle_read_read_fu_36_p2 == 1'd1))))) begin
            ap_return_preg <= ap_phi_mux_timeout_write_assign_phi_fu_62_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (((icmp_ln8_fu_124_p2 == 1'd1) & (count_idle_read_read_fu_36_p2 == 1'd0)) | ((medium_state_read_read_fu_42_p2 == 1'd1) & (icmp_ln8_fu_124_p2 == 1'd1))))) begin
        i_0_reg_48 <= i_fu_130_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_reg_48 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln8_fu_124_p2 == 1'd1) & (count_idle_read_read_fu_36_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((medium_state_read_read_fu_42_p2 == 1'd1) & (icmp_ln8_fu_124_p2 == 1'd1) & (count_idle_read_read_fu_36_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        tc_fu_32 <= grp_fu_73_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tc_fu_32 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
                total_count_fu_28[3] <= 1'b1;
        total_count_fu_28[6] <= 1'b1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                total_count_fu_28[3] <= 1'b0;
        total_count_fu_28[6] <= 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & ((icmp_ln8_fu_124_p2 == 1'd0) | ((medium_state_read_read_fu_42_p2 == 1'd0) & (count_idle_read_read_fu_36_p2 == 1'd1)))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'b1 == ap_condition_61)) begin
            ap_phi_mux_timeout_write_assign_phi_fu_62_p4 = 1'd0;
        end else if ((icmp_ln8_fu_124_p2 == 1'd0)) begin
            ap_phi_mux_timeout_write_assign_phi_fu_62_p4 = 1'd1;
        end else begin
            ap_phi_mux_timeout_write_assign_phi_fu_62_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_timeout_write_assign_phi_fu_62_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln8_fu_124_p2 == 1'd0) | ((medium_state_read_read_fu_42_p2 == 1'd0) & (count_idle_read_read_fu_36_p2 == 1'd1))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln8_fu_124_p2 == 1'd0) | ((medium_state_read_read_fu_42_p2 == 1'd0) & (count_idle_read_read_fu_36_p2 == 1'd1))))) begin
        ap_return = ap_phi_mux_timeout_write_assign_phi_fu_62_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln8_fu_124_p2 == 1'd0) | ((medium_state_read_read_fu_42_p2 == 1'd0) & (count_idle_read_read_fu_36_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln8_fu_114_p2 = ($signed(zext_ln8_1_fu_110_p1) + $signed(9'd510));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_condition_61 = ((medium_state_read_read_fu_42_p2 == 1'd0) & (icmp_ln8_fu_124_p2 == 1'd1) & (count_idle_read_read_fu_36_p2 == 1'd1));
end

assign count_idle_read_read_fu_36_p2 = count_idle;

assign grp_fu_73_p2 = (tc_fu_32 + 16'd1);

assign i_fu_130_p2 = (i_0_reg_48 + 20'd1);

assign icmp_ln8_fu_124_p2 = (($signed(zext_ln8_fu_99_p1) < $signed(sext_ln8_fu_120_p1)) ? 1'b1 : 1'b0);

assign medium_state_read_read_fu_42_p2 = medium_state;

assign sext_ln8_1_fu_106_p1 = $signed(total_count_fu_28);

assign sext_ln8_fu_120_p1 = $signed(add_ln8_fu_114_p2);

assign zext_ln8_1_fu_110_p1 = $unsigned(sext_ln8_1_fu_106_p1);

assign zext_ln8_fu_99_p1 = i_0_reg_48;

always @ (posedge ap_clk) begin
    total_count_fu_28[2:0] <= 3'b000;
    total_count_fu_28[5:4] <= 2'b00;
end

endmodule //start_timer
