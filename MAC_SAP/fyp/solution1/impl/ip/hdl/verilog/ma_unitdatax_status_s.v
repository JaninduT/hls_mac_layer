// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ma_unitdatax_status_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        trans_sts
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] trans_sts;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] successful;
reg   [7:0] unsupported_priority;
reg   [7:0] unsupported_service_s;
reg   [7:0] unsupported_channel_s;
reg   [7:0] unsupported_tx_param;
reg   [7:0] queue_full;
wire   [7:0] add_ln14_fu_148_p2;
wire   [0:0] icmp_ln13_fu_34_p2;
wire   [7:0] add_ln16_fu_132_p2;
wire   [0:0] icmp_ln15_fu_40_p2;
wire   [7:0] add_ln18_fu_116_p2;
wire   [0:0] icmp_ln17_fu_46_p2;
wire   [7:0] add_ln20_fu_100_p2;
wire   [0:0] icmp_ln19_fu_52_p2;
wire   [7:0] add_ln22_fu_84_p2;
wire   [0:0] icmp_ln21_fu_58_p2;
wire   [7:0] add_ln24_fu_68_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 successful = 8'd0;
#0 unsupported_priority = 8'd0;
#0 unsupported_service_s = 8'd0;
#0 unsupported_channel_s = 8'd0;
#0 unsupported_tx_param = 8'd0;
#0 queue_full = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln21_fu_58_p2 == 1'd0) & (icmp_ln19_fu_52_p2 == 1'd0) & (icmp_ln17_fu_46_p2 == 1'd0) & (icmp_ln15_fu_40_p2 == 1'd0) & (icmp_ln13_fu_34_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        queue_full <= add_ln24_fu_68_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln13_fu_34_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        successful <= add_ln14_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln17_fu_46_p2 == 1'd0) & (icmp_ln15_fu_40_p2 == 1'd0) & (icmp_ln19_fu_52_p2 == 1'd1) & (icmp_ln13_fu_34_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        unsupported_channel_s <= add_ln20_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln15_fu_40_p2 == 1'd1) & (icmp_ln13_fu_34_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        unsupported_priority <= add_ln16_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln15_fu_40_p2 == 1'd0) & (icmp_ln17_fu_46_p2 == 1'd1) & (icmp_ln13_fu_34_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        unsupported_service_s <= add_ln18_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln19_fu_52_p2 == 1'd0) & (icmp_ln17_fu_46_p2 == 1'd0) & (icmp_ln15_fu_40_p2 == 1'd0) & (icmp_ln21_fu_58_p2 == 1'd1) & (icmp_ln13_fu_34_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        unsupported_tx_param <= add_ln22_fu_84_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_148_p2 = (successful + 8'd1);

assign add_ln16_fu_132_p2 = (unsupported_priority + 8'd1);

assign add_ln18_fu_116_p2 = (unsupported_service_s + 8'd1);

assign add_ln20_fu_100_p2 = (unsupported_channel_s + 8'd1);

assign add_ln22_fu_84_p2 = (unsupported_tx_param + 8'd1);

assign add_ln24_fu_68_p2 = (queue_full + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign icmp_ln13_fu_34_p2 = ((trans_sts == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_40_p2 = ((trans_sts == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_46_p2 = ((trans_sts == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_52_p2 = ((trans_sts == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_58_p2 = ((trans_sts == 3'd4) ? 1'b1 : 1'b0);

endmodule //ma_unitdatax_status_s
