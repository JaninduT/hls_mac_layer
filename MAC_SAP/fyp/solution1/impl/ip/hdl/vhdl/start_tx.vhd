-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity start_tx is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    current_txop_holder : IN STD_LOGIC_VECTOR (2 downto 0);
    tx_frame_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    tx_frame_ce0 : OUT STD_LOGIC;
    tx_frame_we0 : OUT STD_LOGIC;
    tx_frame_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tx_frame_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    available_spaces_bk_i : IN STD_LOGIC_VECTOR (2 downto 0);
    available_spaces_bk_o : OUT STD_LOGIC_VECTOR (2 downto 0);
    available_spaces_bk_o_ap_vld : OUT STD_LOGIC;
    write_pointer_bk_i : IN STD_LOGIC_VECTOR (1 downto 0);
    write_pointer_bk_o : OUT STD_LOGIC_VECTOR (1 downto 0);
    write_pointer_bk_o_ap_vld : OUT STD_LOGIC;
    available_spaces_be_i : IN STD_LOGIC_VECTOR (2 downto 0);
    available_spaces_be_o : OUT STD_LOGIC_VECTOR (2 downto 0);
    available_spaces_be_o_ap_vld : OUT STD_LOGIC;
    write_pointer_be_i : IN STD_LOGIC_VECTOR (1 downto 0);
    write_pointer_be_o : OUT STD_LOGIC_VECTOR (1 downto 0);
    write_pointer_be_o_ap_vld : OUT STD_LOGIC;
    available_spaces_vi_i : IN STD_LOGIC_VECTOR (2 downto 0);
    available_spaces_vi_o : OUT STD_LOGIC_VECTOR (2 downto 0);
    available_spaces_vi_o_ap_vld : OUT STD_LOGIC;
    write_pointer_vi_i : IN STD_LOGIC_VECTOR (1 downto 0);
    write_pointer_vi_o : OUT STD_LOGIC_VECTOR (1 downto 0);
    write_pointer_vi_o_ap_vld : OUT STD_LOGIC;
    available_spaces_vo_i : IN STD_LOGIC_VECTOR (2 downto 0);
    available_spaces_vo_o : OUT STD_LOGIC_VECTOR (2 downto 0);
    available_spaces_vo_o_ap_vld : OUT STD_LOGIC;
    write_pointer_vo_i : IN STD_LOGIC_VECTOR (1 downto 0);
    write_pointer_vo_o : OUT STD_LOGIC_VECTOR (1 downto 0);
    write_pointer_vo_o_ap_vld : OUT STD_LOGIC;
    edca_queues_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    edca_queues_ce0 : OUT STD_LOGIC;
    edca_queues_we0 : OUT STD_LOGIC;
    edca_queues_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    edca_queues_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    read_pointer_bk_i : IN STD_LOGIC_VECTOR (1 downto 0);
    read_pointer_bk_o : OUT STD_LOGIC_VECTOR (1 downto 0);
    read_pointer_bk_o_ap_vld : OUT STD_LOGIC;
    read_pointer_be_i : IN STD_LOGIC_VECTOR (1 downto 0);
    read_pointer_be_o : OUT STD_LOGIC_VECTOR (1 downto 0);
    read_pointer_be_o_ap_vld : OUT STD_LOGIC;
    read_pointer_vi_i : IN STD_LOGIC_VECTOR (1 downto 0);
    read_pointer_vi_o : OUT STD_LOGIC_VECTOR (1 downto 0);
    read_pointer_vi_o_ap_vld : OUT STD_LOGIC;
    read_pointer_vo_i : IN STD_LOGIC_VECTOR (1 downto 0);
    read_pointer_vo_o : OUT STD_LOGIC_VECTOR (1 downto 0);
    read_pointer_vo_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of start_tx is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln368_fu_83_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln368_reg_90 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_ap_start : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_ap_done : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_ap_idle : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_ap_ready : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_inout_frame_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_inout_frame_ce0 : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_inout_frame_we0 : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_inout_frame_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o_ap_vld : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o_ap_vld : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o_ap_vld : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o_ap_vld : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o_ap_vld : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o_ap_vld : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o_ap_vld : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o_ap_vld : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_edca_queues_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_edca_queues_ce0 : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_edca_queues_we0 : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_edca_queues_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o_ap_vld : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o_ap_vld : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o_ap_vld : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o_ap_vld : STD_LOGIC;
    signal grp_enqueue_dequeue_fram_fu_44_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_enqueue_dequeue_fram_fu_44_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln368_fu_79_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component enqueue_dequeue_fram IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        operation : IN STD_LOGIC_VECTOR (0 downto 0);
        ac : IN STD_LOGIC_VECTOR (1 downto 0);
        inout_frame_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inout_frame_ce0 : OUT STD_LOGIC;
        inout_frame_we0 : OUT STD_LOGIC;
        inout_frame_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        inout_frame_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        available_spaces_bk_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_bk_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_bk_o_ap_vld : OUT STD_LOGIC;
        write_pointer_bk_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_bk_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_bk_o_ap_vld : OUT STD_LOGIC;
        available_spaces_be_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_be_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_be_o_ap_vld : OUT STD_LOGIC;
        write_pointer_be_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_be_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_be_o_ap_vld : OUT STD_LOGIC;
        available_spaces_vi_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vi_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vi_o_ap_vld : OUT STD_LOGIC;
        write_pointer_vi_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vi_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vi_o_ap_vld : OUT STD_LOGIC;
        available_spaces_vo_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vo_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vo_o_ap_vld : OUT STD_LOGIC;
        write_pointer_vo_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vo_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vo_o_ap_vld : OUT STD_LOGIC;
        edca_queues_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        edca_queues_ce0 : OUT STD_LOGIC;
        edca_queues_we0 : OUT STD_LOGIC;
        edca_queues_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        edca_queues_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        read_pointer_bk_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_bk_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_bk_o_ap_vld : OUT STD_LOGIC;
        read_pointer_be_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_be_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_be_o_ap_vld : OUT STD_LOGIC;
        read_pointer_vi_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vi_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vi_o_ap_vld : OUT STD_LOGIC;
        read_pointer_vo_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vo_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vo_o_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    grp_enqueue_dequeue_fram_fu_44 : component enqueue_dequeue_fram
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_enqueue_dequeue_fram_fu_44_ap_start,
        ap_done => grp_enqueue_dequeue_fram_fu_44_ap_done,
        ap_idle => grp_enqueue_dequeue_fram_fu_44_ap_idle,
        ap_ready => grp_enqueue_dequeue_fram_fu_44_ap_ready,
        operation => ap_const_lv1_1,
        ac => add_ln368_reg_90,
        inout_frame_address0 => grp_enqueue_dequeue_fram_fu_44_inout_frame_address0,
        inout_frame_ce0 => grp_enqueue_dequeue_fram_fu_44_inout_frame_ce0,
        inout_frame_we0 => grp_enqueue_dequeue_fram_fu_44_inout_frame_we0,
        inout_frame_d0 => grp_enqueue_dequeue_fram_fu_44_inout_frame_d0,
        inout_frame_q0 => tx_frame_q0,
        available_spaces_bk_i => available_spaces_bk_i,
        available_spaces_bk_o => grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o,
        available_spaces_bk_o_ap_vld => grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o_ap_vld,
        write_pointer_bk_i => write_pointer_bk_i,
        write_pointer_bk_o => grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o,
        write_pointer_bk_o_ap_vld => grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o_ap_vld,
        available_spaces_be_i => available_spaces_be_i,
        available_spaces_be_o => grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o,
        available_spaces_be_o_ap_vld => grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o_ap_vld,
        write_pointer_be_i => write_pointer_be_i,
        write_pointer_be_o => grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o,
        write_pointer_be_o_ap_vld => grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o_ap_vld,
        available_spaces_vi_i => available_spaces_vi_i,
        available_spaces_vi_o => grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o,
        available_spaces_vi_o_ap_vld => grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o_ap_vld,
        write_pointer_vi_i => write_pointer_vi_i,
        write_pointer_vi_o => grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o,
        write_pointer_vi_o_ap_vld => grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o_ap_vld,
        available_spaces_vo_i => available_spaces_vo_i,
        available_spaces_vo_o => grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o,
        available_spaces_vo_o_ap_vld => grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o_ap_vld,
        write_pointer_vo_i => write_pointer_vo_i,
        write_pointer_vo_o => grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o,
        write_pointer_vo_o_ap_vld => grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o_ap_vld,
        edca_queues_address0 => grp_enqueue_dequeue_fram_fu_44_edca_queues_address0,
        edca_queues_ce0 => grp_enqueue_dequeue_fram_fu_44_edca_queues_ce0,
        edca_queues_we0 => grp_enqueue_dequeue_fram_fu_44_edca_queues_we0,
        edca_queues_d0 => grp_enqueue_dequeue_fram_fu_44_edca_queues_d0,
        edca_queues_q0 => edca_queues_q0,
        read_pointer_bk_i => read_pointer_bk_i,
        read_pointer_bk_o => grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o,
        read_pointer_bk_o_ap_vld => grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o_ap_vld,
        read_pointer_be_i => read_pointer_be_i,
        read_pointer_be_o => grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o,
        read_pointer_be_o_ap_vld => grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o_ap_vld,
        read_pointer_vi_i => read_pointer_vi_i,
        read_pointer_vi_o => grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o,
        read_pointer_vi_o_ap_vld => grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o_ap_vld,
        read_pointer_vo_i => read_pointer_vo_i,
        read_pointer_vo_o => grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o,
        read_pointer_vo_o_ap_vld => grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o_ap_vld,
        ap_return => grp_enqueue_dequeue_fram_fu_44_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_enqueue_dequeue_fram_fu_44_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_enqueue_dequeue_fram_fu_44_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_enqueue_dequeue_fram_fu_44_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_enqueue_dequeue_fram_fu_44_ap_ready = ap_const_logic_1)) then 
                    grp_enqueue_dequeue_fram_fu_44_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln368_reg_90 <= add_ln368_fu_83_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_enqueue_dequeue_fram_fu_44_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_enqueue_dequeue_fram_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln368_fu_83_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln368_fu_79_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_enqueue_dequeue_fram_fu_44_ap_done, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_enqueue_dequeue_fram_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_enqueue_dequeue_fram_fu_44_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_enqueue_dequeue_fram_fu_44_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    available_spaces_be_o_assign_proc : process(available_spaces_be_i, grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o, grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o_ap_vld = ap_const_logic_1))) then 
            available_spaces_be_o <= grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o;
        else 
            available_spaces_be_o <= available_spaces_be_i;
        end if; 
    end process;

    available_spaces_be_o_ap_vld <= grp_enqueue_dequeue_fram_fu_44_available_spaces_be_o_ap_vld;

    available_spaces_bk_o_assign_proc : process(available_spaces_bk_i, grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o, grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            available_spaces_bk_o <= grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o;
        else 
            available_spaces_bk_o <= available_spaces_bk_i;
        end if; 
    end process;

    available_spaces_bk_o_ap_vld <= grp_enqueue_dequeue_fram_fu_44_available_spaces_bk_o_ap_vld;

    available_spaces_vi_o_assign_proc : process(available_spaces_vi_i, grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o, grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o_ap_vld = ap_const_logic_1))) then 
            available_spaces_vi_o <= grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o;
        else 
            available_spaces_vi_o <= available_spaces_vi_i;
        end if; 
    end process;

    available_spaces_vi_o_ap_vld <= grp_enqueue_dequeue_fram_fu_44_available_spaces_vi_o_ap_vld;

    available_spaces_vo_o_assign_proc : process(available_spaces_vo_i, grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o, grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o_ap_vld = ap_const_logic_1))) then 
            available_spaces_vo_o <= grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o;
        else 
            available_spaces_vo_o <= available_spaces_vo_i;
        end if; 
    end process;

    available_spaces_vo_o_ap_vld <= grp_enqueue_dequeue_fram_fu_44_available_spaces_vo_o_ap_vld;
    edca_queues_address0 <= grp_enqueue_dequeue_fram_fu_44_edca_queues_address0;
    edca_queues_ce0 <= grp_enqueue_dequeue_fram_fu_44_edca_queues_ce0;
    edca_queues_d0 <= grp_enqueue_dequeue_fram_fu_44_edca_queues_d0;
    edca_queues_we0 <= grp_enqueue_dequeue_fram_fu_44_edca_queues_we0;
    grp_enqueue_dequeue_fram_fu_44_ap_start <= grp_enqueue_dequeue_fram_fu_44_ap_start_reg;

    read_pointer_be_o_assign_proc : process(read_pointer_be_i, grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o, grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o_ap_vld = ap_const_logic_1))) then 
            read_pointer_be_o <= grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o;
        else 
            read_pointer_be_o <= read_pointer_be_i;
        end if; 
    end process;

    read_pointer_be_o_ap_vld <= grp_enqueue_dequeue_fram_fu_44_read_pointer_be_o_ap_vld;

    read_pointer_bk_o_assign_proc : process(read_pointer_bk_i, grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o, grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o_ap_vld = ap_const_logic_1))) then 
            read_pointer_bk_o <= grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o;
        else 
            read_pointer_bk_o <= read_pointer_bk_i;
        end if; 
    end process;

    read_pointer_bk_o_ap_vld <= grp_enqueue_dequeue_fram_fu_44_read_pointer_bk_o_ap_vld;

    read_pointer_vi_o_assign_proc : process(read_pointer_vi_i, grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o, grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o_ap_vld = ap_const_logic_1))) then 
            read_pointer_vi_o <= grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o;
        else 
            read_pointer_vi_o <= read_pointer_vi_i;
        end if; 
    end process;

    read_pointer_vi_o_ap_vld <= grp_enqueue_dequeue_fram_fu_44_read_pointer_vi_o_ap_vld;

    read_pointer_vo_o_assign_proc : process(read_pointer_vo_i, grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o, grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o_ap_vld = ap_const_logic_1))) then 
            read_pointer_vo_o <= grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o;
        else 
            read_pointer_vo_o <= read_pointer_vo_i;
        end if; 
    end process;

    read_pointer_vo_o_ap_vld <= grp_enqueue_dequeue_fram_fu_44_read_pointer_vo_o_ap_vld;
    trunc_ln368_fu_79_p1 <= current_txop_holder(2 - 1 downto 0);
    tx_frame_address0 <= grp_enqueue_dequeue_fram_fu_44_inout_frame_address0;
    tx_frame_ce0 <= grp_enqueue_dequeue_fram_fu_44_inout_frame_ce0;
    tx_frame_d0 <= grp_enqueue_dequeue_fram_fu_44_inout_frame_d0;
    tx_frame_we0 <= grp_enqueue_dequeue_fram_fu_44_inout_frame_we0;

    write_pointer_be_o_assign_proc : process(write_pointer_be_i, grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o, grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o_ap_vld = ap_const_logic_1))) then 
            write_pointer_be_o <= grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o;
        else 
            write_pointer_be_o <= write_pointer_be_i;
        end if; 
    end process;

    write_pointer_be_o_ap_vld <= grp_enqueue_dequeue_fram_fu_44_write_pointer_be_o_ap_vld;

    write_pointer_bk_o_assign_proc : process(write_pointer_bk_i, grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o, grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            write_pointer_bk_o <= grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o;
        else 
            write_pointer_bk_o <= write_pointer_bk_i;
        end if; 
    end process;

    write_pointer_bk_o_ap_vld <= grp_enqueue_dequeue_fram_fu_44_write_pointer_bk_o_ap_vld;

    write_pointer_vi_o_assign_proc : process(write_pointer_vi_i, grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o, grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o_ap_vld = ap_const_logic_1))) then 
            write_pointer_vi_o <= grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o;
        else 
            write_pointer_vi_o <= write_pointer_vi_i;
        end if; 
    end process;

    write_pointer_vi_o_ap_vld <= grp_enqueue_dequeue_fram_fu_44_write_pointer_vi_o_ap_vld;

    write_pointer_vo_o_assign_proc : process(write_pointer_vo_i, grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o, grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o_ap_vld = ap_const_logic_1))) then 
            write_pointer_vo_o <= grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o;
        else 
            write_pointer_vo_o <= write_pointer_vo_i;
        end if; 
    end process;

    write_pointer_vo_o_ap_vld <= grp_enqueue_dequeue_fram_fu_44_write_pointer_vo_o_ap_vld;
end behav;
