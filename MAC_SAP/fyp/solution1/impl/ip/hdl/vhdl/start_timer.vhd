-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity start_timer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    count_idle : IN STD_LOGIC_VECTOR (0 downto 0);
    medium_state : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of start_timer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_48 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal count_idle_read_read_fu_36_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_130_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_0_reg_48 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln8_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal medium_state_read_read_fu_42_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_timeout_write_assign_phi_fu_62_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal total_count_fu_28 : STD_LOGIC_VECTOR (6 downto 0);
    signal tc_fu_32 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_73_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln8_1_fu_106_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln8_1_fu_110_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln8_fu_114_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln8_fu_99_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln8_fu_120_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_condition_61 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln8_fu_124_p2 = ap_const_lv1_0) or ((medium_state_read_read_fu_42_p2 = ap_const_lv1_0) and (count_idle_read_read_fu_36_p2 = ap_const_lv1_1))))) then 
                    ap_return_preg <= ap_phi_mux_timeout_write_assign_phi_fu_62_p4;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((icmp_ln8_fu_124_p2 = ap_const_lv1_1) and (count_idle_read_read_fu_36_p2 = ap_const_lv1_0)) or ((medium_state_read_read_fu_42_p2 = ap_const_lv1_1) and (icmp_ln8_fu_124_p2 = ap_const_lv1_1))))) then 
                i_0_reg_48 <= i_fu_130_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_0_reg_48 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    tc_fu_32_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln8_fu_124_p2 = ap_const_lv1_1) and (count_idle_read_read_fu_36_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((medium_state_read_read_fu_42_p2 = ap_const_lv1_1) and (icmp_ln8_fu_124_p2 = ap_const_lv1_1) and (count_idle_read_read_fu_36_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                tc_fu_32 <= grp_fu_73_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tc_fu_32 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    total_count_fu_28_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                total_count_fu_28(3) <= '1';
                total_count_fu_28(6) <= '1';
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                total_count_fu_28(3) <= '0';
                total_count_fu_28(6) <= '0';
            end if; 
        end if;
    end process;
    total_count_fu_28(2 downto 0) <= "000";
    total_count_fu_28(5 downto 4) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, count_idle_read_read_fu_36_p2, ap_CS_fsm_state3, icmp_ln8_fu_124_p2, medium_state_read_read_fu_42_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln8_fu_124_p2 = ap_const_lv1_0) or ((medium_state_read_read_fu_42_p2 = ap_const_lv1_0) and (count_idle_read_read_fu_36_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln8_fu_114_p2 <= std_logic_vector(unsigned(zext_ln8_1_fu_110_p1) + unsigned(ap_const_lv9_1FE));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_condition_61_assign_proc : process(count_idle_read_read_fu_36_p2, icmp_ln8_fu_124_p2, medium_state_read_read_fu_42_p2)
    begin
                ap_condition_61 <= ((medium_state_read_read_fu_42_p2 = ap_const_lv1_0) and (icmp_ln8_fu_124_p2 = ap_const_lv1_1) and (count_idle_read_read_fu_36_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, count_idle_read_read_fu_36_p2, ap_CS_fsm_state3, icmp_ln8_fu_124_p2, medium_state_read_read_fu_42_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln8_fu_124_p2 = ap_const_lv1_0) or ((medium_state_read_read_fu_42_p2 = ap_const_lv1_0) and (count_idle_read_read_fu_36_p2 = ap_const_lv1_1)))) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_timeout_write_assign_phi_fu_62_p4_assign_proc : process(ap_CS_fsm_state3, icmp_ln8_fu_124_p2, ap_condition_61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
            if ((ap_const_boolean_1 = ap_condition_61)) then 
                ap_phi_mux_timeout_write_assign_phi_fu_62_p4 <= ap_const_lv1_0;
            elsif ((icmp_ln8_fu_124_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_timeout_write_assign_phi_fu_62_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_timeout_write_assign_phi_fu_62_p4 <= "X";
            end if;
        else 
            ap_phi_mux_timeout_write_assign_phi_fu_62_p4 <= "X";
        end if; 
    end process;


    ap_ready_assign_proc : process(count_idle_read_read_fu_36_p2, ap_CS_fsm_state3, icmp_ln8_fu_124_p2, medium_state_read_read_fu_42_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln8_fu_124_p2 = ap_const_lv1_0) or ((medium_state_read_read_fu_42_p2 = ap_const_lv1_0) and (count_idle_read_read_fu_36_p2 = ap_const_lv1_1))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(count_idle_read_read_fu_36_p2, ap_CS_fsm_state3, icmp_ln8_fu_124_p2, medium_state_read_read_fu_42_p2, ap_phi_mux_timeout_write_assign_phi_fu_62_p4, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln8_fu_124_p2 = ap_const_lv1_0) or ((medium_state_read_read_fu_42_p2 = ap_const_lv1_0) and (count_idle_read_read_fu_36_p2 = ap_const_lv1_1))))) then 
            ap_return <= ap_phi_mux_timeout_write_assign_phi_fu_62_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    count_idle_read_read_fu_36_p2 <= count_idle;
    grp_fu_73_p2 <= std_logic_vector(unsigned(tc_fu_32) + unsigned(ap_const_lv16_1));
    i_fu_130_p2 <= std_logic_vector(unsigned(i_0_reg_48) + unsigned(ap_const_lv20_1));
    icmp_ln8_fu_124_p2 <= "1" when (signed(zext_ln8_fu_99_p1) < signed(sext_ln8_fu_120_p1)) else "0";
    medium_state_read_read_fu_42_p2 <= medium_state;
        sext_ln8_1_fu_106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(total_count_fu_28),8));

        sext_ln8_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln8_fu_114_p2),21));

    zext_ln8_1_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln8_1_fu_106_p1),9));
    zext_ln8_fu_99_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_48),21));
end behav;
