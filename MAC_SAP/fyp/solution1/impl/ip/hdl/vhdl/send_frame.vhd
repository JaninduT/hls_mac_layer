-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity send_frame is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    source_addr_mac_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    source_addr_mac_ce0 : OUT STD_LOGIC;
    source_addr_mac_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    source_addr_mac_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    source_addr_mac_ce1 : OUT STD_LOGIC;
    source_addr_mac_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    dest_addr_mac_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dest_addr_mac_ce0 : OUT STD_LOGIC;
    dest_addr_mac_we0 : OUT STD_LOGIC;
    dest_addr_mac_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_addr_mac_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    dest_addr_mac_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dest_addr_mac_ce1 : OUT STD_LOGIC;
    dest_addr_mac_we1 : OUT STD_LOGIC;
    dest_addr_mac_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_addr_mac_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    up : IN STD_LOGIC_VECTOR (3 downto 0);
    s_class : IN STD_LOGIC_VECTOR (0 downto 0);
    c_identifier_operating_class : IN STD_LOGIC_VECTOR (7 downto 0);
    c_identifier_channel_number : IN STD_LOGIC_VECTOR (7 downto 0);
    t_slot : IN STD_LOGIC_VECTOR (1 downto 0);
    d_rate : IN STD_LOGIC_VECTOR (6 downto 0);
    tx_power_lvl : IN STD_LOGIC_VECTOR (3 downto 0);
    expiry_time : IN STD_LOGIC_VECTOR (63 downto 0);
    mac_frame_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    mac_frame_ce0 : OUT STD_LOGIC;
    mac_frame_we0 : OUT STD_LOGIC;
    mac_frame_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mac_frame_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    medium_state : IN STD_LOGIC_VECTOR (0 downto 0);
    current_txop_holder_i : IN STD_LOGIC_VECTOR (2 downto 0);
    current_txop_holder_o : OUT STD_LOGIC_VECTOR (2 downto 0);
    current_txop_holder_o_ap_vld : OUT STD_LOGIC;
    received_frame_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    received_frame_ce0 : OUT STD_LOGIC;
    received_frame_we0 : OUT STD_LOGIC;
    received_frame_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    received_frame_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    received_frame_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    received_frame_ce1 : OUT STD_LOGIC;
    received_frame_we1 : OUT STD_LOGIC;
    received_frame_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    received_frame_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of send_frame is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "send_frame,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.016500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=18,HLS_SYN_FF=6548,HLS_SYN_LUT=15348,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal available_spaces_bk : STD_LOGIC_VECTOR (2 downto 0) := "100";
    signal write_pointer_bk : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal available_spaces_be : STD_LOGIC_VECTOR (2 downto 0) := "100";
    signal write_pointer_be : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal available_spaces_vi : STD_LOGIC_VECTOR (2 downto 0) := "100";
    signal write_pointer_vi : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal available_spaces_vo : STD_LOGIC_VECTOR (2 downto 0) := "100";
    signal write_pointer_vo : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal edca_queues_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal edca_queues_ce0 : STD_LOGIC;
    signal edca_queues_we0 : STD_LOGIC;
    signal edca_queues_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal edca_queues_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal read_pointer_bk : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal read_pointer_be : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal read_pointer_vi : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal read_pointer_vo : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal CW_bk : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";
    signal rand_state : STD_LOGIC_VECTOR (31 downto 0) := "00000111010110111100110100010101";
    signal bk_backoff_counter : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal CW_be : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";
    signal be_backoff_counter : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal CW_vi : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";
    signal vi_backoff_counter : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal vo_backoff_counter : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal count : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal frame_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal frame_ce0 : STD_LOGIC;
    signal frame_we0 : STD_LOGIC;
    signal frame_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_fu_451_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_546 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal count_load_reg_551 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln22_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_fu_473_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal q_reg_563 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln12_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_568 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln11_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_fu_484_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_reg_578 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln16_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_584 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_initial_edca_process_fu_240_ap_start : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_ap_done : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_ap_idle : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_ap_ready : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_current_txop_holder_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_initial_edca_process_fu_240_current_txop_holder_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_frame_to_transfer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_initial_edca_process_fu_240_frame_to_transfer_ce0 : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_frame_to_transfer_we0 : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_frame_to_transfer_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_initial_edca_process_fu_240_available_spaces_vo_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_initial_edca_process_fu_240_available_spaces_vo_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_vo_backoff_counter_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_initial_edca_process_fu_240_vo_backoff_counter_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_rand_state_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initial_edca_process_fu_240_rand_state_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_available_spaces_vi_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_initial_edca_process_fu_240_available_spaces_vi_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_vi_backoff_counter_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_initial_edca_process_fu_240_vi_backoff_counter_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_CW_vi_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_initial_edca_process_fu_240_CW_vi_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_available_spaces_be_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_initial_edca_process_fu_240_available_spaces_be_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_be_backoff_counter_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_initial_edca_process_fu_240_be_backoff_counter_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_CW_be_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_initial_edca_process_fu_240_CW_be_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_available_spaces_bk_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_initial_edca_process_fu_240_available_spaces_bk_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_bk_backoff_counter_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_initial_edca_process_fu_240_bk_backoff_counter_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_CW_bk_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_initial_edca_process_fu_240_CW_bk_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_write_pointer_bk_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_initial_edca_process_fu_240_write_pointer_bk_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_write_pointer_be_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_initial_edca_process_fu_240_write_pointer_be_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_write_pointer_vi_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_initial_edca_process_fu_240_write_pointer_vi_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_write_pointer_vo_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_initial_edca_process_fu_240_write_pointer_vo_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_edca_queues_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_initial_edca_process_fu_240_edca_queues_ce0 : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_edca_queues_we0 : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_edca_queues_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_initial_edca_process_fu_240_read_pointer_bk_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_initial_edca_process_fu_240_read_pointer_bk_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_read_pointer_be_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_initial_edca_process_fu_240_read_pointer_be_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_read_pointer_vi_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_initial_edca_process_fu_240_read_pointer_vi_o_ap_vld : STD_LOGIC;
    signal grp_initial_edca_process_fu_240_read_pointer_vo_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_initial_edca_process_fu_240_read_pointer_vo_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_ap_start : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_ap_done : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_ap_idle : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_ap_ready : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_current_txop_holder_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_phy_txend_confirm_fu_292_current_txop_holder_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_frame_to_transfer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_phy_txend_confirm_fu_292_frame_to_transfer_ce0 : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_frame_to_transfer_we0 : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_frame_to_transfer_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_phy_txend_confirm_fu_292_available_spaces_vo_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_phy_txend_confirm_fu_292_available_spaces_vo_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_vo_backoff_counter_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_phy_txend_confirm_fu_292_vo_backoff_counter_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_rand_state_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_phy_txend_confirm_fu_292_rand_state_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_available_spaces_vi_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_phy_txend_confirm_fu_292_available_spaces_vi_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_vi_backoff_counter_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_phy_txend_confirm_fu_292_vi_backoff_counter_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_CW_vi_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_phy_txend_confirm_fu_292_CW_vi_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_available_spaces_be_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_phy_txend_confirm_fu_292_available_spaces_be_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_be_backoff_counter_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_phy_txend_confirm_fu_292_be_backoff_counter_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_CW_be_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_phy_txend_confirm_fu_292_CW_be_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_available_spaces_bk_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_phy_txend_confirm_fu_292_available_spaces_bk_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_bk_backoff_counter_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_phy_txend_confirm_fu_292_bk_backoff_counter_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_CW_bk_o : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_phy_txend_confirm_fu_292_CW_bk_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_write_pointer_bk_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_phy_txend_confirm_fu_292_write_pointer_bk_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_write_pointer_be_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_phy_txend_confirm_fu_292_write_pointer_be_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_write_pointer_vi_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_phy_txend_confirm_fu_292_write_pointer_vi_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_write_pointer_vo_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_phy_txend_confirm_fu_292_write_pointer_vo_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_edca_queues_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_phy_txend_confirm_fu_292_edca_queues_ce0 : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_edca_queues_we0 : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_edca_queues_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_phy_txend_confirm_fu_292_read_pointer_bk_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_phy_txend_confirm_fu_292_read_pointer_bk_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_read_pointer_be_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_phy_txend_confirm_fu_292_read_pointer_be_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_read_pointer_vi_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_phy_txend_confirm_fu_292_read_pointer_vi_o_ap_vld : STD_LOGIC;
    signal grp_phy_txend_confirm_fu_292_read_pointer_vo_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_phy_txend_confirm_fu_292_read_pointer_vo_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_ap_start : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_ap_done : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_ap_idle : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_ap_ready : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_source_addr_mac_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ma_unitdatax_request_fu_344_source_addr_mac_ce0 : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_source_addr_mac_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ma_unitdatax_request_fu_344_source_addr_mac_ce1 : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_ma_unitdatax_request_fu_344_data_ce0 : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_available_spaces_bk_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ma_unitdatax_request_fu_344_available_spaces_bk_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_write_pointer_bk_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ma_unitdatax_request_fu_344_write_pointer_bk_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_available_spaces_be_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ma_unitdatax_request_fu_344_available_spaces_be_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_write_pointer_be_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ma_unitdatax_request_fu_344_write_pointer_be_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_available_spaces_vi_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ma_unitdatax_request_fu_344_available_spaces_vi_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_write_pointer_vi_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ma_unitdatax_request_fu_344_write_pointer_vi_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_available_spaces_vo_o : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ma_unitdatax_request_fu_344_available_spaces_vo_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_write_pointer_vo_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ma_unitdatax_request_fu_344_write_pointer_vo_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_edca_queues_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_ma_unitdatax_request_fu_344_edca_queues_ce0 : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_edca_queues_we0 : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_edca_queues_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ma_unitdatax_request_fu_344_read_pointer_bk_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ma_unitdatax_request_fu_344_read_pointer_bk_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_read_pointer_be_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ma_unitdatax_request_fu_344_read_pointer_be_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_read_pointer_vi_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ma_unitdatax_request_fu_344_read_pointer_vi_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_read_pointer_vo_o : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ma_unitdatax_request_fu_344_read_pointer_vo_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_rand_state_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ma_unitdatax_request_fu_344_rand_state_o_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_bk_backoff_counter : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ma_unitdatax_request_fu_344_bk_backoff_counter_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_be_backoff_counter : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ma_unitdatax_request_fu_344_be_backoff_counter_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_vi_backoff_counter : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ma_unitdatax_request_fu_344_vi_backoff_counter_ap_vld : STD_LOGIC;
    signal grp_ma_unitdatax_request_fu_344_vo_backoff_counter : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ma_unitdatax_request_fu_344_vo_backoff_counter_ap_vld : STD_LOGIC;
    signal grp_phy_data_request_fu_422_ap_start : STD_LOGIC;
    signal grp_phy_data_request_fu_422_ap_done : STD_LOGIC;
    signal grp_phy_data_request_fu_422_ap_idle : STD_LOGIC;
    signal grp_phy_data_request_fu_422_ap_ready : STD_LOGIC;
    signal grp_phy_data_request_fu_422_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_phy_data_request_fu_422_data_ce0 : STD_LOGIC;
    signal call_ln17_phy_txend_request_fu_429_ap_start : STD_LOGIC;
    signal call_ln17_phy_txend_request_fu_429_ap_done : STD_LOGIC;
    signal call_ln17_phy_txend_request_fu_429_ap_idle : STD_LOGIC;
    signal call_ln17_phy_txend_request_fu_429_ap_ready : STD_LOGIC;
    signal call_ln6_phy_data_request_1_fu_435_ap_ready : STD_LOGIC;
    signal i_0_reg_208 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13_on_subcall_done : BOOLEAN;
    signal q_0_i_reg_219 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_phi_mux_count_new_0_i_phi_fu_233_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_initial_edca_process_fu_240_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_phy_txend_confirm_fu_292_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_ma_unitdatax_request_fu_344_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_phy_data_request_fu_422_ap_start_reg : STD_LOGIC := '0';
    signal data_1_fu_132 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component initial_edca_process IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        medium_state : IN STD_LOGIC_VECTOR (0 downto 0);
        current_txop_holder_i : IN STD_LOGIC_VECTOR (2 downto 0);
        current_txop_holder_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        current_txop_holder_o_ap_vld : OUT STD_LOGIC;
        frame_to_transfer_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        frame_to_transfer_ce0 : OUT STD_LOGIC;
        frame_to_transfer_we0 : OUT STD_LOGIC;
        frame_to_transfer_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        frame_to_transfer_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        available_spaces_vo_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vo_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vo_o_ap_vld : OUT STD_LOGIC;
        vo_backoff_counter_i : IN STD_LOGIC_VECTOR (9 downto 0);
        vo_backoff_counter_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        vo_backoff_counter_o_ap_vld : OUT STD_LOGIC;
        rand_state_i : IN STD_LOGIC_VECTOR (31 downto 0);
        rand_state_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        rand_state_o_ap_vld : OUT STD_LOGIC;
        available_spaces_vi_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vi_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vi_o_ap_vld : OUT STD_LOGIC;
        vi_backoff_counter_i : IN STD_LOGIC_VECTOR (9 downto 0);
        vi_backoff_counter_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        vi_backoff_counter_o_ap_vld : OUT STD_LOGIC;
        CW_vi_i : IN STD_LOGIC_VECTOR (9 downto 0);
        CW_vi_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        CW_vi_o_ap_vld : OUT STD_LOGIC;
        available_spaces_be_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_be_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_be_o_ap_vld : OUT STD_LOGIC;
        be_backoff_counter_i : IN STD_LOGIC_VECTOR (9 downto 0);
        be_backoff_counter_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        be_backoff_counter_o_ap_vld : OUT STD_LOGIC;
        CW_be_i : IN STD_LOGIC_VECTOR (9 downto 0);
        CW_be_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        CW_be_o_ap_vld : OUT STD_LOGIC;
        available_spaces_bk_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_bk_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_bk_o_ap_vld : OUT STD_LOGIC;
        bk_backoff_counter_i : IN STD_LOGIC_VECTOR (9 downto 0);
        bk_backoff_counter_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        bk_backoff_counter_o_ap_vld : OUT STD_LOGIC;
        CW_bk_i : IN STD_LOGIC_VECTOR (9 downto 0);
        CW_bk_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        CW_bk_o_ap_vld : OUT STD_LOGIC;
        write_pointer_bk_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_bk_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_bk_o_ap_vld : OUT STD_LOGIC;
        write_pointer_be_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_be_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_be_o_ap_vld : OUT STD_LOGIC;
        write_pointer_vi_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vi_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vi_o_ap_vld : OUT STD_LOGIC;
        write_pointer_vo_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vo_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vo_o_ap_vld : OUT STD_LOGIC;
        edca_queues_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        edca_queues_ce0 : OUT STD_LOGIC;
        edca_queues_we0 : OUT STD_LOGIC;
        edca_queues_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        edca_queues_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        read_pointer_bk_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_bk_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_bk_o_ap_vld : OUT STD_LOGIC;
        read_pointer_be_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_be_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_be_o_ap_vld : OUT STD_LOGIC;
        read_pointer_vi_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vi_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vi_o_ap_vld : OUT STD_LOGIC;
        read_pointer_vo_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vo_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vo_o_ap_vld : OUT STD_LOGIC );
    end component;


    component phy_txend_confirm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        medium_state : IN STD_LOGIC_VECTOR (0 downto 0);
        current_txop_holder_i : IN STD_LOGIC_VECTOR (2 downto 0);
        current_txop_holder_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        current_txop_holder_o_ap_vld : OUT STD_LOGIC;
        frame_to_transfer_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        frame_to_transfer_ce0 : OUT STD_LOGIC;
        frame_to_transfer_we0 : OUT STD_LOGIC;
        frame_to_transfer_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        frame_to_transfer_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        available_spaces_vo_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vo_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vo_o_ap_vld : OUT STD_LOGIC;
        vo_backoff_counter_i : IN STD_LOGIC_VECTOR (9 downto 0);
        vo_backoff_counter_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        vo_backoff_counter_o_ap_vld : OUT STD_LOGIC;
        rand_state_i : IN STD_LOGIC_VECTOR (31 downto 0);
        rand_state_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        rand_state_o_ap_vld : OUT STD_LOGIC;
        available_spaces_vi_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vi_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vi_o_ap_vld : OUT STD_LOGIC;
        vi_backoff_counter_i : IN STD_LOGIC_VECTOR (9 downto 0);
        vi_backoff_counter_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        vi_backoff_counter_o_ap_vld : OUT STD_LOGIC;
        CW_vi_i : IN STD_LOGIC_VECTOR (9 downto 0);
        CW_vi_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        CW_vi_o_ap_vld : OUT STD_LOGIC;
        available_spaces_be_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_be_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_be_o_ap_vld : OUT STD_LOGIC;
        be_backoff_counter_i : IN STD_LOGIC_VECTOR (9 downto 0);
        be_backoff_counter_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        be_backoff_counter_o_ap_vld : OUT STD_LOGIC;
        CW_be_i : IN STD_LOGIC_VECTOR (9 downto 0);
        CW_be_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        CW_be_o_ap_vld : OUT STD_LOGIC;
        available_spaces_bk_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_bk_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_bk_o_ap_vld : OUT STD_LOGIC;
        bk_backoff_counter_i : IN STD_LOGIC_VECTOR (9 downto 0);
        bk_backoff_counter_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        bk_backoff_counter_o_ap_vld : OUT STD_LOGIC;
        CW_bk_i : IN STD_LOGIC_VECTOR (9 downto 0);
        CW_bk_o : OUT STD_LOGIC_VECTOR (9 downto 0);
        CW_bk_o_ap_vld : OUT STD_LOGIC;
        write_pointer_bk_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_bk_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_bk_o_ap_vld : OUT STD_LOGIC;
        write_pointer_be_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_be_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_be_o_ap_vld : OUT STD_LOGIC;
        write_pointer_vi_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vi_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vi_o_ap_vld : OUT STD_LOGIC;
        write_pointer_vo_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vo_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vo_o_ap_vld : OUT STD_LOGIC;
        edca_queues_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        edca_queues_ce0 : OUT STD_LOGIC;
        edca_queues_we0 : OUT STD_LOGIC;
        edca_queues_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        edca_queues_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        read_pointer_bk_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_bk_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_bk_o_ap_vld : OUT STD_LOGIC;
        read_pointer_be_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_be_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_be_o_ap_vld : OUT STD_LOGIC;
        read_pointer_vi_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vi_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vi_o_ap_vld : OUT STD_LOGIC;
        read_pointer_vo_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vo_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vo_o_ap_vld : OUT STD_LOGIC );
    end component;


    component ma_unitdatax_request IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        source_addr_mac_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        source_addr_mac_ce0 : OUT STD_LOGIC;
        source_addr_mac_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        source_addr_mac_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        source_addr_mac_ce1 : OUT STD_LOGIC;
        source_addr_mac_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        up : IN STD_LOGIC_VECTOR (3 downto 0);
        s_class : IN STD_LOGIC_VECTOR (0 downto 0);
        c_identifier_operating_class : IN STD_LOGIC_VECTOR (7 downto 0);
        c_identifier_channel_number : IN STD_LOGIC_VECTOR (7 downto 0);
        d_rate : IN STD_LOGIC_VECTOR (6 downto 0);
        tx_power_lvl : IN STD_LOGIC_VECTOR (3 downto 0);
        medium_state : IN STD_LOGIC_VECTOR (0 downto 0);
        available_spaces_bk_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_bk_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_bk_o_ap_vld : OUT STD_LOGIC;
        write_pointer_bk_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_bk_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_bk_o_ap_vld : OUT STD_LOGIC;
        available_spaces_be_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_be_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_be_o_ap_vld : OUT STD_LOGIC;
        write_pointer_be_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_be_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_be_o_ap_vld : OUT STD_LOGIC;
        available_spaces_vi_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vi_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vi_o_ap_vld : OUT STD_LOGIC;
        write_pointer_vi_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vi_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vi_o_ap_vld : OUT STD_LOGIC;
        available_spaces_vo_i : IN STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vo_o : OUT STD_LOGIC_VECTOR (2 downto 0);
        available_spaces_vo_o_ap_vld : OUT STD_LOGIC;
        write_pointer_vo_i : IN STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vo_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        write_pointer_vo_o_ap_vld : OUT STD_LOGIC;
        edca_queues_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        edca_queues_ce0 : OUT STD_LOGIC;
        edca_queues_we0 : OUT STD_LOGIC;
        edca_queues_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        edca_queues_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        read_pointer_bk_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_bk_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_bk_o_ap_vld : OUT STD_LOGIC;
        read_pointer_be_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_be_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_be_o_ap_vld : OUT STD_LOGIC;
        read_pointer_vi_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vi_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vi_o_ap_vld : OUT STD_LOGIC;
        read_pointer_vo_i : IN STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vo_o : OUT STD_LOGIC_VECTOR (1 downto 0);
        read_pointer_vo_o_ap_vld : OUT STD_LOGIC;
        CW_bk : IN STD_LOGIC_VECTOR (9 downto 0);
        rand_state_i : IN STD_LOGIC_VECTOR (31 downto 0);
        rand_state_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        rand_state_o_ap_vld : OUT STD_LOGIC;
        bk_backoff_counter : OUT STD_LOGIC_VECTOR (9 downto 0);
        bk_backoff_counter_ap_vld : OUT STD_LOGIC;
        CW_be : IN STD_LOGIC_VECTOR (9 downto 0);
        be_backoff_counter : OUT STD_LOGIC_VECTOR (9 downto 0);
        be_backoff_counter_ap_vld : OUT STD_LOGIC;
        CW_vi : IN STD_LOGIC_VECTOR (9 downto 0);
        vi_backoff_counter : OUT STD_LOGIC_VECTOR (9 downto 0);
        vi_backoff_counter_ap_vld : OUT STD_LOGIC;
        vo_backoff_counter : OUT STD_LOGIC_VECTOR (9 downto 0);
        vo_backoff_counter_ap_vld : OUT STD_LOGIC );
    end component;


    component phy_data_request IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_offset : IN STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component phy_txend_request IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;


    component phy_data_request_1 IS
    port (
        ap_ready : OUT STD_LOGIC;
        data : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component send_frame_edca_qfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component send_frame_frame IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    edca_queues_U : component send_frame_edca_qfYi
    generic map (
        DataWidth => 8,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edca_queues_address0,
        ce0 => edca_queues_ce0,
        we0 => edca_queues_we0,
        d0 => edca_queues_d0,
        q0 => edca_queues_q0);

    frame_U : component send_frame_frame
    generic map (
        DataWidth => 8,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => frame_address0,
        ce0 => frame_ce0,
        we0 => frame_we0,
        d0 => mac_frame_q0,
        q0 => frame_q0);

    grp_initial_edca_process_fu_240 : component initial_edca_process
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_initial_edca_process_fu_240_ap_start,
        ap_done => grp_initial_edca_process_fu_240_ap_done,
        ap_idle => grp_initial_edca_process_fu_240_ap_idle,
        ap_ready => grp_initial_edca_process_fu_240_ap_ready,
        medium_state => medium_state,
        current_txop_holder_i => current_txop_holder_i,
        current_txop_holder_o => grp_initial_edca_process_fu_240_current_txop_holder_o,
        current_txop_holder_o_ap_vld => grp_initial_edca_process_fu_240_current_txop_holder_o_ap_vld,
        frame_to_transfer_address0 => grp_initial_edca_process_fu_240_frame_to_transfer_address0,
        frame_to_transfer_ce0 => grp_initial_edca_process_fu_240_frame_to_transfer_ce0,
        frame_to_transfer_we0 => grp_initial_edca_process_fu_240_frame_to_transfer_we0,
        frame_to_transfer_d0 => grp_initial_edca_process_fu_240_frame_to_transfer_d0,
        frame_to_transfer_q0 => mac_frame_q0,
        available_spaces_vo_i => available_spaces_vo,
        available_spaces_vo_o => grp_initial_edca_process_fu_240_available_spaces_vo_o,
        available_spaces_vo_o_ap_vld => grp_initial_edca_process_fu_240_available_spaces_vo_o_ap_vld,
        vo_backoff_counter_i => vo_backoff_counter,
        vo_backoff_counter_o => grp_initial_edca_process_fu_240_vo_backoff_counter_o,
        vo_backoff_counter_o_ap_vld => grp_initial_edca_process_fu_240_vo_backoff_counter_o_ap_vld,
        rand_state_i => rand_state,
        rand_state_o => grp_initial_edca_process_fu_240_rand_state_o,
        rand_state_o_ap_vld => grp_initial_edca_process_fu_240_rand_state_o_ap_vld,
        available_spaces_vi_i => available_spaces_vi,
        available_spaces_vi_o => grp_initial_edca_process_fu_240_available_spaces_vi_o,
        available_spaces_vi_o_ap_vld => grp_initial_edca_process_fu_240_available_spaces_vi_o_ap_vld,
        vi_backoff_counter_i => vi_backoff_counter,
        vi_backoff_counter_o => grp_initial_edca_process_fu_240_vi_backoff_counter_o,
        vi_backoff_counter_o_ap_vld => grp_initial_edca_process_fu_240_vi_backoff_counter_o_ap_vld,
        CW_vi_i => CW_vi,
        CW_vi_o => grp_initial_edca_process_fu_240_CW_vi_o,
        CW_vi_o_ap_vld => grp_initial_edca_process_fu_240_CW_vi_o_ap_vld,
        available_spaces_be_i => available_spaces_be,
        available_spaces_be_o => grp_initial_edca_process_fu_240_available_spaces_be_o,
        available_spaces_be_o_ap_vld => grp_initial_edca_process_fu_240_available_spaces_be_o_ap_vld,
        be_backoff_counter_i => be_backoff_counter,
        be_backoff_counter_o => grp_initial_edca_process_fu_240_be_backoff_counter_o,
        be_backoff_counter_o_ap_vld => grp_initial_edca_process_fu_240_be_backoff_counter_o_ap_vld,
        CW_be_i => CW_be,
        CW_be_o => grp_initial_edca_process_fu_240_CW_be_o,
        CW_be_o_ap_vld => grp_initial_edca_process_fu_240_CW_be_o_ap_vld,
        available_spaces_bk_i => available_spaces_bk,
        available_spaces_bk_o => grp_initial_edca_process_fu_240_available_spaces_bk_o,
        available_spaces_bk_o_ap_vld => grp_initial_edca_process_fu_240_available_spaces_bk_o_ap_vld,
        bk_backoff_counter_i => bk_backoff_counter,
        bk_backoff_counter_o => grp_initial_edca_process_fu_240_bk_backoff_counter_o,
        bk_backoff_counter_o_ap_vld => grp_initial_edca_process_fu_240_bk_backoff_counter_o_ap_vld,
        CW_bk_i => CW_bk,
        CW_bk_o => grp_initial_edca_process_fu_240_CW_bk_o,
        CW_bk_o_ap_vld => grp_initial_edca_process_fu_240_CW_bk_o_ap_vld,
        write_pointer_bk_i => write_pointer_bk,
        write_pointer_bk_o => grp_initial_edca_process_fu_240_write_pointer_bk_o,
        write_pointer_bk_o_ap_vld => grp_initial_edca_process_fu_240_write_pointer_bk_o_ap_vld,
        write_pointer_be_i => write_pointer_be,
        write_pointer_be_o => grp_initial_edca_process_fu_240_write_pointer_be_o,
        write_pointer_be_o_ap_vld => grp_initial_edca_process_fu_240_write_pointer_be_o_ap_vld,
        write_pointer_vi_i => write_pointer_vi,
        write_pointer_vi_o => grp_initial_edca_process_fu_240_write_pointer_vi_o,
        write_pointer_vi_o_ap_vld => grp_initial_edca_process_fu_240_write_pointer_vi_o_ap_vld,
        write_pointer_vo_i => write_pointer_vo,
        write_pointer_vo_o => grp_initial_edca_process_fu_240_write_pointer_vo_o,
        write_pointer_vo_o_ap_vld => grp_initial_edca_process_fu_240_write_pointer_vo_o_ap_vld,
        edca_queues_address0 => grp_initial_edca_process_fu_240_edca_queues_address0,
        edca_queues_ce0 => grp_initial_edca_process_fu_240_edca_queues_ce0,
        edca_queues_we0 => grp_initial_edca_process_fu_240_edca_queues_we0,
        edca_queues_d0 => grp_initial_edca_process_fu_240_edca_queues_d0,
        edca_queues_q0 => edca_queues_q0,
        read_pointer_bk_i => read_pointer_bk,
        read_pointer_bk_o => grp_initial_edca_process_fu_240_read_pointer_bk_o,
        read_pointer_bk_o_ap_vld => grp_initial_edca_process_fu_240_read_pointer_bk_o_ap_vld,
        read_pointer_be_i => read_pointer_be,
        read_pointer_be_o => grp_initial_edca_process_fu_240_read_pointer_be_o,
        read_pointer_be_o_ap_vld => grp_initial_edca_process_fu_240_read_pointer_be_o_ap_vld,
        read_pointer_vi_i => read_pointer_vi,
        read_pointer_vi_o => grp_initial_edca_process_fu_240_read_pointer_vi_o,
        read_pointer_vi_o_ap_vld => grp_initial_edca_process_fu_240_read_pointer_vi_o_ap_vld,
        read_pointer_vo_i => read_pointer_vo,
        read_pointer_vo_o => grp_initial_edca_process_fu_240_read_pointer_vo_o,
        read_pointer_vo_o_ap_vld => grp_initial_edca_process_fu_240_read_pointer_vo_o_ap_vld);

    grp_phy_txend_confirm_fu_292 : component phy_txend_confirm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_phy_txend_confirm_fu_292_ap_start,
        ap_done => grp_phy_txend_confirm_fu_292_ap_done,
        ap_idle => grp_phy_txend_confirm_fu_292_ap_idle,
        ap_ready => grp_phy_txend_confirm_fu_292_ap_ready,
        medium_state => medium_state,
        current_txop_holder_i => current_txop_holder_i,
        current_txop_holder_o => grp_phy_txend_confirm_fu_292_current_txop_holder_o,
        current_txop_holder_o_ap_vld => grp_phy_txend_confirm_fu_292_current_txop_holder_o_ap_vld,
        frame_to_transfer_address0 => grp_phy_txend_confirm_fu_292_frame_to_transfer_address0,
        frame_to_transfer_ce0 => grp_phy_txend_confirm_fu_292_frame_to_transfer_ce0,
        frame_to_transfer_we0 => grp_phy_txend_confirm_fu_292_frame_to_transfer_we0,
        frame_to_transfer_d0 => grp_phy_txend_confirm_fu_292_frame_to_transfer_d0,
        frame_to_transfer_q0 => mac_frame_q0,
        available_spaces_vo_i => available_spaces_vo,
        available_spaces_vo_o => grp_phy_txend_confirm_fu_292_available_spaces_vo_o,
        available_spaces_vo_o_ap_vld => grp_phy_txend_confirm_fu_292_available_spaces_vo_o_ap_vld,
        vo_backoff_counter_i => vo_backoff_counter,
        vo_backoff_counter_o => grp_phy_txend_confirm_fu_292_vo_backoff_counter_o,
        vo_backoff_counter_o_ap_vld => grp_phy_txend_confirm_fu_292_vo_backoff_counter_o_ap_vld,
        rand_state_i => rand_state,
        rand_state_o => grp_phy_txend_confirm_fu_292_rand_state_o,
        rand_state_o_ap_vld => grp_phy_txend_confirm_fu_292_rand_state_o_ap_vld,
        available_spaces_vi_i => available_spaces_vi,
        available_spaces_vi_o => grp_phy_txend_confirm_fu_292_available_spaces_vi_o,
        available_spaces_vi_o_ap_vld => grp_phy_txend_confirm_fu_292_available_spaces_vi_o_ap_vld,
        vi_backoff_counter_i => vi_backoff_counter,
        vi_backoff_counter_o => grp_phy_txend_confirm_fu_292_vi_backoff_counter_o,
        vi_backoff_counter_o_ap_vld => grp_phy_txend_confirm_fu_292_vi_backoff_counter_o_ap_vld,
        CW_vi_i => CW_vi,
        CW_vi_o => grp_phy_txend_confirm_fu_292_CW_vi_o,
        CW_vi_o_ap_vld => grp_phy_txend_confirm_fu_292_CW_vi_o_ap_vld,
        available_spaces_be_i => available_spaces_be,
        available_spaces_be_o => grp_phy_txend_confirm_fu_292_available_spaces_be_o,
        available_spaces_be_o_ap_vld => grp_phy_txend_confirm_fu_292_available_spaces_be_o_ap_vld,
        be_backoff_counter_i => be_backoff_counter,
        be_backoff_counter_o => grp_phy_txend_confirm_fu_292_be_backoff_counter_o,
        be_backoff_counter_o_ap_vld => grp_phy_txend_confirm_fu_292_be_backoff_counter_o_ap_vld,
        CW_be_i => CW_be,
        CW_be_o => grp_phy_txend_confirm_fu_292_CW_be_o,
        CW_be_o_ap_vld => grp_phy_txend_confirm_fu_292_CW_be_o_ap_vld,
        available_spaces_bk_i => available_spaces_bk,
        available_spaces_bk_o => grp_phy_txend_confirm_fu_292_available_spaces_bk_o,
        available_spaces_bk_o_ap_vld => grp_phy_txend_confirm_fu_292_available_spaces_bk_o_ap_vld,
        bk_backoff_counter_i => bk_backoff_counter,
        bk_backoff_counter_o => grp_phy_txend_confirm_fu_292_bk_backoff_counter_o,
        bk_backoff_counter_o_ap_vld => grp_phy_txend_confirm_fu_292_bk_backoff_counter_o_ap_vld,
        CW_bk_i => CW_bk,
        CW_bk_o => grp_phy_txend_confirm_fu_292_CW_bk_o,
        CW_bk_o_ap_vld => grp_phy_txend_confirm_fu_292_CW_bk_o_ap_vld,
        write_pointer_bk_i => write_pointer_bk,
        write_pointer_bk_o => grp_phy_txend_confirm_fu_292_write_pointer_bk_o,
        write_pointer_bk_o_ap_vld => grp_phy_txend_confirm_fu_292_write_pointer_bk_o_ap_vld,
        write_pointer_be_i => write_pointer_be,
        write_pointer_be_o => grp_phy_txend_confirm_fu_292_write_pointer_be_o,
        write_pointer_be_o_ap_vld => grp_phy_txend_confirm_fu_292_write_pointer_be_o_ap_vld,
        write_pointer_vi_i => write_pointer_vi,
        write_pointer_vi_o => grp_phy_txend_confirm_fu_292_write_pointer_vi_o,
        write_pointer_vi_o_ap_vld => grp_phy_txend_confirm_fu_292_write_pointer_vi_o_ap_vld,
        write_pointer_vo_i => write_pointer_vo,
        write_pointer_vo_o => grp_phy_txend_confirm_fu_292_write_pointer_vo_o,
        write_pointer_vo_o_ap_vld => grp_phy_txend_confirm_fu_292_write_pointer_vo_o_ap_vld,
        edca_queues_address0 => grp_phy_txend_confirm_fu_292_edca_queues_address0,
        edca_queues_ce0 => grp_phy_txend_confirm_fu_292_edca_queues_ce0,
        edca_queues_we0 => grp_phy_txend_confirm_fu_292_edca_queues_we0,
        edca_queues_d0 => grp_phy_txend_confirm_fu_292_edca_queues_d0,
        edca_queues_q0 => edca_queues_q0,
        read_pointer_bk_i => read_pointer_bk,
        read_pointer_bk_o => grp_phy_txend_confirm_fu_292_read_pointer_bk_o,
        read_pointer_bk_o_ap_vld => grp_phy_txend_confirm_fu_292_read_pointer_bk_o_ap_vld,
        read_pointer_be_i => read_pointer_be,
        read_pointer_be_o => grp_phy_txend_confirm_fu_292_read_pointer_be_o,
        read_pointer_be_o_ap_vld => grp_phy_txend_confirm_fu_292_read_pointer_be_o_ap_vld,
        read_pointer_vi_i => read_pointer_vi,
        read_pointer_vi_o => grp_phy_txend_confirm_fu_292_read_pointer_vi_o,
        read_pointer_vi_o_ap_vld => grp_phy_txend_confirm_fu_292_read_pointer_vi_o_ap_vld,
        read_pointer_vo_i => read_pointer_vo,
        read_pointer_vo_o => grp_phy_txend_confirm_fu_292_read_pointer_vo_o,
        read_pointer_vo_o_ap_vld => grp_phy_txend_confirm_fu_292_read_pointer_vo_o_ap_vld);

    grp_ma_unitdatax_request_fu_344 : component ma_unitdatax_request
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ma_unitdatax_request_fu_344_ap_start,
        ap_done => grp_ma_unitdatax_request_fu_344_ap_done,
        ap_idle => grp_ma_unitdatax_request_fu_344_ap_idle,
        ap_ready => grp_ma_unitdatax_request_fu_344_ap_ready,
        source_addr_mac_address0 => grp_ma_unitdatax_request_fu_344_source_addr_mac_address0,
        source_addr_mac_ce0 => grp_ma_unitdatax_request_fu_344_source_addr_mac_ce0,
        source_addr_mac_q0 => source_addr_mac_q0,
        source_addr_mac_address1 => grp_ma_unitdatax_request_fu_344_source_addr_mac_address1,
        source_addr_mac_ce1 => grp_ma_unitdatax_request_fu_344_source_addr_mac_ce1,
        source_addr_mac_q1 => source_addr_mac_q1,
        data_address0 => grp_ma_unitdatax_request_fu_344_data_address0,
        data_ce0 => grp_ma_unitdatax_request_fu_344_data_ce0,
        data_q0 => data_q0,
        up => up,
        s_class => s_class,
        c_identifier_operating_class => c_identifier_operating_class,
        c_identifier_channel_number => c_identifier_channel_number,
        d_rate => d_rate,
        tx_power_lvl => tx_power_lvl,
        medium_state => medium_state,
        available_spaces_bk_i => available_spaces_bk,
        available_spaces_bk_o => grp_ma_unitdatax_request_fu_344_available_spaces_bk_o,
        available_spaces_bk_o_ap_vld => grp_ma_unitdatax_request_fu_344_available_spaces_bk_o_ap_vld,
        write_pointer_bk_i => write_pointer_bk,
        write_pointer_bk_o => grp_ma_unitdatax_request_fu_344_write_pointer_bk_o,
        write_pointer_bk_o_ap_vld => grp_ma_unitdatax_request_fu_344_write_pointer_bk_o_ap_vld,
        available_spaces_be_i => available_spaces_be,
        available_spaces_be_o => grp_ma_unitdatax_request_fu_344_available_spaces_be_o,
        available_spaces_be_o_ap_vld => grp_ma_unitdatax_request_fu_344_available_spaces_be_o_ap_vld,
        write_pointer_be_i => write_pointer_be,
        write_pointer_be_o => grp_ma_unitdatax_request_fu_344_write_pointer_be_o,
        write_pointer_be_o_ap_vld => grp_ma_unitdatax_request_fu_344_write_pointer_be_o_ap_vld,
        available_spaces_vi_i => available_spaces_vi,
        available_spaces_vi_o => grp_ma_unitdatax_request_fu_344_available_spaces_vi_o,
        available_spaces_vi_o_ap_vld => grp_ma_unitdatax_request_fu_344_available_spaces_vi_o_ap_vld,
        write_pointer_vi_i => write_pointer_vi,
        write_pointer_vi_o => grp_ma_unitdatax_request_fu_344_write_pointer_vi_o,
        write_pointer_vi_o_ap_vld => grp_ma_unitdatax_request_fu_344_write_pointer_vi_o_ap_vld,
        available_spaces_vo_i => available_spaces_vo,
        available_spaces_vo_o => grp_ma_unitdatax_request_fu_344_available_spaces_vo_o,
        available_spaces_vo_o_ap_vld => grp_ma_unitdatax_request_fu_344_available_spaces_vo_o_ap_vld,
        write_pointer_vo_i => write_pointer_vo,
        write_pointer_vo_o => grp_ma_unitdatax_request_fu_344_write_pointer_vo_o,
        write_pointer_vo_o_ap_vld => grp_ma_unitdatax_request_fu_344_write_pointer_vo_o_ap_vld,
        edca_queues_address0 => grp_ma_unitdatax_request_fu_344_edca_queues_address0,
        edca_queues_ce0 => grp_ma_unitdatax_request_fu_344_edca_queues_ce0,
        edca_queues_we0 => grp_ma_unitdatax_request_fu_344_edca_queues_we0,
        edca_queues_d0 => grp_ma_unitdatax_request_fu_344_edca_queues_d0,
        edca_queues_q0 => edca_queues_q0,
        read_pointer_bk_i => read_pointer_bk,
        read_pointer_bk_o => grp_ma_unitdatax_request_fu_344_read_pointer_bk_o,
        read_pointer_bk_o_ap_vld => grp_ma_unitdatax_request_fu_344_read_pointer_bk_o_ap_vld,
        read_pointer_be_i => read_pointer_be,
        read_pointer_be_o => grp_ma_unitdatax_request_fu_344_read_pointer_be_o,
        read_pointer_be_o_ap_vld => grp_ma_unitdatax_request_fu_344_read_pointer_be_o_ap_vld,
        read_pointer_vi_i => read_pointer_vi,
        read_pointer_vi_o => grp_ma_unitdatax_request_fu_344_read_pointer_vi_o,
        read_pointer_vi_o_ap_vld => grp_ma_unitdatax_request_fu_344_read_pointer_vi_o_ap_vld,
        read_pointer_vo_i => read_pointer_vo,
        read_pointer_vo_o => grp_ma_unitdatax_request_fu_344_read_pointer_vo_o,
        read_pointer_vo_o_ap_vld => grp_ma_unitdatax_request_fu_344_read_pointer_vo_o_ap_vld,
        CW_bk => CW_bk,
        rand_state_i => rand_state,
        rand_state_o => grp_ma_unitdatax_request_fu_344_rand_state_o,
        rand_state_o_ap_vld => grp_ma_unitdatax_request_fu_344_rand_state_o_ap_vld,
        bk_backoff_counter => grp_ma_unitdatax_request_fu_344_bk_backoff_counter,
        bk_backoff_counter_ap_vld => grp_ma_unitdatax_request_fu_344_bk_backoff_counter_ap_vld,
        CW_be => CW_be,
        be_backoff_counter => grp_ma_unitdatax_request_fu_344_be_backoff_counter,
        be_backoff_counter_ap_vld => grp_ma_unitdatax_request_fu_344_be_backoff_counter_ap_vld,
        CW_vi => CW_vi,
        vi_backoff_counter => grp_ma_unitdatax_request_fu_344_vi_backoff_counter,
        vi_backoff_counter_ap_vld => grp_ma_unitdatax_request_fu_344_vi_backoff_counter_ap_vld,
        vo_backoff_counter => grp_ma_unitdatax_request_fu_344_vo_backoff_counter,
        vo_backoff_counter_ap_vld => grp_ma_unitdatax_request_fu_344_vo_backoff_counter_ap_vld);

    grp_phy_data_request_fu_422 : component phy_data_request
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_phy_data_request_fu_422_ap_start,
        ap_done => grp_phy_data_request_fu_422_ap_done,
        ap_idle => grp_phy_data_request_fu_422_ap_idle,
        ap_ready => grp_phy_data_request_fu_422_ap_ready,
        data_address0 => grp_phy_data_request_fu_422_data_address0,
        data_ce0 => grp_phy_data_request_fu_422_data_ce0,
        data_q0 => frame_q0,
        data_offset => add_ln15_reg_578);

    call_ln17_phy_txend_request_fu_429 : component phy_txend_request
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ln17_phy_txend_request_fu_429_ap_start,
        ap_done => call_ln17_phy_txend_request_fu_429_ap_done,
        ap_idle => call_ln17_phy_txend_request_fu_429_ap_idle,
        ap_ready => call_ln17_phy_txend_request_fu_429_ap_ready);

    call_ln6_phy_data_request_1_fu_435 : component phy_data_request_1
    port map (
        ap_ready => call_ln6_phy_data_request_1_fu_435_ap_ready,
        data => data_1_fu_132);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_initial_edca_process_fu_240_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_initial_edca_process_fu_240_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_initial_edca_process_fu_240_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_initial_edca_process_fu_240_ap_ready = ap_const_logic_1)) then 
                    grp_initial_edca_process_fu_240_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ma_unitdatax_request_fu_344_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ma_unitdatax_request_fu_344_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_ma_unitdatax_request_fu_344_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ma_unitdatax_request_fu_344_ap_ready = ap_const_logic_1)) then 
                    grp_ma_unitdatax_request_fu_344_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_phy_data_request_fu_422_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_phy_data_request_fu_422_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (((icmp_ln16_fu_490_p2 = ap_const_lv1_0) and (icmp_ln10_reg_556 = ap_const_lv1_0)) or ((icmp_ln11_fu_467_p2 = ap_const_lv1_1) and (icmp_ln16_fu_490_p2 = ap_const_lv1_0))))) then 
                    grp_phy_data_request_fu_422_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_phy_data_request_fu_422_ap_ready = ap_const_logic_1)) then 
                    grp_phy_data_request_fu_422_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_phy_txend_confirm_fu_292_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_phy_txend_confirm_fu_292_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln22_fu_445_p2 = ap_const_lv1_1))) then 
                    grp_phy_txend_confirm_fu_292_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_phy_txend_confirm_fu_292_ap_ready = ap_const_logic_1)) then 
                    grp_phy_txend_confirm_fu_292_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    CW_be_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_CW_be_o_ap_vld = ap_const_logic_1))) then 
                CW_be <= grp_phy_txend_confirm_fu_292_CW_be_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_CW_be_o_ap_vld = ap_const_logic_1))) then 
                CW_be <= grp_initial_edca_process_fu_240_CW_be_o;
            end if; 
        end if;
    end process;

    CW_bk_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_CW_bk_o_ap_vld = ap_const_logic_1))) then 
                CW_bk <= grp_phy_txend_confirm_fu_292_CW_bk_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_CW_bk_o_ap_vld = ap_const_logic_1))) then 
                CW_bk <= grp_initial_edca_process_fu_240_CW_bk_o;
            end if; 
        end if;
    end process;

    CW_vi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_CW_vi_o_ap_vld = ap_const_logic_1))) then 
                CW_vi <= grp_phy_txend_confirm_fu_292_CW_vi_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_CW_vi_o_ap_vld = ap_const_logic_1))) then 
                CW_vi <= grp_initial_edca_process_fu_240_CW_vi_o;
            end if; 
        end if;
    end process;

    available_spaces_be_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_available_spaces_be_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_available_spaces_be_o_ap_vld = ap_const_logic_1)))) then 
                available_spaces_be <= grp_ma_unitdatax_request_fu_344_available_spaces_be_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_available_spaces_be_o_ap_vld = ap_const_logic_1))) then 
                available_spaces_be <= grp_phy_txend_confirm_fu_292_available_spaces_be_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_available_spaces_be_o_ap_vld = ap_const_logic_1))) then 
                available_spaces_be <= grp_initial_edca_process_fu_240_available_spaces_be_o;
            end if; 
        end if;
    end process;

    available_spaces_bk_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_available_spaces_bk_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_available_spaces_bk_o_ap_vld = ap_const_logic_1)))) then 
                available_spaces_bk <= grp_ma_unitdatax_request_fu_344_available_spaces_bk_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_available_spaces_bk_o_ap_vld = ap_const_logic_1))) then 
                available_spaces_bk <= grp_phy_txend_confirm_fu_292_available_spaces_bk_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_available_spaces_bk_o_ap_vld = ap_const_logic_1))) then 
                available_spaces_bk <= grp_initial_edca_process_fu_240_available_spaces_bk_o;
            end if; 
        end if;
    end process;

    available_spaces_vi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_available_spaces_vi_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_available_spaces_vi_o_ap_vld = ap_const_logic_1)))) then 
                available_spaces_vi <= grp_ma_unitdatax_request_fu_344_available_spaces_vi_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_available_spaces_vi_o_ap_vld = ap_const_logic_1))) then 
                available_spaces_vi <= grp_phy_txend_confirm_fu_292_available_spaces_vi_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_available_spaces_vi_o_ap_vld = ap_const_logic_1))) then 
                available_spaces_vi <= grp_initial_edca_process_fu_240_available_spaces_vi_o;
            end if; 
        end if;
    end process;

    available_spaces_vo_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_available_spaces_vo_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_available_spaces_vo_o_ap_vld = ap_const_logic_1)))) then 
                available_spaces_vo <= grp_ma_unitdatax_request_fu_344_available_spaces_vo_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_available_spaces_vo_o_ap_vld = ap_const_logic_1))) then 
                available_spaces_vo <= grp_phy_txend_confirm_fu_292_available_spaces_vo_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_available_spaces_vo_o_ap_vld = ap_const_logic_1))) then 
                available_spaces_vo <= grp_initial_edca_process_fu_240_available_spaces_vo_o;
            end if; 
        end if;
    end process;

    be_backoff_counter_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_be_backoff_counter_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_be_backoff_counter_ap_vld = ap_const_logic_1)))) then 
                be_backoff_counter <= grp_ma_unitdatax_request_fu_344_be_backoff_counter;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_be_backoff_counter_o_ap_vld = ap_const_logic_1))) then 
                be_backoff_counter <= grp_phy_txend_confirm_fu_292_be_backoff_counter_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_be_backoff_counter_o_ap_vld = ap_const_logic_1))) then 
                be_backoff_counter <= grp_initial_edca_process_fu_240_be_backoff_counter_o;
            end if; 
        end if;
    end process;

    bk_backoff_counter_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_bk_backoff_counter_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_bk_backoff_counter_ap_vld = ap_const_logic_1)))) then 
                bk_backoff_counter <= grp_ma_unitdatax_request_fu_344_bk_backoff_counter;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_bk_backoff_counter_o_ap_vld = ap_const_logic_1))) then 
                bk_backoff_counter <= grp_phy_txend_confirm_fu_292_bk_backoff_counter_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_bk_backoff_counter_o_ap_vld = ap_const_logic_1))) then 
                bk_backoff_counter <= grp_initial_edca_process_fu_240_bk_backoff_counter_o;
            end if; 
        end if;
    end process;

    i_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_0_reg_208 <= i_reg_546;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_208 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    q_0_i_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln10_fu_461_p2 = ap_const_lv1_1) and (icmp_ln22_fu_445_p2 = ap_const_lv1_0))) then 
                q_0_i_reg_219 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                q_0_i_reg_219 <= q_reg_563;
            end if; 
        end if;
    end process;

    rand_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_rand_state_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_rand_state_o_ap_vld = ap_const_logic_1)))) then 
                rand_state <= grp_ma_unitdatax_request_fu_344_rand_state_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_rand_state_o_ap_vld = ap_const_logic_1))) then 
                rand_state <= grp_phy_txend_confirm_fu_292_rand_state_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_rand_state_o_ap_vld = ap_const_logic_1))) then 
                rand_state <= grp_initial_edca_process_fu_240_rand_state_o;
            end if; 
        end if;
    end process;

    read_pointer_be_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_read_pointer_be_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_read_pointer_be_o_ap_vld = ap_const_logic_1)))) then 
                read_pointer_be <= grp_ma_unitdatax_request_fu_344_read_pointer_be_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_read_pointer_be_o_ap_vld = ap_const_logic_1))) then 
                read_pointer_be <= grp_phy_txend_confirm_fu_292_read_pointer_be_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_read_pointer_be_o_ap_vld = ap_const_logic_1))) then 
                read_pointer_be <= grp_initial_edca_process_fu_240_read_pointer_be_o;
            end if; 
        end if;
    end process;

    read_pointer_bk_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_read_pointer_bk_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_read_pointer_bk_o_ap_vld = ap_const_logic_1)))) then 
                read_pointer_bk <= grp_ma_unitdatax_request_fu_344_read_pointer_bk_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_read_pointer_bk_o_ap_vld = ap_const_logic_1))) then 
                read_pointer_bk <= grp_phy_txend_confirm_fu_292_read_pointer_bk_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_read_pointer_bk_o_ap_vld = ap_const_logic_1))) then 
                read_pointer_bk <= grp_initial_edca_process_fu_240_read_pointer_bk_o;
            end if; 
        end if;
    end process;

    read_pointer_vi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_read_pointer_vi_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_read_pointer_vi_o_ap_vld = ap_const_logic_1)))) then 
                read_pointer_vi <= grp_ma_unitdatax_request_fu_344_read_pointer_vi_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_read_pointer_vi_o_ap_vld = ap_const_logic_1))) then 
                read_pointer_vi <= grp_phy_txend_confirm_fu_292_read_pointer_vi_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_read_pointer_vi_o_ap_vld = ap_const_logic_1))) then 
                read_pointer_vi <= grp_initial_edca_process_fu_240_read_pointer_vi_o;
            end if; 
        end if;
    end process;

    read_pointer_vo_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_read_pointer_vo_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_read_pointer_vo_o_ap_vld = ap_const_logic_1)))) then 
                read_pointer_vo <= grp_ma_unitdatax_request_fu_344_read_pointer_vo_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_read_pointer_vo_o_ap_vld = ap_const_logic_1))) then 
                read_pointer_vo <= grp_phy_txend_confirm_fu_292_read_pointer_vo_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_read_pointer_vo_o_ap_vld = ap_const_logic_1))) then 
                read_pointer_vo <= grp_initial_edca_process_fu_240_read_pointer_vo_o;
            end if; 
        end if;
    end process;

    vi_backoff_counter_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_vi_backoff_counter_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_vi_backoff_counter_ap_vld = ap_const_logic_1)))) then 
                vi_backoff_counter <= grp_ma_unitdatax_request_fu_344_vi_backoff_counter;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_vi_backoff_counter_o_ap_vld = ap_const_logic_1))) then 
                vi_backoff_counter <= grp_phy_txend_confirm_fu_292_vi_backoff_counter_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_vi_backoff_counter_o_ap_vld = ap_const_logic_1))) then 
                vi_backoff_counter <= grp_initial_edca_process_fu_240_vi_backoff_counter_o;
            end if; 
        end if;
    end process;

    vo_backoff_counter_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_vo_backoff_counter_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_vo_backoff_counter_ap_vld = ap_const_logic_1)))) then 
                vo_backoff_counter <= grp_ma_unitdatax_request_fu_344_vo_backoff_counter;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_vo_backoff_counter_o_ap_vld = ap_const_logic_1))) then 
                vo_backoff_counter <= grp_phy_txend_confirm_fu_292_vo_backoff_counter_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_vo_backoff_counter_o_ap_vld = ap_const_logic_1))) then 
                vo_backoff_counter <= grp_initial_edca_process_fu_240_vo_backoff_counter_o;
            end if; 
        end if;
    end process;

    write_pointer_be_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_write_pointer_be_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_write_pointer_be_o_ap_vld = ap_const_logic_1)))) then 
                write_pointer_be <= grp_ma_unitdatax_request_fu_344_write_pointer_be_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_write_pointer_be_o_ap_vld = ap_const_logic_1))) then 
                write_pointer_be <= grp_phy_txend_confirm_fu_292_write_pointer_be_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_write_pointer_be_o_ap_vld = ap_const_logic_1))) then 
                write_pointer_be <= grp_initial_edca_process_fu_240_write_pointer_be_o;
            end if; 
        end if;
    end process;

    write_pointer_bk_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_write_pointer_bk_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_write_pointer_bk_o_ap_vld = ap_const_logic_1)))) then 
                write_pointer_bk <= grp_ma_unitdatax_request_fu_344_write_pointer_bk_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_write_pointer_bk_o_ap_vld = ap_const_logic_1))) then 
                write_pointer_bk <= grp_phy_txend_confirm_fu_292_write_pointer_bk_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_write_pointer_bk_o_ap_vld = ap_const_logic_1))) then 
                write_pointer_bk <= grp_initial_edca_process_fu_240_write_pointer_bk_o;
            end if; 
        end if;
    end process;

    write_pointer_vi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_write_pointer_vi_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_write_pointer_vi_o_ap_vld = ap_const_logic_1)))) then 
                write_pointer_vi <= grp_ma_unitdatax_request_fu_344_write_pointer_vi_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_write_pointer_vi_o_ap_vld = ap_const_logic_1))) then 
                write_pointer_vi <= grp_phy_txend_confirm_fu_292_write_pointer_vi_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_write_pointer_vi_o_ap_vld = ap_const_logic_1))) then 
                write_pointer_vi <= grp_initial_edca_process_fu_240_write_pointer_vi_o;
            end if; 
        end if;
    end process;

    write_pointer_vo_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ma_unitdatax_request_fu_344_write_pointer_vo_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_ma_unitdatax_request_fu_344_write_pointer_vo_o_ap_vld = ap_const_logic_1)))) then 
                write_pointer_vo <= grp_ma_unitdatax_request_fu_344_write_pointer_vo_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_write_pointer_vo_o_ap_vld = ap_const_logic_1))) then 
                write_pointer_vo <= grp_phy_txend_confirm_fu_292_write_pointer_vo_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_write_pointer_vo_o_ap_vld = ap_const_logic_1))) then 
                write_pointer_vo <= grp_initial_edca_process_fu_240_write_pointer_vo_o;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln11_fu_467_p2 = ap_const_lv1_1) or (icmp_ln10_reg_556 = ap_const_lv1_0)))) then
                add_ln15_reg_578 <= add_ln15_fu_484_p2;
                icmp_ln16_reg_584 <= icmp_ln16_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                count <= ap_phi_mux_count_new_0_i_phi_fu_233_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln22_fu_445_p2 = ap_const_lv1_0))) then
                count_load_reg_551 <= count;
                icmp_ln10_reg_556 <= icmp_ln10_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                data_1_fu_132 <= mac_frame_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_reg_546 <= i_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln10_reg_556 = ap_const_lv1_1))) then
                q_reg_563 <= q_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln10_reg_556 = ap_const_lv1_1) and (icmp_ln11_fu_467_p2 = ap_const_lv1_0))) then
                    zext_ln12_reg_568(6 downto 0) <= zext_ln12_fu_479_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln12_reg_568(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state10, icmp_ln22_fu_445_p2, icmp_ln10_reg_556, ap_CS_fsm_state11, icmp_ln11_fu_467_p2, grp_initial_edca_process_fu_240_ap_done, grp_phy_txend_confirm_fu_292_ap_done, grp_ma_unitdatax_request_fu_344_ap_done, ap_CS_fsm_state13, ap_block_state13_on_subcall_done, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_ma_unitdatax_request_fu_344_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_ma_unitdatax_request_fu_344_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_initial_edca_process_fu_240_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln22_fu_445_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((icmp_ln11_fu_467_p2 = ap_const_lv1_1) or (icmp_ln10_reg_556 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((grp_phy_txend_confirm_fu_292_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln15_fu_484_p2 <= std_logic_vector(unsigned(count_load_reg_551) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state13_on_subcall_done_assign_proc : process(icmp_ln16_reg_584, grp_phy_data_request_fu_422_ap_done)
    begin
                ap_block_state13_on_subcall_done <= ((grp_phy_data_request_fu_422_ap_done = ap_const_logic_0) and (icmp_ln16_reg_584 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(grp_phy_txend_confirm_fu_292_ap_done, ap_CS_fsm_state14)
    begin
        if (((grp_phy_txend_confirm_fu_292_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_count_new_0_i_phi_fu_233_p4_assign_proc : process(add_ln15_reg_578, icmp_ln16_reg_584, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
            if ((icmp_ln16_reg_584 = ap_const_lv1_0)) then 
                ap_phi_mux_count_new_0_i_phi_fu_233_p4 <= add_ln15_reg_578;
            elsif ((icmp_ln16_reg_584 = ap_const_lv1_1)) then 
                ap_phi_mux_count_new_0_i_phi_fu_233_p4 <= ap_const_lv7_0;
            else 
                ap_phi_mux_count_new_0_i_phi_fu_233_p4 <= "XXXXXXX";
            end if;
        else 
            ap_phi_mux_count_new_0_i_phi_fu_233_p4 <= "XXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_phy_txend_confirm_fu_292_ap_done, ap_CS_fsm_state14)
    begin
        if (((grp_phy_txend_confirm_fu_292_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    call_ln17_phy_txend_request_fu_429_ap_start_assign_proc : process(icmp_ln16_reg_584, ap_CS_fsm_state13, ap_block_state13_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln16_reg_584 = ap_const_lv1_1))) then 
            call_ln17_phy_txend_request_fu_429_ap_start <= ap_const_logic_1;
        else 
            call_ln17_phy_txend_request_fu_429_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    current_txop_holder_o_assign_proc : process(current_txop_holder_i, grp_initial_edca_process_fu_240_current_txop_holder_o, grp_initial_edca_process_fu_240_current_txop_holder_o_ap_vld, grp_phy_txend_confirm_fu_292_current_txop_holder_o, grp_phy_txend_confirm_fu_292_current_txop_holder_o_ap_vld, ap_CS_fsm_state6, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_phy_txend_confirm_fu_292_current_txop_holder_o_ap_vld = ap_const_logic_1))) then 
            current_txop_holder_o <= grp_phy_txend_confirm_fu_292_current_txop_holder_o;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_initial_edca_process_fu_240_current_txop_holder_o_ap_vld = ap_const_logic_1))) then 
            current_txop_holder_o <= grp_initial_edca_process_fu_240_current_txop_holder_o;
        else 
            current_txop_holder_o <= current_txop_holder_i;
        end if; 
    end process;


    current_txop_holder_o_ap_vld_assign_proc : process(grp_initial_edca_process_fu_240_current_txop_holder_o_ap_vld, grp_phy_txend_confirm_fu_292_current_txop_holder_o_ap_vld, ap_CS_fsm_state6, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            current_txop_holder_o_ap_vld <= grp_phy_txend_confirm_fu_292_current_txop_holder_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            current_txop_holder_o_ap_vld <= grp_initial_edca_process_fu_240_current_txop_holder_o_ap_vld;
        else 
            current_txop_holder_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    data_address0 <= grp_ma_unitdatax_request_fu_344_data_address0;

    data_ce0_assign_proc : process(grp_ma_unitdatax_request_fu_344_data_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ce0 <= grp_ma_unitdatax_request_fu_344_data_ce0;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_addr_mac_address0 <= ap_const_lv3_0;
    dest_addr_mac_address1 <= ap_const_lv3_0;
    dest_addr_mac_ce0 <= ap_const_logic_0;
    dest_addr_mac_ce1 <= ap_const_logic_0;
    dest_addr_mac_d0 <= ap_const_lv8_0;
    dest_addr_mac_d1 <= ap_const_lv8_0;
    dest_addr_mac_we0 <= ap_const_logic_0;
    dest_addr_mac_we1 <= ap_const_logic_0;

    edca_queues_address0_assign_proc : process(grp_initial_edca_process_fu_240_edca_queues_address0, grp_phy_txend_confirm_fu_292_edca_queues_address0, grp_ma_unitdatax_request_fu_344_edca_queues_address0, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            edca_queues_address0 <= grp_ma_unitdatax_request_fu_344_edca_queues_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            edca_queues_address0 <= grp_phy_txend_confirm_fu_292_edca_queues_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            edca_queues_address0 <= grp_initial_edca_process_fu_240_edca_queues_address0;
        else 
            edca_queues_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    edca_queues_ce0_assign_proc : process(grp_initial_edca_process_fu_240_edca_queues_ce0, grp_phy_txend_confirm_fu_292_edca_queues_ce0, grp_ma_unitdatax_request_fu_344_edca_queues_ce0, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            edca_queues_ce0 <= grp_ma_unitdatax_request_fu_344_edca_queues_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            edca_queues_ce0 <= grp_phy_txend_confirm_fu_292_edca_queues_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            edca_queues_ce0 <= grp_initial_edca_process_fu_240_edca_queues_ce0;
        else 
            edca_queues_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edca_queues_d0_assign_proc : process(grp_initial_edca_process_fu_240_edca_queues_d0, grp_phy_txend_confirm_fu_292_edca_queues_d0, grp_ma_unitdatax_request_fu_344_edca_queues_d0, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            edca_queues_d0 <= grp_ma_unitdatax_request_fu_344_edca_queues_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            edca_queues_d0 <= grp_phy_txend_confirm_fu_292_edca_queues_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            edca_queues_d0 <= grp_initial_edca_process_fu_240_edca_queues_d0;
        else 
            edca_queues_d0 <= "XXXXXXXX";
        end if; 
    end process;


    edca_queues_we0_assign_proc : process(grp_initial_edca_process_fu_240_edca_queues_we0, grp_phy_txend_confirm_fu_292_edca_queues_we0, grp_ma_unitdatax_request_fu_344_edca_queues_we0, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            edca_queues_we0 <= grp_ma_unitdatax_request_fu_344_edca_queues_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            edca_queues_we0 <= grp_phy_txend_confirm_fu_292_edca_queues_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            edca_queues_we0 <= grp_initial_edca_process_fu_240_edca_queues_we0;
        else 
            edca_queues_we0 <= ap_const_logic_0;
        end if; 
    end process;


    frame_address0_assign_proc : process(zext_ln12_reg_568, icmp_ln16_reg_584, grp_phy_data_request_fu_422_data_address0, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            frame_address0 <= zext_ln12_reg_568(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln16_reg_584 = ap_const_lv1_0))) then 
            frame_address0 <= grp_phy_data_request_fu_422_data_address0;
        else 
            frame_address0 <= "XXXXXXX";
        end if; 
    end process;


    frame_ce0_assign_proc : process(icmp_ln16_reg_584, grp_phy_data_request_fu_422_data_ce0, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            frame_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln16_reg_584 = ap_const_lv1_0))) then 
            frame_ce0 <= grp_phy_data_request_fu_422_data_ce0;
        else 
            frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    frame_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            frame_we0 <= ap_const_logic_1;
        else 
            frame_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_initial_edca_process_fu_240_ap_start <= grp_initial_edca_process_fu_240_ap_start_reg;
    grp_ma_unitdatax_request_fu_344_ap_start <= grp_ma_unitdatax_request_fu_344_ap_start_reg;
    grp_phy_data_request_fu_422_ap_start <= grp_phy_data_request_fu_422_ap_start_reg;
    grp_phy_txend_confirm_fu_292_ap_start <= grp_phy_txend_confirm_fu_292_ap_start_reg;
    i_fu_451_p2 <= std_logic_vector(unsigned(i_0_reg_208) + unsigned(ap_const_lv7_1));
    icmp_ln10_fu_461_p2 <= "1" when (count = ap_const_lv7_0) else "0";
    icmp_ln11_fu_467_p2 <= "1" when (q_0_i_reg_219 = ap_const_lv7_64) else "0";
    icmp_ln16_fu_490_p2 <= "1" when (add_ln15_fu_484_p2 = ap_const_lv7_64) else "0";
    icmp_ln22_fu_445_p2 <= "1" when (i_0_reg_208 = ap_const_lv7_64) else "0";

    mac_frame_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, zext_ln12_fu_479_p1, grp_initial_edca_process_fu_240_frame_to_transfer_address0, grp_phy_txend_confirm_fu_292_frame_to_transfer_address0, ap_CS_fsm_state6, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mac_frame_address0 <= zext_ln12_fu_479_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mac_frame_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mac_frame_address0 <= grp_phy_txend_confirm_fu_292_frame_to_transfer_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mac_frame_address0 <= grp_initial_edca_process_fu_240_frame_to_transfer_address0;
        else 
            mac_frame_address0 <= "XXXXXXX";
        end if; 
    end process;


    mac_frame_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, grp_initial_edca_process_fu_240_frame_to_transfer_ce0, grp_phy_txend_confirm_fu_292_frame_to_transfer_ce0, ap_CS_fsm_state6, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            mac_frame_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mac_frame_ce0 <= grp_phy_txend_confirm_fu_292_frame_to_transfer_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mac_frame_ce0 <= grp_initial_edca_process_fu_240_frame_to_transfer_ce0;
        else 
            mac_frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mac_frame_d0_assign_proc : process(grp_initial_edca_process_fu_240_frame_to_transfer_d0, grp_phy_txend_confirm_fu_292_frame_to_transfer_d0, ap_CS_fsm_state6, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mac_frame_d0 <= grp_phy_txend_confirm_fu_292_frame_to_transfer_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mac_frame_d0 <= grp_initial_edca_process_fu_240_frame_to_transfer_d0;
        else 
            mac_frame_d0 <= "XXXXXXXX";
        end if; 
    end process;


    mac_frame_we0_assign_proc : process(grp_initial_edca_process_fu_240_frame_to_transfer_we0, grp_phy_txend_confirm_fu_292_frame_to_transfer_we0, ap_CS_fsm_state6, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mac_frame_we0 <= grp_phy_txend_confirm_fu_292_frame_to_transfer_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mac_frame_we0 <= grp_initial_edca_process_fu_240_frame_to_transfer_we0;
        else 
            mac_frame_we0 <= ap_const_logic_0;
        end if; 
    end process;

    q_fu_473_p2 <= std_logic_vector(unsigned(q_0_i_reg_219) + unsigned(ap_const_lv7_1));
    received_frame_address0 <= ap_const_lv7_0;
    received_frame_address1 <= ap_const_lv7_0;
    received_frame_ce0 <= ap_const_logic_0;
    received_frame_ce1 <= ap_const_logic_0;
    received_frame_d0 <= ap_const_lv8_0;
    received_frame_d1 <= ap_const_lv8_0;
    received_frame_we0 <= ap_const_logic_0;
    received_frame_we1 <= ap_const_logic_0;
    source_addr_mac_address0 <= grp_ma_unitdatax_request_fu_344_source_addr_mac_address0;
    source_addr_mac_address1 <= grp_ma_unitdatax_request_fu_344_source_addr_mac_address1;

    source_addr_mac_ce0_assign_proc : process(grp_ma_unitdatax_request_fu_344_source_addr_mac_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            source_addr_mac_ce0 <= grp_ma_unitdatax_request_fu_344_source_addr_mac_ce0;
        else 
            source_addr_mac_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    source_addr_mac_ce1_assign_proc : process(grp_ma_unitdatax_request_fu_344_source_addr_mac_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            source_addr_mac_ce1 <= grp_ma_unitdatax_request_fu_344_source_addr_mac_ce1;
        else 
            source_addr_mac_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln12_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_0_i_reg_219),64));
end behav;
