-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity enqueue_dequeue_fram is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ac : IN STD_LOGIC_VECTOR (1 downto 0);
    inout_frame_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    inout_frame_ce0 : OUT STD_LOGIC;
    inout_frame_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of enqueue_dequeue_fram is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv9_64 : STD_LOGIC_VECTOR (8 downto 0) := "001100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv11_4B0 : STD_LOGIC_VECTOR (10 downto 0) := "10010110000";
    constant ap_const_lv11_320 : STD_LOGIC_VECTOR (10 downto 0) := "01100100000";
    constant ap_const_lv10_190 : STD_LOGIC_VECTOR (9 downto 0) := "0110010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal available_spaces_bk : STD_LOGIC_VECTOR (2 downto 0) := "100";
    signal write_pointer_bk : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal edca_queues_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal edca_queues_ce0 : STD_LOGIC;
    signal edca_queues_we0 : STD_LOGIC;
    signal available_spaces_be : STD_LOGIC_VECTOR (2 downto 0) := "100";
    signal write_pointer_be : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal available_spaces_vi : STD_LOGIC_VECTOR (2 downto 0) := "100";
    signal write_pointer_vi : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal available_spaces_vo : STD_LOGIC_VECTOR (2 downto 0) := "100";
    signal write_pointer_vo : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal available_spaces_vo_s_reg_606 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln52_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_pointer_vo_loa_reg_614 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln96_fu_278_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln96_reg_619 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln92_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal available_spaces_vi_s_reg_624 : STD_LOGIC_VECTOR (2 downto 0);
    signal write_pointer_vi_loa_reg_632 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln83_fu_302_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln83_reg_637 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln79_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal available_spaces_be_s_reg_642 : STD_LOGIC_VECTOR (2 downto 0);
    signal write_pointer_be_loa_reg_650 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln70_fu_326_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln70_reg_655 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln66_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal available_spaces_bk_s_reg_660 : STD_LOGIC_VECTOR (2 downto 0);
    signal write_pointer_bk_loa_reg_668 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln57_fu_350_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln57_reg_673 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln53_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vo_fu_366_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal vo_reg_681 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln95_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln96_fu_377_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln96_reg_691 : STD_LOGIC_VECTOR (8 downto 0);
    signal vi_fu_428_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal vi_reg_699 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln82_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln83_fu_439_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln83_reg_709 : STD_LOGIC_VECTOR (8 downto 0);
    signal be_fu_490_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal be_reg_717 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln69_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_fu_501_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln70_reg_727 : STD_LOGIC_VECTOR (8 downto 0);
    signal bk_fu_552_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal bk_reg_735 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln56_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_fu_563_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_reg_745 : STD_LOGIC_VECTOR (8 downto 0);
    signal vo_0_reg_155 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal vi_0_reg_166 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal be_0_reg_177 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal bk_0_reg_188 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_0_reg_199 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln96_1_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_3_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_1_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_3_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_1_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_3_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_1_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_2_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln63_fu_579_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln62_fu_568_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln76_fu_517_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln75_fu_506_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln89_fu_455_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln88_fu_444_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln102_fu_393_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln101_fu_382_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln96_fu_278_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln83_fu_302_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln70_fu_326_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln57_fu_350_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln95_fu_356_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln96_2_fu_404_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln96_1_fu_407_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln82_fu_418_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln83_2_fu_466_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln83_1_fu_469_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln69_fu_480_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln70_2_fu_528_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln70_1_fu_531_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln56_fu_542_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln57_fu_350_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln70_fu_326_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln83_fu_302_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln96_fu_278_p00 : STD_LOGIC_VECTOR (8 downto 0);

    component enqueue_dequeue_fbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    edca_queues_U : component enqueue_dequeue_fbkb
    generic map (
        DataWidth => 8,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edca_queues_address0,
        ce0 => edca_queues_ce0,
        we0 => edca_queues_we0,
        d0 => inout_frame_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv3_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_return_preg <= p_0_reg_199;
                end if; 
            end if;
        end if;
    end process;


    be_0_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_242_p2 = ap_const_lv1_1) and (icmp_ln66_fu_312_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                be_0_reg_177 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                be_0_reg_177 <= be_reg_717;
            end if; 
        end if;
    end process;

    bk_0_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_336_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                bk_0_reg_188 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                bk_0_reg_188 <= bk_reg_735;
            end if; 
        end if;
    end process;

    p_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_fu_264_p2 = ap_const_lv1_1) and (icmp_ln91_fu_254_p2 = ap_const_lv1_1) and (icmp_ln78_fu_248_p2 = ap_const_lv1_0) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_reg_199 <= ap_const_lv3_3;
            elsif (((icmp_ln79_fu_288_p2 = ap_const_lv1_1) and (icmp_ln78_fu_248_p2 = ap_const_lv1_1) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_reg_199 <= ap_const_lv3_2;
            elsif (((icmp_ln66_fu_312_p2 = ap_const_lv1_1) and (icmp_ln65_fu_242_p2 = ap_const_lv1_1) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_reg_199 <= ap_const_lv3_1;
            elsif ((((icmp_ln91_fu_254_p2 = ap_const_lv1_0) and (icmp_ln78_fu_248_p2 = ap_const_lv1_0) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln53_fu_336_p2 = ap_const_lv1_1) and (icmp_ln52_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                p_0_reg_199 <= ap_const_lv3_0;
            elsif ((((icmp_ln56_fu_546_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln69_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln82_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln95_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                p_0_reg_199 <= ap_const_lv3_6;
            end if; 
        end if;
    end process;

    vi_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_248_p2 = ap_const_lv1_1) and (icmp_ln79_fu_288_p2 = ap_const_lv1_0) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                vi_0_reg_166 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                vi_0_reg_166 <= vi_reg_699;
            end if; 
        end if;
    end process;

    vo_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_254_p2 = ap_const_lv1_1) and (icmp_ln92_fu_264_p2 = ap_const_lv1_0) and (icmp_ln78_fu_248_p2 = ap_const_lv1_0) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                vo_0_reg_155 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                vo_0_reg_155 <= vo_reg_681;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_546_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                add_ln57_reg_745 <= add_ln57_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln70_reg_727 <= add_ln70_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln83_reg_709 <= add_ln83_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln96_reg_691 <= add_ln96_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                available_spaces_be <= add_ln76_fu_517_p2;
                write_pointer_be <= add_ln75_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_242_p2 = ap_const_lv1_1) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                available_spaces_be_s_reg_642 <= available_spaces_be;
                write_pointer_be_loa_reg_650 <= write_pointer_be;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_546_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                available_spaces_bk <= add_ln63_fu_579_p2;
                write_pointer_bk <= add_ln62_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                available_spaces_bk_s_reg_660 <= available_spaces_bk;
                write_pointer_bk_loa_reg_668 <= write_pointer_bk;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                available_spaces_vi <= add_ln89_fu_455_p2;
                write_pointer_vi <= add_ln88_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_248_p2 = ap_const_lv1_1) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                available_spaces_vi_s_reg_624 <= available_spaces_vi;
                write_pointer_vi_loa_reg_632 <= write_pointer_vi;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                available_spaces_vo <= add_ln102_fu_393_p2;
                write_pointer_vo <= add_ln101_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_254_p2 = ap_const_lv1_1) and (icmp_ln78_fu_248_p2 = ap_const_lv1_0) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                available_spaces_vo_s_reg_606 <= available_spaces_vo;
                write_pointer_vo_loa_reg_614 <= write_pointer_vo;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                be_reg_717 <= be_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                bk_reg_735 <= bk_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_336_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    mul_ln57_reg_673(8 downto 2) <= mul_ln57_fu_350_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_242_p2 = ap_const_lv1_1) and (icmp_ln66_fu_312_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    mul_ln70_reg_655(8 downto 2) <= mul_ln70_fu_326_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_248_p2 = ap_const_lv1_1) and (icmp_ln79_fu_288_p2 = ap_const_lv1_0) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    mul_ln83_reg_637(8 downto 2) <= mul_ln83_fu_302_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_254_p2 = ap_const_lv1_1) and (icmp_ln92_fu_264_p2 = ap_const_lv1_0) and (icmp_ln78_fu_248_p2 = ap_const_lv1_0) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    mul_ln96_reg_619(8 downto 2) <= mul_ln96_fu_278_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                vi_reg_699 <= vi_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                vo_reg_681 <= vo_fu_366_p2;
            end if;
        end if;
    end process;
    mul_ln96_reg_619(1 downto 0) <= "00";
    mul_ln83_reg_637(1 downto 0) <= "00";
    mul_ln70_reg_655(1 downto 0) <= "00";
    mul_ln57_reg_673(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln52_fu_236_p2, icmp_ln65_fu_242_p2, icmp_ln78_fu_248_p2, icmp_ln91_fu_254_p2, icmp_ln92_fu_264_p2, icmp_ln79_fu_288_p2, icmp_ln66_fu_312_p2, icmp_ln53_fu_336_p2, ap_CS_fsm_state2, icmp_ln95_fu_360_p2, ap_CS_fsm_state4, icmp_ln82_fu_422_p2, ap_CS_fsm_state6, icmp_ln69_fu_484_p2, ap_CS_fsm_state8, icmp_ln56_fu_546_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln53_fu_336_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((icmp_ln65_fu_242_p2 = ap_const_lv1_1) and (icmp_ln66_fu_312_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((icmp_ln78_fu_248_p2 = ap_const_lv1_1) and (icmp_ln79_fu_288_p2 = ap_const_lv1_0) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((icmp_ln91_fu_254_p2 = ap_const_lv1_1) and (icmp_ln92_fu_264_p2 = ap_const_lv1_0) and (icmp_ln78_fu_248_p2 = ap_const_lv1_0) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and ((((((icmp_ln66_fu_312_p2 = ap_const_lv1_1) and (icmp_ln65_fu_242_p2 = ap_const_lv1_1) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0)) or ((icmp_ln53_fu_336_p2 = ap_const_lv1_1) and (icmp_ln52_fu_236_p2 = ap_const_lv1_1))) or ((icmp_ln79_fu_288_p2 = ap_const_lv1_1) and (icmp_ln78_fu_248_p2 = ap_const_lv1_1) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0))) or ((icmp_ln92_fu_264_p2 = ap_const_lv1_1) and (icmp_ln78_fu_248_p2 = ap_const_lv1_0) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0))) or ((icmp_ln91_fu_254_p2 = ap_const_lv1_0) and (icmp_ln78_fu_248_p2 = ap_const_lv1_0) and (icmp_ln65_fu_242_p2 = ap_const_lv1_0) and (icmp_ln52_fu_236_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln95_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln82_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln69_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln56_fu_546_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln101_fu_382_p2 <= std_logic_vector(unsigned(write_pointer_vo_loa_reg_614) + unsigned(ap_const_lv2_1));
    add_ln102_fu_393_p2 <= std_logic_vector(unsigned(available_spaces_vo_s_reg_606) + unsigned(ap_const_lv3_7));
    add_ln57_fu_563_p2 <= std_logic_vector(unsigned(zext_ln56_fu_542_p1) + unsigned(mul_ln57_reg_673));
    add_ln62_fu_568_p2 <= std_logic_vector(unsigned(write_pointer_bk_loa_reg_668) + unsigned(ap_const_lv2_1));
    add_ln63_fu_579_p2 <= std_logic_vector(unsigned(available_spaces_bk_s_reg_660) + unsigned(ap_const_lv3_7));
    add_ln70_1_fu_531_p2 <= std_logic_vector(unsigned(zext_ln70_2_fu_528_p1) + unsigned(ap_const_lv10_190));
    add_ln70_fu_501_p2 <= std_logic_vector(unsigned(mul_ln70_reg_655) + unsigned(zext_ln69_fu_480_p1));
    add_ln75_fu_506_p2 <= std_logic_vector(unsigned(write_pointer_be_loa_reg_650) + unsigned(ap_const_lv2_1));
    add_ln76_fu_517_p2 <= std_logic_vector(unsigned(available_spaces_be_s_reg_642) + unsigned(ap_const_lv3_7));
    add_ln83_1_fu_469_p2 <= std_logic_vector(unsigned(zext_ln83_2_fu_466_p1) + unsigned(ap_const_lv11_320));
    add_ln83_fu_439_p2 <= std_logic_vector(unsigned(mul_ln83_reg_637) + unsigned(zext_ln82_fu_418_p1));
    add_ln88_fu_444_p2 <= std_logic_vector(unsigned(write_pointer_vi_loa_reg_632) + unsigned(ap_const_lv2_1));
    add_ln89_fu_455_p2 <= std_logic_vector(unsigned(available_spaces_vi_s_reg_624) + unsigned(ap_const_lv3_7));
    add_ln96_1_fu_407_p2 <= std_logic_vector(unsigned(zext_ln96_2_fu_404_p1) + unsigned(ap_const_lv11_4B0));
    add_ln96_fu_377_p2 <= std_logic_vector(unsigned(mul_ln96_reg_619) + unsigned(zext_ln95_fu_356_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(p_0_reg_199, ap_return_preg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_return <= p_0_reg_199;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    be_fu_490_p2 <= std_logic_vector(unsigned(be_0_reg_177) + unsigned(ap_const_lv7_1));
    bk_fu_552_p2 <= std_logic_vector(unsigned(bk_0_reg_188) + unsigned(ap_const_lv7_1));

    edca_queues_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, zext_ln96_3_fu_413_p1, zext_ln83_3_fu_475_p1, zext_ln70_3_fu_537_p1, zext_ln57_2_fu_590_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            edca_queues_address0 <= zext_ln57_2_fu_590_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            edca_queues_address0 <= zext_ln70_3_fu_537_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            edca_queues_address0 <= zext_ln83_3_fu_475_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            edca_queues_address0 <= zext_ln96_3_fu_413_p1(11 - 1 downto 0);
        else 
            edca_queues_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    edca_queues_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            edca_queues_ce0 <= ap_const_logic_1;
        else 
            edca_queues_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edca_queues_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            edca_queues_we0 <= ap_const_logic_1;
        else 
            edca_queues_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln52_fu_236_p2 <= "1" when (ac = ap_const_lv2_0) else "0";
    icmp_ln53_fu_336_p2 <= "1" when (available_spaces_bk = ap_const_lv3_0) else "0";
    icmp_ln56_fu_546_p2 <= "1" when (bk_0_reg_188 = ap_const_lv7_64) else "0";
    icmp_ln65_fu_242_p2 <= "1" when (ac = ap_const_lv2_1) else "0";
    icmp_ln66_fu_312_p2 <= "1" when (available_spaces_be = ap_const_lv3_0) else "0";
    icmp_ln69_fu_484_p2 <= "1" when (be_0_reg_177 = ap_const_lv7_64) else "0";
    icmp_ln78_fu_248_p2 <= "1" when (ac = ap_const_lv2_2) else "0";
    icmp_ln79_fu_288_p2 <= "1" when (available_spaces_vi = ap_const_lv3_0) else "0";
    icmp_ln82_fu_422_p2 <= "1" when (vi_0_reg_166 = ap_const_lv7_64) else "0";
    icmp_ln91_fu_254_p2 <= "1" when (ac = ap_const_lv2_3) else "0";
    icmp_ln92_fu_264_p2 <= "1" when (available_spaces_vo = ap_const_lv3_0) else "0";
    icmp_ln95_fu_360_p2 <= "1" when (vo_0_reg_155 = ap_const_lv7_64) else "0";

    inout_frame_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, zext_ln96_1_fu_372_p1, zext_ln83_1_fu_434_p1, zext_ln70_1_fu_496_p1, zext_ln57_1_fu_558_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inout_frame_address0 <= zext_ln57_1_fu_558_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inout_frame_address0 <= zext_ln70_1_fu_496_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inout_frame_address0 <= zext_ln83_1_fu_434_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inout_frame_address0 <= zext_ln96_1_fu_372_p1(7 - 1 downto 0);
        else 
            inout_frame_address0 <= "XXXXXXX";
        end if; 
    end process;


    inout_frame_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inout_frame_ce0 <= ap_const_logic_1;
        else 
            inout_frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln57_fu_350_p0 <= mul_ln57_fu_350_p00(2 - 1 downto 0);
    mul_ln57_fu_350_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(write_pointer_bk),9));
    mul_ln57_fu_350_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln57_fu_350_p0) * unsigned(ap_const_lv9_64), 9));
    mul_ln70_fu_326_p0 <= mul_ln70_fu_326_p00(2 - 1 downto 0);
    mul_ln70_fu_326_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(write_pointer_be),9));
    mul_ln70_fu_326_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln70_fu_326_p0) * unsigned(ap_const_lv9_64), 9));
    mul_ln83_fu_302_p0 <= mul_ln83_fu_302_p00(2 - 1 downto 0);
    mul_ln83_fu_302_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(write_pointer_vi),9));
    mul_ln83_fu_302_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln83_fu_302_p0) * unsigned(ap_const_lv9_64), 9));
    mul_ln96_fu_278_p0 <= mul_ln96_fu_278_p00(2 - 1 downto 0);
    mul_ln96_fu_278_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(write_pointer_vo),9));
    mul_ln96_fu_278_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln96_fu_278_p0) * unsigned(ap_const_lv9_64), 9));
    vi_fu_428_p2 <= std_logic_vector(unsigned(vi_0_reg_166) + unsigned(ap_const_lv7_1));
    vo_fu_366_p2 <= std_logic_vector(unsigned(vo_0_reg_155) + unsigned(ap_const_lv7_1));
    zext_ln56_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bk_0_reg_188),9));
    zext_ln57_1_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bk_0_reg_188),64));
    zext_ln57_2_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_reg_745),64));
    zext_ln69_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(be_0_reg_177),9));
    zext_ln70_1_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(be_0_reg_177),64));
    zext_ln70_2_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_reg_727),10));
    zext_ln70_3_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_1_fu_531_p2),64));
    zext_ln82_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vi_0_reg_166),9));
    zext_ln83_1_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vi_0_reg_166),64));
    zext_ln83_2_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_reg_709),11));
    zext_ln83_3_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_1_fu_469_p2),64));
    zext_ln95_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vo_0_reg_155),9));
    zext_ln96_1_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vo_0_reg_155),64));
    zext_ln96_2_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln96_reg_691),11));
    zext_ln96_3_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln96_1_fu_407_p2),64));
end behav;
